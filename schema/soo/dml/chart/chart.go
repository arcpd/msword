package chart

import (
	_e "encoding/xml"
	_a "fmt"
	_b "regexp"
	_bg "strconv"

	_g "github.com/arcpd/msword"
	_ab "github.com/arcpd/msword/common/logger"
	_bb "github.com/arcpd/msword/schema/soo/dml"
	_eb "github.com/arcpd/msword/schema/soo/dml/chartDrawing"
	_ge "github.com/arcpd/msword/schema/soo/ofc/sharedTypes"
)

func (_deag *CT_DateAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_deag.AxId = NewCT_UnsignedInt()
	_deag.Scaling = NewCT_Scaling()
	_deag.AxPos = NewCT_AxPos()
	_deag.CrossAx = NewCT_UnsignedInt()
_afce:
	for {
		_bbbbd, _gefab := d.Token()
		if _gefab != nil {
			return _gefab
		}
		switch _acbb := _bbbbd.(type) {
		case _e.StartElement:
			switch _acbb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _bcgf := d.DecodeElement(_deag.AxId, &_acbb); _bcgf != nil {
					return _bcgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _aege := d.DecodeElement(_deag.Scaling, &_acbb); _aege != nil {
					return _aege
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_deag.Delete = NewCT_Boolean()
				if _bfc := d.DecodeElement(_deag.Delete, &_acbb); _bfc != nil {
					return _bfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _begc := d.DecodeElement(_deag.AxPos, &_acbb); _begc != nil {
					return _begc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_deag.MajorGridlines = NewCT_ChartLines()
				if _fbfgg := d.DecodeElement(_deag.MajorGridlines, &_acbb); _fbfgg != nil {
					return _fbfgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_deag.MinorGridlines = NewCT_ChartLines()
				if _dcfg := d.DecodeElement(_deag.MinorGridlines, &_acbb); _dcfg != nil {
					return _dcfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_deag.Title = NewCT_Title()
				if _fccca := d.DecodeElement(_deag.Title, &_acbb); _fccca != nil {
					return _fccca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_deag.NumFmt = NewCT_NumFmt()
				if _cdce := d.DecodeElement(_deag.NumFmt, &_acbb); _cdce != nil {
					return _cdce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_deag.MajorTickMark = NewCT_TickMark()
				if _aedg := d.DecodeElement(_deag.MajorTickMark, &_acbb); _aedg != nil {
					return _aedg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_deag.MinorTickMark = NewCT_TickMark()
				if _bgee := d.DecodeElement(_deag.MinorTickMark, &_acbb); _bgee != nil {
					return _bgee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_deag.TickLblPos = NewCT_TickLblPos()
				if _gedg := d.DecodeElement(_deag.TickLblPos, &_acbb); _gedg != nil {
					return _gedg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_deag.SpPr = _bb.NewCT_ShapeProperties()
				if _bacf := d.DecodeElement(_deag.SpPr, &_acbb); _bacf != nil {
					return _bacf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_deag.TxPr = _bb.NewCT_TextBody()
				if _cggg := d.DecodeElement(_deag.TxPr, &_acbb); _cggg != nil {
					return _cggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _ccga := d.DecodeElement(_deag.CrossAx, &_acbb); _ccga != nil {
					return _ccga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_deag.Choice = NewEG_AxSharedChoice()
				if _aaad := d.DecodeElement(&_deag.Choice.Crosses, &_acbb); _aaad != nil {
					return _aaad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_deag.Choice = NewEG_AxSharedChoice()
				if _fegf := d.DecodeElement(&_deag.Choice.CrossesAt, &_acbb); _fegf != nil {
					return _fegf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_deag.Auto = NewCT_Boolean()
				if _aebeb := d.DecodeElement(_deag.Auto, &_acbb); _aebeb != nil {
					return _aebeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_deag.LblOffset = NewCT_LblOffset()
				if _dfcfb := d.DecodeElement(_deag.LblOffset, &_acbb); _dfcfb != nil {
					return _dfcfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0073e\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_deag.BaseTimeUnit = NewCT_TimeUnit()
				if _dec := d.DecodeElement(_deag.BaseTimeUnit, &_acbb); _dec != nil {
					return _dec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_deag.MajorUnit = NewCT_AxisUnit()
				if _gffb := d.DecodeElement(_deag.MajorUnit, &_acbb); _gffb != nil {
					return _gffb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_deag.MajorTimeUnit = NewCT_TimeUnit()
				if _fdbec := d.DecodeElement(_deag.MajorTimeUnit, &_acbb); _fdbec != nil {
					return _fdbec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_deag.MinorUnit = NewCT_AxisUnit()
				if _gaab := d.DecodeElement(_deag.MinorUnit, &_acbb); _gaab != nil {
					return _gaab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}:
				_deag.MinorTimeUnit = NewCT_TimeUnit()
				if _dfgc := d.DecodeElement(_deag.MinorTimeUnit, &_acbb); _dfgc != nil {
					return _dfgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_deag.ExtLst = NewCT_ExtensionList()
				if _fcda := d.DecodeElement(_deag.ExtLst, &_acbb); _fcda != nil {
					return _fcda
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0061\u0074e\u0041\u0078 \u0025\u0076", _acbb.Name)
				if _abdd := d.Skip(); _abdd != nil {
					return _abdd
				}
			}
		case _e.EndElement:
			break _afce
		case _e.CharData:
		}
	}
	return nil
}

func (_febgb *EG_SerShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_dagdac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_febgb.Idx, _dagdac)
	_bffaa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_febgb.Order, _bffaa)
	if _febgb.Tx != nil {
		_agcgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_febgb.Tx, _agcgc)
	}
	if _febgb.SpPr != nil {
		_eadaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_febgb.SpPr, _eadaf)
	}
	return nil
}

func (_cdeg ST_TrendlineType) ValidateWithPath(path string) error {
	switch _cdeg {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cdeg))
	}
	return nil
}

func (_aefdc *CT_PrintSettings) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dbebfb:
	for {
		_gbfgd, _eeefd := d.Token()
		if _eeefd != nil {
			return _eeefd
		}
		switch _gbgd := _gbfgd.(type) {
		case _e.StartElement:
			switch _gbgd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_aefdc.HeaderFooter = NewCT_HeaderFooter()
				if _ddefe := d.DecodeElement(_aefdc.HeaderFooter, &_gbgd); _ddefe != nil {
					return _ddefe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}:
				_aefdc.PageMargins = NewCT_PageMargins()
				if _ggba := d.DecodeElement(_aefdc.PageMargins, &_gbgd); _ggba != nil {
					return _ggba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070a\u0067\u0065\u0053\u0065\u0074\u0075p"}:
				_aefdc.PageSetup = NewCT_PageSetup()
				if _ebgcb := d.DecodeElement(_aefdc.PageSetup, &_gbgd); _ebgcb != nil {
					return _ebgcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067a\u0063\u0079\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"}:
				_aefdc.LegacyDrawingHF = NewCT_RelId()
				if _cbcg := d.DecodeElement(_aefdc.LegacyDrawingHF, &_gbgd); _cbcg != nil {
					return _cbcg
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u0020\u0025v", _gbgd.Name)
				if _edfcb := d.Skip(); _edfcb != nil {
					return _edfcb
				}
			}
		case _e.EndElement:
			break _dbebfb
		case _e.CharData:
		}
	}
	return nil
}

type EG_PieChartShared struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
}

func (_daaed *CT_NumDataSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_daaed.Choice = NewCT_NumDataSourceChoice()
_eggd:
	for {
		_ecb, _gfbbg := d.Token()
		if _gfbbg != nil {
			return _gfbbg
		}
		switch _gdda := _ecb.(type) {
		case _e.StartElement:
			switch _gdda.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_daaed.Choice = NewCT_NumDataSourceChoice()
				if _efdec := d.DecodeElement(&_daaed.Choice.NumRef, &_gdda); _efdec != nil {
					return _efdec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_daaed.Choice = NewCT_NumDataSourceChoice()
				if _gaabg := d.DecodeElement(&_daaed.Choice.NumLit, &_gdda); _gaabg != nil {
					return _gaabg
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025v", _gdda.Name)
				if _gdfg := d.Skip(); _gdfg != nil {
					return _gdfg
				}
			}
		case _e.EndElement:
			break _eggd
		case _e.CharData:
		}
	}
	return nil
}

func (_fbee *CT_ErrValType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fbee.ValAttr != ST_ErrValTypeUnset {
		_aecgd, _ecde := _fbee.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ecde != nil {
			return _ecde
		}
		start.Attr = append(start.Attr, _aecgd)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ddff *CT_LineSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gadfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_ddff.Idx, _gadfg)
	_baeee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_ddff.Order, _baeee)
	if _ddff.Tx != nil {
		_dggg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_ddff.Tx, _dggg)
	}
	if _ddff.SpPr != nil {
		_gdbfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ddff.SpPr, _gdbfd)
	}
	if _ddff.Marker != nil {
		_ebcaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_ddff.Marker, _ebcaa)
	}
	if _ddff.DPt != nil {
		_bdgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _bcbbd := range _ddff.DPt {
			e.EncodeElement(_bcbbd, _bdgd)
		}
	}
	if _ddff.DLbls != nil {
		_cdaf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ddff.DLbls, _cdaf)
	}
	if _ddff.Trendline != nil {
		_fcfcd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _bdcea := range _ddff.Trendline {
			e.EncodeElement(_bdcea, _fcfcd)
		}
	}
	if _ddff.ErrBars != nil {
		_ffga := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_ddff.ErrBars, _ffga)
	}
	if _ddff.Cat != nil {
		_fgge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_ddff.Cat, _fgge)
	}
	if _ddff.Val != nil {
		_bbbff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_ddff.Val, _bbbff)
	}
	if _ddff.Smooth != nil {
		_cegec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_ddff.Smooth, _cegec)
	}
	if _ddff.ExtLst != nil {
		_edbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ddff.ExtLst, _edbgd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_agge *CT_PictureFormat) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_agge.ValAttr = ST_PictureFormat(1)
	for _, _fegdg := range start.Attr {
		if _fegdg.Name.Local == "\u0076\u0061\u006c" {
			_agge.ValAttr.UnmarshalXMLAttr(_fegdg)
			continue
		}
	}
	for {
		_cadb, _cffbd := d.Token()
		if _cffbd != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074u\u0072e\u0046\u006f\u0072\u006d\u0061\u0074\u003a \u0025\u0073", _cffbd)
		}
		if _ffeec, _aead := _cadb.(_e.EndElement); _aead && _ffeec.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ageb *CT_Shape) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _eabef := range start.Attr {
		if _eabef.Name.Local == "\u0076\u0061\u006c" {
			_ageb.ValAttr.UnmarshalXMLAttr(_eabef)
			continue
		}
	}
	for {
		_bgdfea, _eefffc := d.Token()
		if _eefffc != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0068\u0061\u0070\u0065: \u0025\u0073", _eefffc)
		}
		if _degdb, _ggbd := _bgdfea.(_e.EndElement); _ggbd && _degdb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_Marker and its children
func (_bfbe *CT_Marker) Validate() error {
	return _bfbe.ValidateWithPath("\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r")
}

// ValidateWithPath validates the CT_Trendline and its children, prefixing error messages with path
func (_cfgea *CT_Trendline) ValidateWithPath(path string) error {
	if _cfgea.SpPr != nil {
		if _daaca := _cfgea.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _daaca != nil {
			return _daaca
		}
	}
	if _fbcfa := _cfgea.TrendlineType.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006ee\u0054\u0079\u0070\u0065"); _fbcfa != nil {
		return _fbcfa
	}
	if _cfgea.Order != nil {
		if _abce := _cfgea.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _abce != nil {
			return _abce
		}
	}
	if _cfgea.Period != nil {
		if _ageac := _cfgea.Period.ValidateWithPath(path + "\u002fP\u0065\u0072\u0069\u006f\u0064"); _ageac != nil {
			return _ageac
		}
	}
	if _cfgea.Forward != nil {
		if _dffgf := _cfgea.Forward.ValidateWithPath(path + "\u002f\u0046\u006f\u0072\u0077\u0061\u0072\u0064"); _dffgf != nil {
			return _dffgf
		}
	}
	if _cfgea.Backward != nil {
		if _gecea := _cfgea.Backward.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0077\u0061\u0072d"); _gecea != nil {
			return _gecea
		}
	}
	if _cfgea.Intercept != nil {
		if _fffd := _cfgea.Intercept.ValidateWithPath(path + "\u002f\u0049\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"); _fffd != nil {
			return _fffd
		}
	}
	if _cfgea.DispRSqr != nil {
		if _fedcc := _cfgea.DispRSqr.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0052\u0053\u0071r"); _fedcc != nil {
			return _fedcc
		}
	}
	if _cfgea.DispEq != nil {
		if _bgaaa := _cfgea.DispEq.ValidateWithPath(path + "\u002fD\u0069\u0073\u0070\u0045\u0071"); _bgaaa != nil {
			return _bgaaa
		}
	}
	if _cfgea.TrendlineLbl != nil {
		if _gbbcgf := _cfgea.TrendlineLbl.ValidateWithPath(path + "\u002f\u0054\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"); _gbbcgf != nil {
			return _gbbcgf
		}
	}
	if _cfgea.ExtLst != nil {
		if _cagab := _cfgea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cagab != nil {
			return _cagab
		}
	}
	return nil
}

type CT_LayoutMode struct{ ValAttr ST_LayoutMode }

// ValidateWithPath validates the CT_MultiLvlStrData and its children, prefixing error messages with path
func (_cegbd *CT_MultiLvlStrData) ValidateWithPath(path string) error {
	if _cegbd.PtCount != nil {
		if _abbc := _cegbd.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _abbc != nil {
			return _abbc
		}
	}
	for _cgde, _gggc := range _cegbd.Lvl {
		if _ddfg := _gggc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u004c\u0076\u006c\u005b\u0025\u0064\u005d", path, _cgde)); _ddfg != nil {
			return _ddfg
		}
	}
	if _cegbd.ExtLst != nil {
		if _caedc := _cegbd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _caedc != nil {
			return _caedc
		}
	}
	return nil
}

// Validate validates the CT_PivotFmts and its children
func (_edbfa *CT_PivotFmts) Validate() error {
	return _edbfa.ValidateWithPath("\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073")
}

func (_beba *CT_Surface3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _beba.Wireframe != nil {
		_fdgbf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_beba.Wireframe, _fdgbf)
	}
	if _beba.Ser != nil {
		_dgfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _acga := range _beba.Ser {
			e.EncodeElement(_acga, _dgfd)
		}
	}
	if _beba.BandFmts != nil {
		_ffafbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_beba.BandFmts, _ffafbb)
	}
	_cagb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dedec := range _beba.AxId {
		e.EncodeElement(_dedec, _cagb)
	}
	if _beba.ExtLst != nil {
		_gbdcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_beba.ExtLst, _gbdcg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_adcfd ST_LegendPos) String() string {
	switch _adcfd {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u0074\u0072"
	case 3:
		return "\u006c"
	case 4:
		return "\u0072"
	case 5:
		return "\u0074"
	}
	return ""
}

// Validate validates the CT_LogBase and its children
func (_acce *CT_LogBase) Validate() error {
	return _acce.ValidateWithPath("\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065")
}

func (_dd *CT_BandFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fgec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dd.Idx, _fgec)
	if _dd.SpPr != nil {
		_cff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dd.SpPr, _cff)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_aede *CT_TickMark) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _aede.ValAttr != ST_TickMarkUnset {
		_gfecb, _agedg := _aede.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _agedg != nil {
			return _agedg
		}
		start.Attr = append(start.Attr, _gfecb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fbbf *CT_FirstSliceAng) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fbbf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_fbbf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_acccd *ST_GapAmount) ValidateWithPath(path string) error {
	_ffgf := []string{}
	if _acccd.ST_GapAmountPercent != nil {
		_ffgf = append(_ffgf, "\u0053\u0054\u005f\u0047ap\u0041\u006d\u006f\u0075\u006e\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _acccd.ST_GapAmountUShort != nil {
		_ffgf = append(_ffgf, "\u0053T\u005fG\u0061\u0070\u0041\u006d\u006fu\u006e\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_ffgf) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ffgf)
	}
	return nil
}

func (_dgbab *CT_OfPieType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cdcfe := range start.Attr {
		if _cdcfe.Name.Local == "\u0076\u0061\u006c" {
			_dgbab.ValAttr.UnmarshalXMLAttr(_cdcfe)
			continue
		}
	}
	for {
		_bgcef, _abag := d.Token()
		if _abag != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004f\u0066P\u0069\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _abag)
		}
		if _cffb, _eggdb := _bgcef.(_e.EndElement); _eggdb && _cffb.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_LblOffset and its children
func (_gdffd *CT_LblOffset) Validate() error {
	return _gdffd.ValidateWithPath("\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074")
}

// Validate validates the CT_BuiltInUnit and its children
func (_bbbc *CT_BuiltInUnit) Validate() error {
	return _bbbc.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074")
}

type CT_Legend struct {
	LegendPos   *CT_LegendPos
	LegendEntry []*CT_LegendEntry
	Layout      *CT_Layout
	Overlay     *CT_Boolean
	SpPr        *_bb.CT_ShapeProperties
	TxPr        *_bb.CT_TextBody
	ExtLst      *CT_ExtensionList
}

func (_aedc *CT_LayoutMode) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _aedc.ValAttr != ST_LayoutModeUnset {
		_ffeg, _bgeef := _aedc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _bgeef != nil {
			return _bgeef
		}
		start.Attr = append(start.Attr, _ffeg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_HoleSize struct{ ValAttr *ST_HoleSize }

func (_edcbb ST_AxPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ffcge := _e.Attr{}
	_ffcge.Name = name
	switch _edcbb {
	case ST_AxPosUnset:
		_ffcge.Value = ""
	case ST_AxPosB:
		_ffcge.Value = "\u0062"
	case ST_AxPosL:
		_ffcge.Value = "\u006c"
	case ST_AxPosR:
		_ffcge.Value = "\u0072"
	case ST_AxPosT:
		_ffcge.Value = "\u0074"
	}
	return _ffcge, nil
}

func (_bgbg *CT_Marker) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bgade:
	for {
		_cccea, _bgbb := d.Token()
		if _bgbb != nil {
			return _bgbb
		}
		switch _cefd := _cccea.(type) {
		case _e.StartElement:
			switch _cefd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0079\u006d\u0062\u006f\u006c"}:
				_bgbg.Symbol = NewCT_MarkerStyle()
				if _ecdd := d.DecodeElement(_bgbg.Symbol, &_cefd); _ecdd != nil {
					return _ecdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065"}:
				_bgbg.Size = NewCT_MarkerSize()
				if _eaaf := d.DecodeElement(_bgbg.Size, &_cefd); _eaaf != nil {
					return _eaaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bgbg.SpPr = _bb.NewCT_ShapeProperties()
				if _beeb := d.DecodeElement(_bgbg.SpPr, &_cefd); _beeb != nil {
					return _beeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgbg.ExtLst = NewCT_ExtensionList()
				if _efcb := d.DecodeElement(_bgbg.ExtLst, &_cefd); _efcb != nil {
					return _efcb
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004d\u0061\u0072k\u0065\u0072 \u0025\u0076", _cefd.Name)
				if _efeg := d.Skip(); _efeg != nil {
					return _efeg
				}
			}
		case _e.EndElement:
			break _bgade
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_PieSer and its children
func (_bbadc *CT_PieSer) Validate() error {
	return _bbadc.ValidateWithPath("\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r")
}

func NewCT_TxChoice() *CT_TxChoice { _ebbac := &CT_TxChoice{}; return _ebbac }

// Validate validates the CT_TextLanguageID and its children
func (_acafa *CT_TextLanguageID) Validate() error {
	return _acafa.ValidateWithPath("\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044")
}

// Validate validates the CT_SerTxChoice and its children
func (_gebdba *CT_SerTxChoice) Validate() error {
	return _gebdba.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043h\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_Style and its children, prefixing error messages with path
func (_aeafd *CT_Style) ValidateWithPath(path string) error {
	if _aeafd.ValAttr < 1 {
		return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _aeafd.ValAttr)
	}
	if _aeafd.ValAttr > 48 {
		return _a.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00348 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _aeafd.ValAttr)
	}
	return nil
}

func (_cfabf ST_Shape) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cfabf.String(), start)
}

// Validate validates the CT_AxDataSourceChoice and its children
func (_faa *CT_AxDataSourceChoice) Validate() error {
	return _faa.ValidateWithPath("C\u0054\u005f\u0041\u0078Da\u0074a\u0053\u006f\u0075\u0072\u0063e\u0043\u0068\u006f\u0069\u0063\u0065")
}

func (_abegc *CT_ErrDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_gbcb, _fdbf := _abegc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _fdbf != nil {
		return _fdbf
	}
	start.Attr = append(start.Attr, _gbcb)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_deegf *CT_ScatterStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _deegf.ValAttr != ST_ScatterStyleUnset {
		_bgefa, _acgdg := _deegf.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _acgdg != nil {
			return _acgdg
		}
		start.Attr = append(start.Attr, _bgefa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_PictureFormat and its children
func (_aedd *CT_PictureFormat) Validate() error {
	return _aedd.ValidateWithPath("\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074")
}

func (_gcaba *CT_DLblsChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gcaba.Delete != nil {
		_gbge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_gcaba.Delete, _gbge)
	}
	if _gcaba.NumFmt != nil {
		_fege := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gcaba.NumFmt, _fege)
	}
	if _gcaba.SpPr != nil {
		_bbdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gcaba.SpPr, _bbdg)
	}
	if _gcaba.TxPr != nil {
		_fbfaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gcaba.TxPr, _fbfaa)
	}
	if _gcaba.DLblPos != nil {
		_eede := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_gcaba.DLblPos, _eede)
	}
	if _gcaba.ShowLegendKey != nil {
		_efa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_gcaba.ShowLegendKey, _efa)
	}
	if _gcaba.ShowVal != nil {
		_fbdg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_gcaba.ShowVal, _fbdg)
	}
	if _gcaba.ShowCatName != nil {
		_eeaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gcaba.ShowCatName, _eeaf)
	}
	if _gcaba.ShowSerName != nil {
		_eeeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_gcaba.ShowSerName, _eeeg)
	}
	if _gcaba.ShowPercent != nil {
		_dgdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_gcaba.ShowPercent, _dgdc)
	}
	if _gcaba.ShowBubbleSize != nil {
		_faba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_gcaba.ShowBubbleSize, _faba)
	}
	if _gcaba.Separator != nil {
		_geb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_g.AddPreserveSpaceAttr(&_geb, *_gcaba.Separator)
		e.EncodeElement(_gcaba.Separator, _geb)
	}
	if _gcaba.ShowLeaderLines != nil {
		_febc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gcaba.ShowLeaderLines, _febc)
	}
	if _gcaba.LeaderLines != nil {
		_gbbgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gcaba.LeaderLines, _gbbgf)
	}
	return nil
}

// Validate validates the CT_BubbleScale and its children
func (_dbda *CT_BubbleScale) Validate() error {
	return _dbda.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065")
}

// ValidateWithPath validates the CT_LblAlgn and its children, prefixing error messages with path
func (_fecg *CT_LblAlgn) ValidateWithPath(path string) error {
	if _fecg.ValAttr == ST_LblAlgnUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _aeaa := _fecg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aeaa != nil {
		return _aeaa
	}
	return nil
}

const (
	ST_RadarStyleUnset    ST_RadarStyle = 0
	ST_RadarStyleStandard ST_RadarStyle = 1
	ST_RadarStyleMarker   ST_RadarStyle = 2
	ST_RadarStyleFilled   ST_RadarStyle = 3
)

func (_eggbff *ST_OfPieType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_eggbff = 0
	case "\u0070\u0069\u0065":
		*_eggbff = 1
	case "\u0062\u0061\u0072":
		*_eggbff = 2
	}
	return nil
}

type CT_SurfaceSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_bb.CT_ShapeProperties
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_ebee *ST_BubbleScale) Validate() error { return _ebee.ValidateWithPath("") }

// Validate validates the CT_Boolean and its children
func (_cfec *CT_Boolean) Validate() error {
	return _cfec.ValidateWithPath("\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e")
}

func (_aegec *CT_Order) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _aegec.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_aegec.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_adbae ST_BarGrouping) ValidateWithPath(path string) error {
	switch _adbae {
	case 0, 1, 2, 3, 4:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adbae))
	}
	return nil
}

func NewCT_StrData() *CT_StrData { _eggfd := &CT_StrData{}; return _eggfd }

type CT_RadarStyle struct{ ValAttr ST_RadarStyle }

type CT_DLblsChoice struct {
	Delete          *CT_Boolean
	NumFmt          *CT_NumFmt
	SpPr            *_bb.CT_ShapeProperties
	TxPr            *_bb.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

func (_abfb *CT_NumRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dbde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_g.AddPreserveSpaceAttr(&_dbde, _abfb.F)
	e.EncodeElement(_abfb.F, _dbde)
	if _abfb.NumCache != nil {
		_fcfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_abfb.NumCache, _fcfa)
	}
	if _abfb.ExtLst != nil {
		_dcdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abfb.ExtLst, _dcdc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fcafg ST_Orientation) String() string {
	switch _fcafg {
	case 0:
		return ""
	case 1:
		return "\u006d\u0061\u0078\u004d\u0069\u006e"
	case 2:
		return "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return ""
}

func (_gfecgd *ST_SplitType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gfecgd = 0
	case "\u0061\u0075\u0074\u006f":
		*_gfecgd = 1
	case "\u0063\u0075\u0073\u0074":
		*_gfecgd = 2
	case "\u0070e\u0072\u0063\u0065\u006e\u0074":
		*_gfecgd = 3
	case "\u0070\u006f\u0073":
		*_gfecgd = 4
	case "\u0076\u0061\u006c":
		*_gfecgd = 5
	}
	return nil
}

func NewCT_View3D() *CT_View3D { _dcbec := &CT_View3D{}; return _dcbec }

func (_facag *ST_Orientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_edgeb, _efage := d.Token()
	if _efage != nil {
		return _efage
	}
	if _fdcf, _agga := _edgeb.(_e.EndElement); _agga && _fdcf.Name == start.Name {
		*_facag = 1
		return nil
	}
	if _gbebb, _cfae := _edgeb.(_e.CharData); !_cfae {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _edgeb)
	} else {
		switch string(_gbebb) {
		case "":
			*_facag = 0
		case "\u006d\u0061\u0078\u004d\u0069\u006e":
			*_facag = 1
		case "\u006d\u0069\u006e\u004d\u0061\u0078":
			*_facag = 2
		}
	}
	_edgeb, _efage = d.Token()
	if _efage != nil {
		return _efage
	}
	if _ccbea, _babgd := _edgeb.(_e.EndElement); _babgd && _ccbea.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _edgeb)
}

func NewCT_Chart() *CT_Chart { _ebgb := &CT_Chart{}; _ebgb.PlotArea = NewCT_PlotArea(); return _ebgb }

func (_ggf *CT_Boolean) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ggf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_ggf.ValAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bbgf *CT_LineSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bbgf.Idx = NewCT_UnsignedInt()
	_bbgf.Order = NewCT_UnsignedInt()
_gecg:
	for {
		_ffcbb, _ffge := d.Token()
		if _ffge != nil {
			return _ffge
		}
		switch _egbed := _ffcbb.(type) {
		case _e.StartElement:
			switch _egbed.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _aface := d.DecodeElement(_bbgf.Idx, &_egbed); _aface != nil {
					return _aface
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _fcba := d.DecodeElement(_bbgf.Order, &_egbed); _fcba != nil {
					return _fcba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_bbgf.Tx = NewCT_SerTx()
				if _dcdea := d.DecodeElement(_bbgf.Tx, &_egbed); _dcdea != nil {
					return _dcdea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bbgf.SpPr = _bb.NewCT_ShapeProperties()
				if _efdf := d.DecodeElement(_bbgf.SpPr, &_egbed); _efdf != nil {
					return _efdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_bbgf.Marker = NewCT_Marker()
				if _gbbe := d.DecodeElement(_bbgf.Marker, &_egbed); _gbbe != nil {
					return _gbbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_fegg := NewCT_DPt()
				if _gbaa := d.DecodeElement(_fegg, &_egbed); _gbaa != nil {
					return _gbaa
				}
				_bbgf.DPt = append(_bbgf.DPt, _fegg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bbgf.DLbls = NewCT_DLbls()
				if _fbfae := d.DecodeElement(_bbgf.DLbls, &_egbed); _fbfae != nil {
					return _fbfae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_cccfb := NewCT_Trendline()
				if _aebeff := d.DecodeElement(_cccfb, &_egbed); _aebeff != nil {
					return _aebeff
				}
				_bbgf.Trendline = append(_bbgf.Trendline, _cccfb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_bbgf.ErrBars = NewCT_ErrBars()
				if _faga := d.DecodeElement(_bbgf.ErrBars, &_egbed); _faga != nil {
					return _faga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_bbgf.Cat = NewCT_AxDataSource()
				if _gbbf := d.DecodeElement(_bbgf.Cat, &_egbed); _gbbf != nil {
					return _gbbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_bbgf.Val = NewCT_NumDataSource()
				if _dccgc := d.DecodeElement(_bbgf.Val, &_egbed); _dccgc != nil {
					return _dccgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_bbgf.Smooth = NewCT_Boolean()
				if _eaffe := d.DecodeElement(_bbgf.Smooth, &_egbed); _eaffe != nil {
					return _eaffe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bbgf.ExtLst = NewCT_ExtensionList()
				if _dggab := d.DecodeElement(_bbgf.ExtLst, &_egbed); _dggab != nil {
					return _dggab
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fL\u0069\u006e\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _egbed.Name)
				if _fgggd := d.Skip(); _fgggd != nil {
					return _fgggd
				}
			}
		case _e.EndElement:
			break _gecg
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_DPt() *CT_DPt { _dbad := &CT_DPt{}; _dbad.Idx = NewCT_UnsignedInt(); return _dbad }

func (_aabg *CT_MultiLvlStrData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cfged:
	for {
		_cffef, _acgd := d.Token()
		if _acgd != nil {
			return _acgd
		}
		switch _dbae := _cffef.(type) {
		case _e.StartElement:
			switch _dbae.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_aabg.PtCount = NewCT_UnsignedInt()
				if _gafbg := d.DecodeElement(_aabg.PtCount, &_dbae); _gafbg != nil {
					return _gafbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0076\u006c"}:
				_cebd := NewCT_Lvl()
				if _cbaea := d.DecodeElement(_cebd, &_dbae); _cbaea != nil {
					return _cbaea
				}
				_aabg.Lvl = append(_aabg.Lvl, _cebd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aabg.ExtLst = NewCT_ExtensionList()
				if _acgdd := d.DecodeElement(_aabg.ExtLst, &_dbae); _acgdd != nil {
					return _acgdd
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _dbae.Name)
				if _bfeaa := d.Skip(); _bfeaa != nil {
					return _bfeaa
				}
			}
		case _e.EndElement:
			break _cfged
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BarDir and its children, prefixing error messages with path
func (_cdg *CT_BarDir) ValidateWithPath(path string) error {
	if _dgde := _cdg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dgde != nil {
		return _dgde
	}
	return nil
}

func NewEG_LineChartShared() *EG_LineChartShared {
	_bcagb := &EG_LineChartShared{}
	_bcagb.Grouping = NewCT_Grouping()
	return _bcagb
}

func NewCT_SplitType() *CT_SplitType { _decge := &CT_SplitType{}; return _decge }

// Validate validates the CT_OfPieType and its children
func (_aafg *CT_OfPieType) Validate() error {
	return _aafg.ValidateWithPath("\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065")
}

func (_ggaa *CT_DTable) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_faf:
	for {
		_fgfg, _bgfff := d.Token()
		if _bgfff != nil {
			return _bgfff
		}
		switch _badg := _fgfg.(type) {
		case _e.StartElement:
			switch _badg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0048\u006f\u0072\u007a\u0042o\u0072\u0064\u0065\u0072"}:
				_ggaa.ShowHorzBorder = NewCT_Boolean()
				if _gfff := d.DecodeElement(_ggaa.ShowHorzBorder, &_badg); _gfff != nil {
					return _gfff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0056\u0065\u0072\u0074\u0042o\u0072\u0064\u0065\u0072"}:
				_ggaa.ShowVertBorder = NewCT_Boolean()
				if _eedb := d.DecodeElement(_ggaa.ShowVertBorder, &_badg); _eedb != nil {
					return _eedb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}:
				_ggaa.ShowOutline = NewCT_Boolean()
				if _agdf := d.DecodeElement(_ggaa.ShowOutline, &_badg); _agdf != nil {
					return _agdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}:
				_ggaa.ShowKeys = NewCT_Boolean()
				if _cfgf := d.DecodeElement(_ggaa.ShowKeys, &_badg); _cfgf != nil {
					return _cfgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ggaa.SpPr = _bb.NewCT_ShapeProperties()
				if _agegf := d.DecodeElement(_ggaa.SpPr, &_badg); _agegf != nil {
					return _agegf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ggaa.TxPr = _bb.NewCT_TextBody()
				if _aaafb := d.DecodeElement(_ggaa.TxPr, &_badg); _aaafb != nil {
					return _aaafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ggaa.ExtLst = NewCT_ExtensionList()
				if _bbac := d.DecodeElement(_ggaa.ExtLst, &_badg); _bbac != nil {
					return _bbac
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0044\u0054\u0061b\u006c\u0065 \u0025\u0076", _badg.Name)
				if _bebc := d.Skip(); _bebc != nil {
					return _bebc
				}
			}
		case _e.EndElement:
			break _faf
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Shape and its children, prefixing error messages with path
func (_fbbde *CT_Shape) ValidateWithPath(path string) error {
	if _bbcea := _fbbde.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbcea != nil {
		return _bbcea
	}
	return nil
}

func (_fagc *CT_Layout) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fagc.ManualLayout != nil {
		_abgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u006e\u0075\u0061\u006c\u004ca\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_fagc.ManualLayout, _abgc)
	}
	if _fagc.ExtLst != nil {
		_ebgfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fagc.ExtLst, _ebgfc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_acaef *CT_PivotFmts) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _acaef.PivotFmt != nil {
		_daeef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}}
		for _, _eabga := range _acaef.PivotFmt {
			e.EncodeElement(_eabga, _daeef)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dgcgb *ST_ErrBarType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_dgcgb = 0
	case "\u0062\u006f\u0074\u0068":
		*_dgcgb = 1
	case "\u006d\u0069\u006eu\u0073":
		*_dgcgb = 2
	case "\u0070\u006c\u0075\u0073":
		*_dgcgb = 3
	}
	return nil
}

func (_egaaa *CT_TickLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ffeecc := range start.Attr {
		if _ffeecc.Name.Local == "\u0076\u0061\u006c" {
			_egaaa.ValAttr.UnmarshalXMLAttr(_ffeecc)
			continue
		}
	}
	for {
		_cefaf, _defd := d.Token()
		if _defd != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0054i\u0063k\u004cb\u006c\u0050\u006f\u0073\u003a\u0020\u0025s", _defd)
		}
		if _ecfe, _acgdb := _cefaf.(_e.EndElement); _acgdb && _ecfe.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_HoleSize and its children
func (_egbe *CT_HoleSize) Validate() error {
	return _egbe.ValidateWithPath("C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065")
}

func NewEG_BarChartShared() *EG_BarChartShared {
	_cccg := &EG_BarChartShared{}
	_cccg.BarDir = NewCT_BarDir()
	return _cccg
}

// ValidateWithPath validates the CT_BarSer and its children, prefixing error messages with path
func (_adgcb *CT_BarSer) ValidateWithPath(path string) error {
	if _ede := _adgcb.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _ede != nil {
		return _ede
	}
	if _fdba := _adgcb.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _fdba != nil {
		return _fdba
	}
	if _adgcb.Tx != nil {
		if _daae := _adgcb.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _daae != nil {
			return _daae
		}
	}
	if _adgcb.SpPr != nil {
		if _badf := _adgcb.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _badf != nil {
			return _badf
		}
	}
	if _adgcb.InvertIfNegative != nil {
		if _cad := _adgcb.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _cad != nil {
			return _cad
		}
	}
	if _adgcb.PictureOptions != nil {
		if _gaf := _adgcb.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _gaf != nil {
			return _gaf
		}
	}
	for _abcb, _adfd := range _adgcb.DPt {
		if _bgdbf := _adfd.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _abcb)); _bgdbf != nil {
			return _bgdbf
		}
	}
	if _adgcb.DLbls != nil {
		if _gbd := _adgcb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gbd != nil {
			return _gbd
		}
	}
	for _bebb, _bced := range _adgcb.Trendline {
		if _adab := _bced.ValidateWithPath(_a.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _bebb)); _adab != nil {
			return _adab
		}
	}
	if _adgcb.ErrBars != nil {
		if _ggeb := _adgcb.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _ggeb != nil {
			return _ggeb
		}
	}
	if _adgcb.Cat != nil {
		if _cee := _adgcb.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _cee != nil {
			return _cee
		}
	}
	if _adgcb.Val != nil {
		if _ffeb := _adgcb.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _ffeb != nil {
			return _ffeb
		}
	}
	if _adgcb.Shape != nil {
		if _edc := _adgcb.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _edc != nil {
			return _edc
		}
	}
	if _adgcb.ExtLst != nil {
		if _gcgd := _adgcb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcgd != nil {
			return _gcgd
		}
	}
	return nil
}

type CT_Orientation struct{ ValAttr ST_Orientation }

type CT_SerTx struct{ Choice *CT_SerTxChoice }

func (_ddfc *CT_Surface) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_badb:
	for {
		_cbafb, _fegfdg := d.Token()
		if _fegfdg != nil {
			return _fegfdg
		}
		switch _ebggc := _cbafb.(type) {
		case _e.StartElement:
			switch _ebggc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074h\u0069\u0063\u006b\u006e\u0065\u0073s"}:
				_ddfc.Thickness = NewCT_Thickness()
				if _bgbd := d.DecodeElement(_ddfc.Thickness, &_ebggc); _bgbd != nil {
					return _bgbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ddfc.SpPr = _bb.NewCT_ShapeProperties()
				if _agbfe := d.DecodeElement(_ddfc.SpPr, &_ebggc); _agbfe != nil {
					return _agbfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_ddfc.PictureOptions = NewCT_PictureOptions()
				if _aacd := d.DecodeElement(_ddfc.PictureOptions, &_ebggc); _aacd != nil {
					return _aacd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddfc.ExtLst = NewCT_ExtensionList()
				if _gaeg := d.DecodeElement(_ddfc.ExtLst, &_ebggc); _gaeg != nil {
					return _gaeg
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0020\u0025\u0076", _ebggc.Name)
				if _ccee := d.Skip(); _ccee != nil {
					return _ccee
				}
			}
		case _e.EndElement:
			break _badb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Marker and its children, prefixing error messages with path
func (_faca *CT_Marker) ValidateWithPath(path string) error {
	if _faca.Symbol != nil {
		if _bbdb := _faca.Symbol.ValidateWithPath(path + "\u002fS\u0079\u006d\u0062\u006f\u006c"); _bbdb != nil {
			return _bbdb
		}
	}
	if _faca.Size != nil {
		if _bbacg := _faca.Size.ValidateWithPath(path + "\u002f\u0053\u0069z\u0065"); _bbacg != nil {
			return _bbacg
		}
	}
	if _faca.SpPr != nil {
		if _gfgdb := _faca.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gfgdb != nil {
			return _gfgdb
		}
	}
	if _faca.ExtLst != nil {
		if _gedbg := _faca.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gedbg != nil {
			return _gedbg
		}
	}
	return nil
}

func (_abddf *CT_Layout) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bbec:
	for {
		_aebef, _bgfb := d.Token()
		if _bgfb != nil {
			return _bgfb
		}
		switch _aeef := _aebef.(type) {
		case _e.StartElement:
			switch _aeef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"}:
				_abddf.ManualLayout = NewCT_ManualLayout()
				if _abff := d.DecodeElement(_abddf.ManualLayout, &_aeef); _abff != nil {
					return _abff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_abddf.ExtLst = NewCT_ExtensionList()
				if _aeee := d.DecodeElement(_abddf.ExtLst, &_aeef); _aeee != nil {
					return _aeee
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0061\u0079o\u0075\u0074 \u0025\u0076", _aeef.Name)
				if _bfaf := d.Skip(); _bfaf != nil {
					return _bfaf
				}
			}
		case _e.EndElement:
			break _bbec
		case _e.CharData:
		}
	}
	return nil
}

func (_geege ST_ScatterStyle) ValidateWithPath(path string) error {
	switch _geege {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_geege))
	}
	return nil
}

func NewCT_PieSer() *CT_PieSer {
	_abgba := &CT_PieSer{}
	_abgba.Idx = NewCT_UnsignedInt()
	_abgba.Order = NewCT_UnsignedInt()
	return _abgba
}

type CT_CrossBetween struct{ ValAttr ST_CrossBetween }

func (_cadee ST_Shape) Validate() error { return _cadee.ValidateWithPath("") }

// Validate validates the CT_MultiLvlStrRef and its children
func (_gdfdb *CT_MultiLvlStrRef) Validate() error {
	return _gdfdb.ValidateWithPath("\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066")
}

func (_aeba *CT_ChartLines) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fdaf:
	for {
		_cdgd, _eaecf := d.Token()
		if _eaecf != nil {
			return _eaecf
		}
		switch _cbbf := _cdgd.(type) {
		case _e.StartElement:
			switch _cbbf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_aeba.SpPr = _bb.NewCT_ShapeProperties()
				if _gfed := d.DecodeElement(_aeba.SpPr, &_cbbf); _gfed != nil {
					return _gfed
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073 \u0025\u0076", _cbbf.Name)
				if _gafg := d.Skip(); _gafg != nil {
					return _gafg
				}
			}
		case _e.EndElement:
			break _fdaf
		case _e.CharData:
		}
	}
	return nil
}

func (_cgac *ST_Orientation) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cgac = 0
	case "\u006d\u0061\u0078\u004d\u0069\u006e":
		*_cgac = 1
	case "\u006d\u0069\u006e\u004d\u0061\u0078":
		*_cgac = 2
	}
	return nil
}

// ValidateWithPath validates the CT_TickLblPos and its children, prefixing error messages with path
func (_gceg *CT_TickLblPos) ValidateWithPath(path string) error {
	if _cbdd := _gceg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cbdd != nil {
		return _cbdd
	}
	return nil
}

// Validate validates the CT_PictureOptions and its children
func (_acdbdf *CT_PictureOptions) Validate() error {
	return _acdbdf.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073")
}

type CT_ExternalData struct {
	IdAttr     string
	AutoUpdate *CT_Boolean
}

// ST_HPercent is a union type
type ST_HPercent struct {
	ST_HPercentWithSymbol *string
	ST_HPercentUShort     *uint16
}

// ValidateWithPath validates the CT_DPt and its children, prefixing error messages with path
func (_dfee *CT_DPt) ValidateWithPath(path string) error {
	if _degf := _dfee.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _degf != nil {
		return _degf
	}
	if _dfee.InvertIfNegative != nil {
		if _edgd := _dfee.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _edgd != nil {
			return _edgd
		}
	}
	if _dfee.Marker != nil {
		if _deaa := _dfee.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _deaa != nil {
			return _deaa
		}
	}
	if _dfee.Bubble3D != nil {
		if _acgc := _dfee.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _acgc != nil {
			return _acgc
		}
	}
	if _dfee.Explosion != nil {
		if _eccb := _dfee.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _eccb != nil {
			return _eccb
		}
	}
	if _dfee.SpPr != nil {
		if _edggc := _dfee.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _edggc != nil {
			return _edggc
		}
	}
	if _dfee.PictureOptions != nil {
		if _ecgg := _dfee.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _ecgg != nil {
			return _ecgg
		}
	}
	if _dfee.ExtLst != nil {
		if _gecd := _dfee.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gecd != nil {
			return _gecd
		}
	}
	return nil
}

const ST_OverlapPercentPattern = "\u0028\u002d\u003f\u0030\u002a\u0028(\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d[\u0030\u002d\u0039\u005d\u0029\u007c\u00310\u0030\u0029\u0029\u0025"

func (_bgbac *ST_LblOffset) Validate() error { return _bgbac.ValidateWithPath("") }

// Validate validates the CT_SplitType and its children
func (_aefgg *CT_SplitType) Validate() error {
	return _aefgg.ValidateWithPath("\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065")
}

// ValidateWithPath validates the CT_SplitType and its children, prefixing error messages with path
func (_baeb *CT_SplitType) ValidateWithPath(path string) error {
	if _dgdcc := _baeb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dgdcc != nil {
		return _dgdcc
	}
	return nil
}

func (_fdbcac ST_ErrDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fdbcac.String(), start)
}

// Validate validates the CT_TickLblPos and its children
func (_gafcb *CT_TickLblPos) Validate() error {
	return _gafcb.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073")
}

func (_efbb *CT_DLblsChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dabc:
	for {
		_gccf, _cfce := d.Token()
		if _cfce != nil {
			return _cfce
		}
		switch _ggdd := _gccf.(type) {
		case _e.StartElement:
			switch _ggdd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_efbb.Delete = NewCT_Boolean()
				if _fdca := d.DecodeElement(_efbb.Delete, &_ggdd); _fdca != nil {
					return _fdca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_efbb.NumFmt = NewCT_NumFmt()
				if _dbf := d.DecodeElement(_efbb.NumFmt, &_ggdd); _dbf != nil {
					return _dbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_efbb.SpPr = _bb.NewCT_ShapeProperties()
				if _dedd := d.DecodeElement(_efbb.SpPr, &_ggdd); _dedd != nil {
					return _dedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_efbb.TxPr = _bb.NewCT_TextBody()
				if _gcaaf := d.DecodeElement(_efbb.TxPr, &_ggdd); _gcaaf != nil {
					return _gcaaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_efbb.DLblPos = NewCT_DLblPos()
				if _gaeb := d.DecodeElement(_efbb.DLblPos, &_ggdd); _gaeb != nil {
					return _gaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_efbb.ShowLegendKey = NewCT_Boolean()
				if _dcde := d.DecodeElement(_efbb.ShowLegendKey, &_ggdd); _dcde != nil {
					return _dcde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_efbb.ShowVal = NewCT_Boolean()
				if _bbg := d.DecodeElement(_efbb.ShowVal, &_ggdd); _bbg != nil {
					return _bbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_efbb.ShowCatName = NewCT_Boolean()
				if _bbdgg := d.DecodeElement(_efbb.ShowCatName, &_ggdd); _bbdgg != nil {
					return _bbdgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_efbb.ShowSerName = NewCT_Boolean()
				if _bcbc := d.DecodeElement(_efbb.ShowSerName, &_ggdd); _bcbc != nil {
					return _bcbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_efbb.ShowPercent = NewCT_Boolean()
				if _afgb := d.DecodeElement(_efbb.ShowPercent, &_ggdd); _afgb != nil {
					return _afgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_efbb.ShowBubbleSize = NewCT_Boolean()
				if _beea := d.DecodeElement(_efbb.ShowBubbleSize, &_ggdd); _beea != nil {
					return _beea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_efbb.Separator = new(string)
				if _cgeg := d.DecodeElement(_efbb.Separator, &_ggdd); _cgeg != nil {
					return _cgeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_efbb.ShowLeaderLines = NewCT_Boolean()
				if _gbfc := d.DecodeElement(_efbb.ShowLeaderLines, &_ggdd); _gbfc != nil {
					return _gbfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_efbb.LeaderLines = NewCT_ChartLines()
				if _efbg := d.DecodeElement(_efbb.LeaderLines, &_ggdd); _efbg != nil {
					return _efbg
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _ggdd.Name)
				if _dcfb := d.Skip(); _dcfb != nil {
					return _dcfb
				}
			}
		case _e.EndElement:
			break _dabc
		case _e.CharData:
		}
	}
	return nil
}

type CT_PageMargins struct {
	LAttr      float64
	RAttr      float64
	TAttr      float64
	BAttr      float64
	HeaderAttr float64
	FooterAttr float64
}

func NewCT_PictureStackUnit() *CT_PictureStackUnit {
	_bdagc := &CT_PictureStackUnit{}
	_bdagc.ValAttr = 0 + 1
	return _bdagc
}

type CT_UpDownBars struct {
	GapWidth *CT_GapAmount
	UpBars   *CT_UpDownBar
	DownBars *CT_UpDownBar
	ExtLst   *CT_ExtensionList
}

// ValidateWithPath validates the CT_DispUnitsLbl and its children, prefixing error messages with path
func (_edbg *CT_DispUnitsLbl) ValidateWithPath(path string) error {
	if _edbg.Layout != nil {
		if _gea := _edbg.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _gea != nil {
			return _gea
		}
	}
	if _edbg.Tx != nil {
		if _bcfbe := _edbg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bcfbe != nil {
			return _bcfbe
		}
	}
	if _edbg.SpPr != nil {
		if _bfdd := _edbg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _bfdd != nil {
			return _bfdd
		}
	}
	if _edbg.TxPr != nil {
		if _aggd := _edbg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _aggd != nil {
			return _aggd
		}
	}
	return nil
}

func (_dcga *CT_MultiLvlStrRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_aebb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_g.AddPreserveSpaceAttr(&_aebb, _dcga.F)
	e.EncodeElement(_dcga.F, _aebb)
	if _dcga.MultiLvlStrCache != nil {
		_gbdd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006du\u006c\u0074\u0069\u004c\u0076l\u0053\u0074r\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_dcga.MultiLvlStrCache, _gbdd)
	}
	if _dcga.ExtLst != nil {
		_fbacb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dcga.ExtLst, _fbacb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_ChartLines struct{ SpPr *_bb.CT_ShapeProperties }

func (_aeag *CT_Surface3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_feae:
	for {
		_gaef, _eggbf := d.Token()
		if _eggbf != nil {
			return _eggbf
		}
		switch _bgabg := _gaef.(type) {
		case _e.StartElement:
			switch _bgabg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_aeag.Wireframe = NewCT_Boolean()
				if _bcdef := d.DecodeElement(_aeag.Wireframe, &_bgabg); _bcdef != nil {
					return _bcdef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fegfb := NewCT_SurfaceSer()
				if _bfdef := d.DecodeElement(_fegfb, &_bgabg); _bfdef != nil {
					return _bfdef
				}
				_aeag.Ser = append(_aeag.Ser, _fegfb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_aeag.BandFmts = NewCT_BandFmts()
				if _cccfc := d.DecodeElement(_aeag.BandFmts, &_bgabg); _cccfc != nil {
					return _cccfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fabeg := NewCT_UnsignedInt()
				if _gfadg := d.DecodeElement(_fabeg, &_bgabg); _gfadg != nil {
					return _gfadg
				}
				_aeag.AxId = append(_aeag.AxId, _fabeg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aeag.ExtLst = NewCT_ExtensionList()
				if _bcfda := d.DecodeElement(_aeag.ExtLst, &_bgabg); _bcfda != nil {
					return _bcfda
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _bgabg.Name)
				if _cadga := d.Skip(); _cadga != nil {
					return _cadga
				}
			}
		case _e.EndElement:
			break _feae
		case _e.CharData:
		}
	}
	return nil
}

func (_fbfe *CT_PieSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_adbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fbfe.Idx, _adbd)
	_fbda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_fbfe.Order, _fbda)
	if _fbfe.Tx != nil {
		_eagedb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_fbfe.Tx, _eagedb)
	}
	if _fbfe.SpPr != nil {
		_acgbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fbfe.SpPr, _acgbc)
	}
	if _fbfe.Explosion != nil {
		_dgdcg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_fbfe.Explosion, _dgdcg)
	}
	if _fbfe.DPt != nil {
		_baae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _gcac := range _fbfe.DPt {
			e.EncodeElement(_gcac, _baae)
		}
	}
	if _fbfe.DLbls != nil {
		_gdce := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fbfe.DLbls, _gdce)
	}
	if _fbfe.Cat != nil {
		_fgbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_fbfe.Cat, _fgbg)
	}
	if _fbfe.Val != nil {
		_eagee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_fbfe.Val, _eagee)
	}
	if _fbfe.ExtLst != nil {
		_gaaef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbfe.ExtLst, _gaaef)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Layout struct {
	ManualLayout *CT_ManualLayout
	ExtLst       *CT_ExtensionList
}

// ValidateWithPath validates the CT_NumVal and its children, prefixing error messages with path
func (_cgab *CT_NumVal) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_PivotFmt and its children, prefixing error messages with path
func (_febf *CT_PivotFmt) ValidateWithPath(path string) error {
	if _debfa := _febf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _debfa != nil {
		return _debfa
	}
	if _febf.SpPr != nil {
		if _afcad := _febf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afcad != nil {
			return _afcad
		}
	}
	if _febf.TxPr != nil {
		if _gfac := _febf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gfac != nil {
			return _gfac
		}
	}
	if _febf.Marker != nil {
		if _dage := _febf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _dage != nil {
			return _dage
		}
	}
	if _febf.DLbl != nil {
		if _fabbf := _febf.DLbl.ValidateWithPath(path + "\u002f\u0044\u004cb\u006c"); _fabbf != nil {
			return _fabbf
		}
	}
	if _febf.ExtLst != nil {
		if _gffa := _febf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gffa != nil {
			return _gffa
		}
	}
	return nil
}

func (_bcaeb *CT_NumFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _efef := range start.Attr {
		if _efef.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_cefa, _ggef := _efef.Value, error(nil)
			if _ggef != nil {
				return _ggef
			}
			_bcaeb.FormatCodeAttr = _cefa
			continue
		}
		if _efef.Name.Local == "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064" {
			_ddga, _aecc := _bg.ParseBool(_efef.Value)
			if _aecc != nil {
				return _aecc
			}
			_bcaeb.SourceLinkedAttr = &_ddga
			continue
		}
	}
	for {
		_eddaa, _aceab := d.Token()
		if _aceab != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u004e\u0075\u006dF\u006d\u0074\u003a\u0020\u0025\u0073", _aceab)
		}
		if _fadaf, _egac := _eddaa.(_e.EndElement); _egac && _fadaf.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_DLblPos struct{ ValAttr ST_DLblPos }

type CT_Extension struct {
	UriAttr *string
	Any     _g.Any
}

// Validate validates the CT_HeaderFooter and its children
func (_egff *CT_HeaderFooter) Validate() error {
	return _egff.ValidateWithPath("\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072")
}

func (_fcbg *CT_BarGrouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dffg := range start.Attr {
		if _dffg.Name.Local == "\u0076\u0061\u006c" {
			_fcbg.ValAttr.UnmarshalXMLAttr(_dffg)
			continue
		}
	}
	for {
		_ffcb, _ffaf := d.Token()
		if _ffaf != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0061\u0072\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067:\u0020\u0025\u0073", _ffaf)
		}
		if _dad, _cebb := _ffcb.(_e.EndElement); _cebb && _dad.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_LegendEntryChoice() *CT_LegendEntryChoice {
	_fgfge := &CT_LegendEntryChoice{}
	return _fgfge
}

func (_gced *CT_LblAlgn) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gced.ValAttr = ST_LblAlgn(1)
	for _, _deddd := range start.Attr {
		if _deddd.Name.Local == "\u0076\u0061\u006c" {
			_gced.ValAttr.UnmarshalXMLAttr(_deddd)
			continue
		}
	}
	for {
		_fbaa, _cega := d.Token()
		if _cega != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e\u003a\u0020%\u0073", _cega)
		}
		if _dece, _aceef := _fbaa.(_e.EndElement); _aceef && _dece.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bfbga *CT_SurfaceSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ccaff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bfbga.Idx, _ccaff)
	_fabc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bfbga.Order, _fabc)
	if _bfbga.Tx != nil {
		_eccdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bfbga.Tx, _eccdb)
	}
	if _bfbga.SpPr != nil {
		_cgeeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bfbga.SpPr, _cgeeg)
	}
	if _bfbga.Cat != nil {
		_afgdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_bfbga.Cat, _afgdc)
	}
	if _bfbga.Val != nil {
		_eecff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bfbga.Val, _eecff)
	}
	if _bfbga.ExtLst != nil {
		_afacg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfbga.ExtLst, _afacg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_Style() *CT_Style { _fgfga := &CT_Style{}; _fgfga.ValAttr = 1; return _fgfga }

func (_dee *CT_AxPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_fef, _dcd := _dee.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _dcd != nil {
		return _dcd
	}
	start.Attr = append(start.Attr, _fef)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_acgf *CT_LegendEntry) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bgcca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_acgf.Idx, _bgcca)
	if _acgf.Choice != nil {
		_acgf.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _acgf.ExtLst != nil {
		_fgeeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_acgf.ExtLst, _fgeeb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bgef *CT_Chart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bgef.PlotArea = NewCT_PlotArea()
_feea:
	for {
		_bbcb, _agf := d.Token()
		if _agf != nil {
			return _agf
		}
		switch _debc := _bbcb.(type) {
		case _e.StartElement:
			switch _debc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_bgef.Title = NewCT_Title()
				if _bdge := d.DecodeElement(_bgef.Title, &_debc); _bdge != nil {
					return _bdge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075t\u006f\u0054\u0069t\u006c\u0065\u0044\u0065\u006c\u0065\u0074\u0065\u0064"}:
				_bgef.AutoTitleDeleted = NewCT_Boolean()
				if _adcb := d.DecodeElement(_bgef.AutoTitleDeleted, &_debc); _adcb != nil {
					return _adcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070i\u0076\u006f\u0074\u0046\u006d\u0074s"}:
				_bgef.PivotFmts = NewCT_PivotFmts()
				if _bddc := d.DecodeElement(_bgef.PivotFmts, &_debc); _bddc != nil {
					return _bddc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0069\u0065\u0077\u0033\u0044"}:
				_bgef.View3D = NewCT_View3D()
				if _gcaa := d.DecodeElement(_bgef.View3D, &_debc); _gcaa != nil {
					return _gcaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006c\u006fo\u0072"}:
				_bgef.Floor = NewCT_Surface()
				if _ccg := d.DecodeElement(_bgef.Floor, &_debc); _ccg != nil {
					return _ccg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}:
				_bgef.SideWall = NewCT_Surface()
				if _dede := d.DecodeElement(_bgef.SideWall, &_debc); _dede != nil {
					return _dede
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}:
				_bgef.BackWall = NewCT_Surface()
				if _edb := d.DecodeElement(_bgef.BackWall, &_debc); _edb != nil {
					return _edb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}:
				if _gcfd := d.DecodeElement(_bgef.PlotArea, &_debc); _gcfd != nil {
					return _gcfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0065\u0067\u0065\u006e\u0064"}:
				_bgef.Legend = NewCT_Legend()
				if _gee := d.DecodeElement(_bgef.Legend, &_debc); _gee != nil {
					return _gee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}:
				_bgef.PlotVisOnly = NewCT_Boolean()
				if _fdaa := d.DecodeElement(_bgef.PlotVisOnly, &_debc); _fdaa != nil {
					return _fdaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"}:
				_bgef.DispBlanksAs = NewCT_DispBlanksAs()
				if _gfea := d.DecodeElement(_bgef.DispBlanksAs, &_debc); _gfea != nil {
					return _gfea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068o\u0077\u0044\u004cb\u006c\u0073\u004f\u0076\u0065\u0072\u004d\u0061\u0078"}:
				_bgef.ShowDLblsOverMax = NewCT_Boolean()
				if _acaf := d.DecodeElement(_bgef.ShowDLblsOverMax, &_debc); _acaf != nil {
					return _acaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bgef.ExtLst = NewCT_ExtensionList()
				if _gaae := d.DecodeElement(_bgef.ExtLst, &_debc); _gaae != nil {
					return _gaae
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _debc.Name)
				if _agad := d.Skip(); _agad != nil {
					return _agad
				}
			}
		case _e.EndElement:
			break _feea
		case _e.CharData:
		}
	}
	return nil
}

func (_feda *CT_ErrBarType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dgff := range start.Attr {
		if _dgff.Name.Local == "\u0076\u0061\u006c" {
			_feda.ValAttr.UnmarshalXMLAttr(_dgff)
			continue
		}
	}
	for {
		_bedae, _eecb := d.Token()
		if _eecb != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072B\u0061r\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _eecb)
		}
		if _dbfe, _ddec := _bedae.(_e.EndElement); _ddec && _dbfe.Name == start.Name {
			break
		}
	}
	return nil
}

func (_fbec *CT_Chart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fbec.Title != nil {
		_gffg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_fbec.Title, _gffg)
	}
	if _fbec.AutoTitleDeleted != nil {
		_fcdc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061u\u0074\u006f\u0054\u0069\u0074l\u0065\u0044e\u006c\u0065\u0074\u0065\u0064"}}
		e.EncodeElement(_fbec.AutoTitleDeleted, _fcdc)
	}
	if _fbec.PivotFmts != nil {
		_gdfe := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_fbec.PivotFmts, _gdfe)
	}
	if _fbec.View3D != nil {
		_ade := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076\u0069\u0065\u0077\u0033\u0044"}}
		e.EncodeElement(_fbec.View3D, _ade)
	}
	if _fbec.Floor != nil {
		_cbga := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006c\u006f\u006f\u0072"}}
		e.EncodeElement(_fbec.Floor, _cbga)
	}
	if _fbec.SideWall != nil {
		_fdeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0069\u0064\u0065\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_fbec.SideWall, _fdeg)
	}
	if _fbec.BackWall != nil {
		_aecga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0057\u0061\u006c\u006c"}}
		e.EncodeElement(_fbec.BackWall, _aecga)
	}
	_ddbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0041\u0072\u0065\u0061"}}
	e.EncodeElement(_fbec.PlotArea, _ddbc)
	if _fbec.Legend != nil {
		_dggc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064"}}
		e.EncodeElement(_fbec.Legend, _dggc)
	}
	if _fbec.PlotVisOnly != nil {
		_cede := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u006f\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"}}
		e.EncodeElement(_fbec.PlotVisOnly, _cede)
	}
	if _fbec.DispBlanksAs != nil {
		_fdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0042\u006c\u0061n\u006b\u0073\u0041\u0073"}}
		e.EncodeElement(_fbec.DispBlanksAs, _fdf)
	}
	if _fbec.ShowDLblsOverMax != nil {
		_fcgf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u0044\u004c\u0062l\u0073\u004fv\u0065\u0072\u004d\u0061\u0078"}}
		e.EncodeElement(_fbec.ShowDLblsOverMax, _fcgf)
	}
	if _fbec.ExtLst != nil {
		_defb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbec.ExtLst, _defb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PlotAreaChoice1 struct {
	ValAx  []*CT_ValAx
	CatAx  []*CT_CatAx
	DateAx []*CT_DateAx
	SerAx  []*CT_SerAx
}

func (_cbeg *CT_LegendPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cbdcb := range start.Attr {
		if _cbdcb.Name.Local == "\u0076\u0061\u006c" {
			_cbeg.ValAttr.UnmarshalXMLAttr(_cbdcb)
			continue
		}
	}
	for {
		_egab, _fcbf := d.Token()
		if _fcbf != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0065g\u0065\u006e\u0064\u0050\u006f\u0073\u003a\u0020\u0025\u0073", _fcbf)
		}
		if _fbcc, _bebcg := _egab.(_e.EndElement); _bebcg && _fbcc.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cdecd *CT_Scaling) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_afgdd:
	for {
		_aefg, _aeeg := d.Token()
		if _aeeg != nil {
			return _aeeg
		}
		switch _cdfga := _aefg.(type) {
		case _e.StartElement:
			switch _cdfga.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006co\u0067\u0042\u0061\u0073\u0065"}:
				_cdecd.LogBase = NewCT_LogBase()
				if _gfdf := d.DecodeElement(_cdecd.LogBase, &_cdfga); _gfdf != nil {
					return _gfdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}:
				_cdecd.Orientation = NewCT_Orientation()
				if _ddcdd := d.DecodeElement(_cdecd.Orientation, &_cdfga); _ddcdd != nil {
					return _ddcdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0078"}:
				_cdecd.Max = NewCT_Double()
				if _abgeb := d.DecodeElement(_cdecd.Max, &_cdfga); _abgeb != nil {
					return _abgeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e"}:
				_cdecd.Min = NewCT_Double()
				if _eaaa := d.DecodeElement(_cdecd.Min, &_cdfga); _eaaa != nil {
					return _eaaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdecd.ExtLst = NewCT_ExtensionList()
				if _gbedg := d.DecodeElement(_cdecd.ExtLst, &_cdfga); _gbedg != nil {
					return _gbedg
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0063\u0061\u006c\u0069\u006e\u0067\u0020\u0025\u0076", _cdfga.Name)
				if _eafeb := d.Skip(); _eafeb != nil {
					return _eafeb
				}
			}
		case _e.EndElement:
			break _afgdd
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_RadarStyle() *CT_RadarStyle { _gdba := &CT_RadarStyle{}; return _gdba }

// ValidateWithPath validates the CT_LegendEntryChoice and its children, prefixing error messages with path
func (_gaea *CT_LegendEntryChoice) ValidateWithPath(path string) error {
	if _gaea.Delete != nil {
		if _gddce := _gaea.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _gddce != nil {
			return _gddce
		}
	}
	if _gaea.TxPr != nil {
		if _ecfg := _gaea.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ecfg != nil {
			return _ecfg
		}
	}
	return nil
}

type CT_Protection struct {
	ChartObject   *CT_Boolean
	Data          *CT_Boolean
	Formatting    *CT_Boolean
	Selection     *CT_Boolean
	UserInterface *CT_Boolean
}

func (_fgaabe *ST_CrossBetween) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fgaabe = 0
	case "\u0062e\u0074\u0077\u0065\u0065\u006e":
		*_fgaabe = 1
	case "\u006d\u0069\u0064\u0043\u0061\u0074":
		*_fgaabe = 2
	}
	return nil
}

func NewCT_Grouping() *CT_Grouping { _eebda := &CT_Grouping{}; return _eebda }

func (_ecace *CT_SurfaceSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ecace.Idx = NewCT_UnsignedInt()
	_ecace.Order = NewCT_UnsignedInt()
_cbbad:
	for {
		_bdaa, _gbdb := d.Token()
		if _gbdb != nil {
			return _gbdb
		}
		switch _fggbg := _bdaa.(type) {
		case _e.StartElement:
			switch _fggbg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _cafef := d.DecodeElement(_ecace.Idx, &_fggbg); _cafef != nil {
					return _cafef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _fceef := d.DecodeElement(_ecace.Order, &_fggbg); _fceef != nil {
					return _fceef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ecace.Tx = NewCT_SerTx()
				if _dddgg := d.DecodeElement(_ecace.Tx, &_fggbg); _dddgg != nil {
					return _dddgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ecace.SpPr = _bb.NewCT_ShapeProperties()
				if _cafgf := d.DecodeElement(_ecace.SpPr, &_fggbg); _cafgf != nil {
					return _cafgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ecace.Cat = NewCT_AxDataSource()
				if _ebfbg := d.DecodeElement(_ecace.Cat, &_fggbg); _ebfbg != nil {
					return _ebfbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ecace.Val = NewCT_NumDataSource()
				if _daad := d.DecodeElement(_ecace.Val, &_fggbg); _daad != nil {
					return _daad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ecace.ExtLst = NewCT_ExtensionList()
				if _eadga := d.DecodeElement(_ecace.ExtLst, &_fggbg); _eadga != nil {
					return _eadga
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053u\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072 \u0025\u0076", _fggbg.Name)
				if _cegg := d.Skip(); _cegg != nil {
					return _cegg
				}
			}
		case _e.EndElement:
			break _cbbad
		case _e.CharData:
		}
	}
	return nil
}

type CT_StockChart struct {
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// ValidateWithPath validates the CT_NumFmt and its children, prefixing error messages with path
func (_edbf *CT_NumFmt) ValidateWithPath(path string) error { return nil }

func NewCT_BubbleSer() *CT_BubbleSer {
	_agcb := &CT_BubbleSer{}
	_agcb.Idx = NewCT_UnsignedInt()
	_agcb.Order = NewCT_UnsignedInt()
	return _agcb
}

func (_cgag ST_BuiltInUnit) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cagae := _e.Attr{}
	_cagae.Name = name
	switch _cgag {
	case ST_BuiltInUnitUnset:
		_cagae.Value = ""
	case ST_BuiltInUnitHundreds:
		_cagae.Value = "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case ST_BuiltInUnitThousands:
		_cagae.Value = "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case ST_BuiltInUnitTenThousands:
		_cagae.Value = "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitHundredThousands:
		_cagae.Value = "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case ST_BuiltInUnitMillions:
		_cagae.Value = "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTenMillions:
		_cagae.Value = "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitHundredMillions:
		_cagae.Value = "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitBillions:
		_cagae.Value = "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case ST_BuiltInUnitTrillions:
		_cagae.Value = "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return _cagae, nil
}

func (_abgbc *CT_HPercent) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gacgb := range start.Attr {
		if _gacgb.Name.Local == "\u0076\u0061\u006c" {
			_ccdg, _bfddd := ParseUnionST_HPercent(_gacgb.Value)
			if _bfddd != nil {
				return _bfddd
			}
			_abgbc.ValAttr = &_ccdg
			continue
		}
	}
	for {
		_gfad, _dabe := d.Token()
		if _dabe != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0073", _dabe)
		}
		if _ggbf, _ebgbb := _gfad.(_e.EndElement); _ebgbb && _ggbf.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_UpDownBar() *CT_UpDownBar { _aabaa := &CT_UpDownBar{}; return _aabaa }

// ValidateWithPath validates the CT_MarkerStyle and its children, prefixing error messages with path
func (_bbbfff *CT_MarkerStyle) ValidateWithPath(path string) error {
	if _bbbfff.ValAttr == ST_MarkerStyleUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _abeb := _bbbfff.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _abeb != nil {
		return _abeb
	}
	return nil
}

func (_gdgfg ST_DispBlanksAs) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gdgfg.String(), start)
}

func (_bacbg *CT_ErrValType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bdeea := range start.Attr {
		if _bdeea.Name.Local == "\u0076\u0061\u006c" {
			_bacbg.ValAttr.UnmarshalXMLAttr(_bdeea)
			continue
		}
	}
	for {
		_cgad, _ddefc := d.Token()
		if _ddefc != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0045r\u0072V\u0061l\u0054\u0079\u0070\u0065\u003a\u0020\u0025s", _ddefc)
		}
		if _afdd, _fgbb := _cgad.(_e.EndElement); _fgbb && _afdd.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_TrendlineType and its children
func (_ebdgb *CT_TrendlineType) Validate() error {
	return _ebdgb.ValidateWithPath("\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065")
}

type CT_OfPieType struct{ ValAttr ST_OfPieType }

func (_bgfdg ST_ErrDir) String() string {
	switch _bgfdg {
	case 0:
		return ""
	case 1:
		return "\u0078"
	case 2:
		return "\u0079"
	}
	return ""
}

func (_aafba *CT_SurfaceChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ffcfd:
	for {
		_fdea, _dcdge := d.Token()
		if _dcdge != nil {
			return _dcdge
		}
		switch _agaef := _fdea.(type) {
		case _e.StartElement:
			switch _agaef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_aafba.Wireframe = NewCT_Boolean()
				if _bbag := d.DecodeElement(_aafba.Wireframe, &_agaef); _bbag != nil {
					return _bbag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gecgb := NewCT_SurfaceSer()
				if _cdccb := d.DecodeElement(_gecgb, &_agaef); _cdccb != nil {
					return _cdccb
				}
				_aafba.Ser = append(_aafba.Ser, _gecgb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_aafba.BandFmts = NewCT_BandFmts()
				if _gfcc := d.DecodeElement(_aafba.BandFmts, &_agaef); _gfcc != nil {
					return _gfcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_eagede := NewCT_UnsignedInt()
				if _abdg := d.DecodeElement(_eagede, &_agaef); _abdg != nil {
					return _abdg
				}
				_aafba.AxId = append(_aafba.AxId, _eagede)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_aafba.ExtLst = NewCT_ExtensionList()
				if _afdac := d.DecodeElement(_aafba.ExtLst, &_agaef); _afdac != nil {
					return _afdac
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _agaef.Name)
				if _aggb := d.Skip(); _aggb != nil {
					return _aggb
				}
			}
		case _e.EndElement:
			break _ffcfd
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_Tx() *CT_Tx { _efceca := &CT_Tx{}; _efceca.Choice = NewCT_TxChoice(); return _efceca }

func (_dgaa *ST_Shape) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cegge, _cdabe := d.Token()
	if _cdabe != nil {
		return _cdabe
	}
	if _cbabb, _gdcdca := _cegge.(_e.EndElement); _gdcdca && _cbabb.Name == start.Name {
		*_dgaa = 1
		return nil
	}
	if _ggfde, _aagag := _cegge.(_e.CharData); !_aagag {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cegge)
	} else {
		switch string(_ggfde) {
		case "":
			*_dgaa = 0
		case "\u0063\u006f\u006e\u0065":
			*_dgaa = 1
		case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
			*_dgaa = 2
		case "\u0062\u006f\u0078":
			*_dgaa = 3
		case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
			*_dgaa = 4
		case "\u0070y\u0072\u0061\u006d\u0069\u0064":
			*_dgaa = 5
		case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
			*_dgaa = 6
		}
	}
	_cegge, _cdabe = d.Token()
	if _cdabe != nil {
		return _cdabe
	}
	if _cbeae, _gdegd := _cegge.(_e.EndElement); _gdegd && _cbeae.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cegge)
}

func (_geca *CT_NumDataSourceChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _geca.NumRef != nil {
		_edgde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_geca.NumRef, _edgde)
	}
	if _geca.NumLit != nil {
		_dfea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_geca.NumLit, _dfea)
	}
	return nil
}

func NewCT_PictureFormat() *CT_PictureFormat {
	_abde := &CT_PictureFormat{}
	_abde.ValAttr = ST_PictureFormat(1)
	return _abde
}

type CT_Thickness struct{ ValAttr ST_Thickness }

// ValidateWithPath validates the CT_ExtensionList and its children, prefixing error messages with path
func (_fgfaa *CT_ExtensionList) ValidateWithPath(path string) error {
	for _cggea, _egfa := range _fgfaa.Ext {
		if _fabb := _egfa.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u005b\u0025\u0064\u005d", path, _cggea)); _fabb != nil {
			return _fabb
		}
	}
	return nil
}

type CT_DoughnutChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	HoleSize      *CT_HoleSize
	ExtLst        *CT_ExtensionList
}

func (_gdded *CT_MultiLvlStrRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bfeda:
	for {
		_ffeef, _cdfa := d.Token()
		if _cdfa != nil {
			return _cdfa
		}
		switch _bacea := _ffeef.(type) {
		case _e.StartElement:
			switch _bacea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _gfgf := d.DecodeElement(&_gdded.F, &_bacea); _gfgf != nil {
					return _gfgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075l\u0074\u0069\u004cv\u006c\u0053\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_gdded.MultiLvlStrCache = NewCT_MultiLvlStrData()
				if _gaee := d.DecodeElement(_gdded.MultiLvlStrCache, &_bacea); _gaee != nil {
					return _gaee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gdded.ExtLst = NewCT_ExtensionList()
				if _dfae := d.DecodeElement(_gdded.ExtLst, &_bacea); _dfae != nil {
					return _dfae
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066\u0020\u0025\u0076", _bacea.Name)
				if _dddg := d.Skip(); _dddg != nil {
					return _dddg
				}
			}
		case _e.EndElement:
			break _bfeda
		case _e.CharData:
		}
	}
	return nil
}

func (_ebgec ST_Grouping) String() string {
	switch _ebgec {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 3:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

// ValidateWithPath validates the CT_View3D and its children, prefixing error messages with path
func (_dfac *CT_View3D) ValidateWithPath(path string) error {
	if _dfac.RotX != nil {
		if _ebaeg := _dfac.RotX.ValidateWithPath(path + "\u002f\u0052\u006ft\u0058"); _ebaeg != nil {
			return _ebaeg
		}
	}
	if _dfac.HPercent != nil {
		if _dgcdf := _dfac.HPercent.ValidateWithPath(path + "\u002fH\u0050\u0065\u0072\u0063\u0065\u006et"); _dgcdf != nil {
			return _dgcdf
		}
	}
	if _dfac.RotY != nil {
		if _bggdd := _dfac.RotY.ValidateWithPath(path + "\u002f\u0052\u006ft\u0059"); _bggdd != nil {
			return _bggdd
		}
	}
	if _dfac.DepthPercent != nil {
		if _fcedf := _dfac.DepthPercent.ValidateWithPath(path + "\u002f\u0044\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fcedf != nil {
			return _fcedf
		}
	}
	if _dfac.RAngAx != nil {
		if _efbde := _dfac.RAngAx.ValidateWithPath(path + "\u002fR\u0041\u006e\u0067\u0041\u0078"); _efbde != nil {
			return _efbde
		}
	}
	if _dfac.Perspective != nil {
		if _aaafad := _dfac.Perspective.ValidateWithPath(path + "\u002f\u0050\u0065r\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"); _aaafad != nil {
			return _aaafad
		}
	}
	if _dfac.ExtLst != nil {
		if _dgebe := _dfac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgebe != nil {
			return _dgebe
		}
	}
	return nil
}

func NewCT_Trendline() *CT_Trendline {
	_gbead := &CT_Trendline{}
	_gbead.TrendlineType = NewCT_TrendlineType()
	return _gbead
}

func (_accd *CT_LineChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_befce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_accd.Grouping, _befce)
	if _accd.VaryColors != nil {
		_ccaeeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_accd.VaryColors, _ccaeeb)
	}
	if _accd.Ser != nil {
		_cbdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _fcfb := range _accd.Ser {
			e.EncodeElement(_fcfb, _cbdf)
		}
	}
	if _accd.DLbls != nil {
		_afcc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_accd.DLbls, _afcc)
	}
	if _accd.DropLines != nil {
		_gcceb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_accd.DropLines, _gcceb)
	}
	if _accd.HiLowLines != nil {
		_cdcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_accd.HiLowLines, _cdcb)
	}
	if _accd.UpDownBars != nil {
		_acdbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_accd.UpDownBars, _acdbd)
	}
	if _accd.Marker != nil {
		_bbdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_accd.Marker, _bbdc)
	}
	if _accd.Smooth != nil {
		_cagf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_accd.Smooth, _cagf)
	}
	_cdda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dgcc := range _accd.AxId {
		e.EncodeElement(_dgcc, _cdda)
	}
	if _accd.ExtLst != nil {
		_facc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_accd.ExtLst, _facc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Perspective and its children
func (_dbga *CT_Perspective) Validate() error {
	return _dbga.ValidateWithPath("\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065")
}

func NewCT_ErrValType() *CT_ErrValType { _gage := &CT_ErrValType{}; return _gage }

// Validate validates the CT_Thickness and its children
func (_bcdg *CT_Thickness) Validate() error {
	return _bcdg.ValidateWithPath("\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073")
}

// Validate validates the CT_Protection and its children
func (_acfee *CT_Protection) Validate() error {
	return _acfee.ValidateWithPath("\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e")
}

func (_dfggf *CT_PivotFmts) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fagad:
	for {
		_caadf, _fggeg := d.Token()
		if _fggeg != nil {
			return _fggeg
		}
		switch _ggedd := _caadf.(type) {
		case _e.StartElement:
			switch _ggedd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0076\u006f\u0074\u0046\u006d\u0074"}:
				_dfabe := NewCT_PivotFmt()
				if _egce := d.DecodeElement(_dfabe, &_ggedd); _egce != nil {
					return _egce
				}
				_dfggf.PivotFmt = append(_dfggf.PivotFmt, _dfabe)
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_P\u0069\u0076o\u0074\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _ggedd.Name)
				if _ccbga := d.Skip(); _ccbga != nil {
					return _ccbga
				}
			}
		case _e.EndElement:
			break _fagad
		case _e.CharData:
		}
	}
	return nil
}

func (_cafa *CT_DLblChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cafa.Delete != nil {
		_caeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_cafa.Delete, _caeg)
	}
	if _cafa.Layout != nil {
		_cfeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_cafa.Layout, _cfeb)
	}
	if _cafa.Tx != nil {
		_adfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_cafa.Tx, _adfc)
	}
	if _cafa.NumFmt != nil {
		_eagc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_cafa.NumFmt, _eagc)
	}
	if _cafa.SpPr != nil {
		_adcf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cafa.SpPr, _adcf)
	}
	if _cafa.TxPr != nil {
		_bcaag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cafa.TxPr, _bcaag)
	}
	if _cafa.DLblPos != nil {
		_cggd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_cafa.DLblPos, _cggd)
	}
	if _cafa.ShowLegendKey != nil {
		_eabeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_cafa.ShowLegendKey, _eabeg)
	}
	if _cafa.ShowVal != nil {
		_agae := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_cafa.ShowVal, _agae)
	}
	if _cafa.ShowCatName != nil {
		_cfcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_cafa.ShowCatName, _cfcg)
	}
	if _cafa.ShowSerName != nil {
		_dgba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_cafa.ShowSerName, _dgba)
	}
	if _cafa.ShowPercent != nil {
		_dedeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cafa.ShowPercent, _dedeb)
	}
	if _cafa.ShowBubbleSize != nil {
		_acea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_cafa.ShowBubbleSize, _acea)
	}
	if _cafa.Separator != nil {
		_gcag := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_g.AddPreserveSpaceAttr(&_gcag, *_cafa.Separator)
		e.EncodeElement(_cafa.Separator, _gcag)
	}
	return nil
}

func (_aebec *ST_SecondPieSize) Validate() error { return _aebec.ValidateWithPath("") }

func (_bfca *CT_Grouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bfca.ValAttr != ST_GroupingUnset {
		_cceae, _bbcdf := _bfca.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _bbcdf != nil {
			return _bbcdf
		}
		start.Attr = append(start.Attr, _cceae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_ManualLayout() *CT_ManualLayout { _dbbd := &CT_ManualLayout{}; return _dbbd }

func (_cceaa ST_TickLblPos) String() string {
	switch _cceaa {
	case 0:
		return ""
	case 1:
		return "\u0068\u0069\u0067\u0068"
	case 2:
		return "\u006c\u006f\u0077"
	case 3:
		return "\u006e\u0065\u0078\u0074\u0054\u006f"
	case 4:
		return "\u006e\u006f\u006e\u0065"
	}
	return ""
}

// Validate validates the CT_PlotArea and its children
func (_fdeda *CT_PlotArea) Validate() error {
	return _fdeda.ValidateWithPath("C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061")
}

// Validate validates the CT_LegendEntryChoice and its children
func (_ffcbc *CT_LegendEntryChoice) Validate() error {
	return _ffcbc.ValidateWithPath("C\u0054_\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006et\u0072\u0079\u0043\u0068oi\u0063\u0065")
}

// Validate validates the CT_Line3DChart and its children
func (_beaec *CT_Line3DChart) Validate() error {
	return _beaec.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_CatAx and its children
func (_cdbb *CT_CatAx) Validate() error {
	return _cdbb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078")
}

func (_fada *CT_CustSplit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fada.SecondPiePt != nil {
		_bfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}}
		for _, _aedb := range _fada.SecondPiePt {
			e.EncodeElement(_aedb, _bfd)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PrintSettings and its children, prefixing error messages with path
func (_cfeba *CT_PrintSettings) ValidateWithPath(path string) error {
	if _cfeba.HeaderFooter != nil {
		if _baedf := _cfeba.HeaderFooter.ValidateWithPath(path + "\u002f\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072"); _baedf != nil {
			return _baedf
		}
	}
	if _cfeba.PageMargins != nil {
		if _becc := _cfeba.PageMargins.ValidateWithPath(path + "\u002f\u0050\u0061g\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"); _becc != nil {
			return _becc
		}
	}
	if _cfeba.PageSetup != nil {
		if _ffggg := _cfeba.PageSetup.ValidateWithPath(path + "\u002f\u0050\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"); _ffggg != nil {
			return _ffggg
		}
	}
	if _cfeba.LegacyDrawingHF != nil {
		if _ceag := _cfeba.LegacyDrawingHF.ValidateWithPath(path + "\u002f\u004ce\u0067\u0061\u0063y\u0044\u0072\u0061\u0077\u0069\u006e\u0067\u0048\u0046"); _ceag != nil {
			return _ceag
		}
	}
	return nil
}

// Validate validates the CT_Grouping and its children
func (_gcbb *CT_Grouping) Validate() error {
	return _gcbb.ValidateWithPath("C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067")
}

func (_aaacb ST_Crosses) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ggfa := _e.Attr{}
	_ggfa.Name = name
	switch _aaacb {
	case ST_CrossesUnset:
		_ggfa.Value = ""
	case ST_CrossesAutoZero:
		_ggfa.Value = "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case ST_CrossesMax:
		_ggfa.Value = "\u006d\u0061\u0078"
	case ST_CrossesMin:
		_ggfa.Value = "\u006d\u0069\u006e"
	}
	return _ggfa, nil
}

// ValidateWithPath validates the CT_ErrValType and its children, prefixing error messages with path
func (_ffeea *CT_ErrValType) ValidateWithPath(path string) error {
	if _cegb := _ffeea.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cegb != nil {
		return _cegb
	}
	return nil
}

func (_gcbec *ST_SplitType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_egbcf, _bgeee := d.Token()
	if _bgeee != nil {
		return _bgeee
	}
	if _afgg, _bcddd := _egbcf.(_e.EndElement); _bcddd && _afgg.Name == start.Name {
		*_gcbec = 1
		return nil
	}
	if _gaeaee, _egadfe := _egbcf.(_e.CharData); !_egadfe {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _egbcf)
	} else {
		switch string(_gaeaee) {
		case "":
			*_gcbec = 0
		case "\u0061\u0075\u0074\u006f":
			*_gcbec = 1
		case "\u0063\u0075\u0073\u0074":
			*_gcbec = 2
		case "\u0070e\u0072\u0063\u0065\u006e\u0074":
			*_gcbec = 3
		case "\u0070\u006f\u0073":
			*_gcbec = 4
		case "\u0076\u0061\u006c":
			*_gcbec = 5
		}
	}
	_egbcf, _bgeee = d.Token()
	if _bgeee != nil {
		return _bgeee
	}
	if _ggdfg, _cgabc := _egbcf.(_e.EndElement); _cgabc && _ggdfg.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _egbcf)
}

func (_aggf *CT_ChartLines) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aggf.SpPr != nil {
		_ddbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aggf.SpPr, _ddbg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gecdb *CT_LblOffset) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gecdb.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_gecdb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_StrVal struct {
	IdxAttr uint32
	V       string
}

type CT_StrData struct {
	PtCount *CT_UnsignedInt
	Pt      []*CT_StrVal
	ExtLst  *CT_ExtensionList
}

func (_egb *CT_BarChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_egb.BarDir = NewCT_BarDir()
_bcca:
	for {
		_aca, _bac := d.Token()
		if _bac != nil {
			return _bac
		}
		switch _cfg := _aca.(type) {
		case _e.StartElement:
			switch _cfg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _aad := d.DecodeElement(_egb.BarDir, &_cfg); _aad != nil {
					return _aad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_egb.Grouping = NewCT_BarGrouping()
				if _egd := d.DecodeElement(_egb.Grouping, &_cfg); _egd != nil {
					return _egd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_egb.VaryColors = NewCT_Boolean()
				if _fbfg := d.DecodeElement(_egb.VaryColors, &_cfg); _fbfg != nil {
					return _fbfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dbd := NewCT_BarSer()
				if _degb := d.DecodeElement(_dbd, &_cfg); _degb != nil {
					return _degb
				}
				_egb.Ser = append(_egb.Ser, _dbd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_egb.DLbls = NewCT_DLbls()
				if _abe := d.DecodeElement(_egb.DLbls, &_cfg); _abe != nil {
					return _abe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_egb.GapWidth = NewCT_GapAmount()
				if _dfc := d.DecodeElement(_egb.GapWidth, &_cfg); _dfc != nil {
					return _dfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0070"}:
				_egb.Overlap = NewCT_Overlap()
				if _age := d.DecodeElement(_egb.Overlap, &_cfg); _age != nil {
					return _age
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_ecd := NewCT_ChartLines()
				if _cea := d.DecodeElement(_ecd, &_cfg); _cea != nil {
					return _cea
				}
				_egb.SerLines = append(_egb.SerLines, _ecd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_dcdb := NewCT_UnsignedInt()
				if _fgde := d.DecodeElement(_dcdb, &_cfg); _fgde != nil {
					return _fgde
				}
				_egb.AxId = append(_egb.AxId, _dcdb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_egb.ExtLst = NewCT_ExtensionList()
				if _ddd := d.DecodeElement(_egb.ExtLst, &_cfg); _ddd != nil {
					return _ddd
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _cfg.Name)
				if _fgf := d.Skip(); _fgf != nil {
					return _fgf
				}
			}
		case _e.EndElement:
			break _bcca
		case _e.CharData:
		}
	}
	return nil
}

const ST_LblOffsetPercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u007c\u0028[1\u002d\u0039\u005d\u005b\u0030\u002d9\u005d\u0029\u007c\u0028\u005b\u0031\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b0\u002d\u0039\u005d\u0029\u007c\u0031\u0030\u00300\u0029\u0025"

// Validate validates the CT_Layout and its children
func (_gffc *CT_Layout) Validate() error {
	return _gffc.ValidateWithPath("\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t")
}

type CT_DispUnits struct {
	Choice       *CT_DispUnitsChoice
	DispUnitsLbl *CT_DispUnitsLbl
	ExtLst       *CT_ExtensionList
}

// Validate validates the CT_DLblPos and its children
func (_gefg *CT_DLblPos) Validate() error {
	return _gefg.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073")
}

// ValidateWithPath validates the CT_AxisUnit and its children, prefixing error messages with path
func (_dbaf *CT_AxisUnit) ValidateWithPath(path string) error {
	if _dbaf.ValAttr <= 0 {
		return _a.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _dbaf.ValAttr)
	}
	return nil
}

// Validate validates the CT_RadarChart and its children
func (_gbdfd *CT_RadarChart) Validate() error {
	return _gbdfd.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}

func NewCT_Boolean() *CT_Boolean { _eage := &CT_Boolean{}; return _eage }

type CT_RotY struct{ ValAttr *uint16 }

func (_bgdg *CT_MarkerStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_aabad, _fcbd := _bgdg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _fcbd != nil {
		return _fcbd
	}
	start.Attr = append(start.Attr, _aabad)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ggfeg *CT_Thickness) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cgced := range start.Attr {
		if _cgced.Name.Local == "\u0076\u0061\u006c" {
			_gfaa, _acbf := ParseUnionST_Thickness(_cgced.Value)
			if _acbf != nil {
				return _acbf
			}
			_ggfeg.ValAttr = _gfaa
			continue
		}
	}
	for {
		_acfeeb, _gcecg := d.Token()
		if _gcecg != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0068i\u0063\u006b\u006e\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _gcecg)
		}
		if _gabbe, _eaeg := _acfeeb.(_e.EndElement); _eaeg && _gabbe.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ffbd ST_ErrBarType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_ffbd.String(), start)
}

func (_affc *CT_PlotAreaChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _affc.AreaChart != nil {
		_dbbdf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0061\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.AreaChart, _dbbdf)
	}
	if _affc.Area3DChart != nil {
		_gedeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.Area3DChart, _gedeb)
	}
	if _affc.LineChart != nil {
		_deacb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.LineChart, _deacb)
	}
	if _affc.Line3DChart != nil {
		_ggeeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.Line3DChart, _ggeeg)
	}
	if _affc.StockChart != nil {
		_gaaeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.StockChart, _gaaeb)
	}
	if _affc.RadarChart != nil {
		_cccdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.RadarChart, _cccdc)
	}
	if _affc.ScatterChart != nil {
		_cbeeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.ScatterChart, _cbeeb)
	}
	if _affc.PieChart != nil {
		_dcdgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.PieChart, _dcdgb)
	}
	if _affc.Pie3DChart != nil {
		_bcfbca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.Pie3DChart, _bcfbca)
	}
	if _affc.DoughnutChart != nil {
		_bebf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064o\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.DoughnutChart, _bebf)
	}
	if _affc.BarChart != nil {
		_begg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.BarChart, _begg)
	}
	if _affc.Bar3DChart != nil {
		_facad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.Bar3DChart, _facad)
	}
	if _affc.OfPieChart != nil {
		_egcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.OfPieChart, _egcb)
	}
	if _affc.SurfaceChart != nil {
		_fccg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0075\u0072\u0066\u0061\u0063\u0065C\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.SurfaceChart, _fccg)
	}
	if _affc.Surface3DChart != nil {
		_dfaba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0075\u0072\u0066a\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.Surface3DChart, _dfaba)
	}
	if _affc.BubbleChart != nil {
		_fffg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}}
		e.EncodeElement(_affc.BubbleChart, _fffg)
	}
	return nil
}

func (_egbb *ST_ErrValType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_egbb = 0
	case "\u0063\u0075\u0073\u0074":
		*_egbb = 1
	case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
		*_egbb = 2
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
		*_egbb = 3
	case "\u0073\u0074\u0064\u0044\u0065\u0076":
		*_egbb = 4
	case "\u0073\u0074\u0064\u0045\u0072\u0072":
		*_egbb = 5
	}
	return nil
}

type CT_LblAlgn struct{ ValAttr ST_LblAlgn }

func ParseUnionST_GapAmount(s string) (ST_GapAmount, error) {
	if ST_GapAmountPercentPatternRe.MatchString(s) {
		return ST_GapAmount{ST_GapAmountPercent: &s}, nil
	}
	_dgfa, _cafeb := _bg.ParseUint(s, 10, 16)
	if _cafeb != nil {
		return ST_GapAmount{}, _cafeb
	}
	_cgabf := uint16(_dgfa)
	return ST_GapAmount{ST_GapAmountUShort: &_cgabf}, nil
}

func (_ebfc *CT_HeaderFooter) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ebfc.AlignWithMarginsAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_ebfc.AlignWithMarginsAttr))})
	}
	if _ebfc.DifferentOddEvenAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_ebfc.DifferentOddEvenAttr))})
	}
	if _ebfc.DifferentFirstAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_ebfc.DifferentFirstAttr))})
	}
	e.EncodeToken(start)
	if _ebfc.OddHeader != nil {
		_fcgg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0064\u0064\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_g.AddPreserveSpaceAttr(&_fcgg, *_ebfc.OddHeader)
		e.EncodeElement(_ebfc.OddHeader, _fcgg)
	}
	if _ebfc.OddFooter != nil {
		_fcace := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0064\u0064\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_g.AddPreserveSpaceAttr(&_fcace, *_ebfc.OddFooter)
		e.EncodeElement(_ebfc.OddFooter, _fcace)
	}
	if _ebfc.EvenHeader != nil {
		_degbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_g.AddPreserveSpaceAttr(&_degbd, *_ebfc.EvenHeader)
		e.EncodeElement(_ebfc.EvenHeader, _degbd)
	}
	if _ebfc.EvenFooter != nil {
		_geba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065v\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_g.AddPreserveSpaceAttr(&_geba, *_ebfc.EvenFooter)
		e.EncodeElement(_ebfc.EvenFooter, _geba)
	}
	if _ebfc.FirstHeader != nil {
		_cbce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}}
		_g.AddPreserveSpaceAttr(&_cbce, *_ebfc.FirstHeader)
		e.EncodeElement(_ebfc.FirstHeader, _cbce)
	}
	if _ebfc.FirstFooter != nil {
		_egee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}}
		_g.AddPreserveSpaceAttr(&_egee, *_ebfc.FirstFooter)
		e.EncodeElement(_ebfc.FirstFooter, _egee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_ManualLayout struct {
	LayoutTarget *CT_LayoutTarget
	XMode        *CT_LayoutMode
	YMode        *CT_LayoutMode
	WMode        *CT_LayoutMode
	HMode        *CT_LayoutMode
	X            *CT_Double
	Y            *CT_Double
	W            *CT_Double
	H            *CT_Double
	ExtLst       *CT_ExtensionList
}

// Validate validates the CT_HPercent and its children
func (_bfcf *CT_HPercent) Validate() error {
	return _bfcf.ValidateWithPath("C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}

func (_fgbbb *ST_BuiltInUnit) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fgbbb = 0
	case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
		*_fgbbb = 1
	case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
		*_fgbbb = 2
	case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_fgbbb = 3
	case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
		*_fgbbb = 4
	case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_fgbbb = 5
	case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_fgbbb = 6
	case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_fgbbb = 7
	case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
		*_fgbbb = 8
	case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
		*_fgbbb = 9
	}
	return nil
}

func (_bafcf ST_TickMark) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bafcf.String(), start)
}

// ValidateWithPath validates the CT_Legend and its children, prefixing error messages with path
func (_cgece *CT_Legend) ValidateWithPath(path string) error {
	if _cgece.LegendPos != nil {
		if _ggfee := _cgece.LegendPos.ValidateWithPath(path + "\u002f\u004c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"); _ggfee != nil {
			return _ggfee
		}
	}
	for _aggdc, _egggb := range _cgece.LegendEntry {
		if _fgggc := _egggb.ValidateWithPath(_a.Sprintf("\u0025s\u002fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u005b\u0025\u0064\u005d", path, _aggdc)); _fgggc != nil {
			return _fgggc
		}
	}
	if _cgece.Layout != nil {
		if _begb := _cgece.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _begb != nil {
			return _begb
		}
	}
	if _cgece.Overlay != nil {
		if _gedb := _cgece.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _gedb != nil {
			return _gedb
		}
	}
	if _cgece.SpPr != nil {
		if _edbd := _cgece.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _edbd != nil {
			return _edbd
		}
	}
	if _cgece.TxPr != nil {
		if _ebfd := _cgece.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ebfd != nil {
			return _ebfd
		}
	}
	if _cgece.ExtLst != nil {
		if _dedef := _cgece.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dedef != nil {
			return _dedef
		}
	}
	return nil
}

func NewCT_HoleSize() *CT_HoleSize { _cage := &CT_HoleSize{}; return _cage }

// ValidateWithPath validates the CT_MarkerSize and its children, prefixing error messages with path
func (_bcgea *CT_MarkerSize) ValidateWithPath(path string) error {
	if _bcgea.ValAttr != nil {
		if *_bcgea.ValAttr < 2 {
			return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bcgea.ValAttr)
		}
		if *_bcgea.ValAttr > 72 {
			return _a.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00372 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_bcgea.ValAttr)
		}
	}
	return nil
}

// ValidateWithPath validates the CT_BandFmts and its children, prefixing error messages with path
func (_gdg *CT_BandFmts) ValidateWithPath(path string) error {
	for _fac, _egf := range _gdg.BandFmt {
		if _fcd := _egf.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0042\u0061\u006e\u0064\u0046\u006dt\u005b\u0025\u0064\u005d", path, _fac)); _fcd != nil {
			return _fcd
		}
	}
	return nil
}

type CT_SecondPieSize struct{ ValAttr *ST_SecondPieSize }

// Validate validates the CT_Extension and its children
func (_ccgf *CT_Extension) Validate() error {
	return _ccgf.ValidateWithPath("\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e")
}

// Validate validates the CT_AxisUnit and its children
func (_gfd *CT_AxisUnit) Validate() error {
	return _gfd.ValidateWithPath("C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074")
}

type CT_BarSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_bb.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	PictureOptions   *CT_PictureOptions
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          *CT_ErrBars
	Cat              *CT_AxDataSource
	Val              *CT_NumDataSource
	Shape            *CT_Shape
	ExtLst           *CT_ExtensionList
}

func (_dadd *CT_PictureFormat) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_bdecf, _dedf := _dadd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _dedf != nil {
		return _dedf
	}
	start.Attr = append(start.Attr, _bdecf)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DTable and its children
func (_efgc *CT_DTable) Validate() error {
	return _efgc.ValidateWithPath("\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce")
}

func NewCT_OfPieType() *CT_OfPieType { _geab := &CT_OfPieType{}; return _geab }

func (_fcggc *CT_PlotArea) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ebcb:
	for {
		_caedb, _cgea := d.Token()
		if _cgea != nil {
			return _cgea
		}
		switch _cfabe := _caedb.(type) {
		case _e.StartElement:
			switch _cfabe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_fcggc.Layout = NewCT_Layout()
				if _cade := d.DecodeElement(_fcggc.Layout, &_cfabe); _cade != nil {
					return _cade
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_baede := NewCT_PlotAreaChoice()
				if _gdca := d.DecodeElement(&_baede.AreaChart, &_cfabe); _gdca != nil {
					return _gdca
				}
				_fcggc.Choice = append(_fcggc.Choice, _baede)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_cdff := NewCT_PlotAreaChoice()
				if _feggb := d.DecodeElement(&_cdff.Area3DChart, &_cfabe); _feggb != nil {
					return _feggb
				}
				_fcggc.Choice = append(_fcggc.Choice, _cdff)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_bagea := NewCT_PlotAreaChoice()
				if _abgg := d.DecodeElement(&_bagea.LineChart, &_cfabe); _abgg != nil {
					return _abgg
				}
				_fcggc.Choice = append(_fcggc.Choice, _bagea)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_dgdag := NewCT_PlotAreaChoice()
				if _baff := d.DecodeElement(&_dgdag.Line3DChart, &_cfabe); _baff != nil {
					return _baff
				}
				_fcggc.Choice = append(_fcggc.Choice, _dgdag)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_ebcba := NewCT_PlotAreaChoice()
				if _bdcc := d.DecodeElement(&_ebcba.StockChart, &_cfabe); _bdcc != nil {
					return _bdcc
				}
				_fcggc.Choice = append(_fcggc.Choice, _ebcba)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_dadde := NewCT_PlotAreaChoice()
				if _effca := d.DecodeElement(&_dadde.RadarChart, &_cfabe); _effca != nil {
					return _effca
				}
				_fcggc.Choice = append(_fcggc.Choice, _dadde)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_cfdae := NewCT_PlotAreaChoice()
				if _dbfdb := d.DecodeElement(&_cfdae.ScatterChart, &_cfabe); _dbfdb != nil {
					return _dbfdb
				}
				_fcggc.Choice = append(_fcggc.Choice, _cfdae)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bcdec := NewCT_PlotAreaChoice()
				if _cfcfd := d.DecodeElement(&_bcdec.PieChart, &_cfabe); _cfcfd != nil {
					return _cfcfd
				}
				_fcggc.Choice = append(_fcggc.Choice, _bcdec)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_ddegb := NewCT_PlotAreaChoice()
				if _fecd := d.DecodeElement(&_ddegb.Pie3DChart, &_cfabe); _fecd != nil {
					return _fecd
				}
				_fcggc.Choice = append(_fcggc.Choice, _ddegb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_dead := NewCT_PlotAreaChoice()
				if _febd := d.DecodeElement(&_dead.DoughnutChart, &_cfabe); _febd != nil {
					return _febd
				}
				_fcggc.Choice = append(_fcggc.Choice, _dead)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_cfcc := NewCT_PlotAreaChoice()
				if _cacff := d.DecodeElement(&_cfcc.BarChart, &_cfabe); _cacff != nil {
					return _cacff
				}
				_fcggc.Choice = append(_fcggc.Choice, _cfcc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_fgdd := NewCT_PlotAreaChoice()
				if _gcaaaf := d.DecodeElement(&_fgdd.Bar3DChart, &_cfabe); _gcaaaf != nil {
					return _gcaaaf
				}
				_fcggc.Choice = append(_fcggc.Choice, _fgdd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bggfa := NewCT_PlotAreaChoice()
				if _caef := d.DecodeElement(&_bggfa.OfPieChart, &_cfabe); _caef != nil {
					return _caef
				}
				_fcggc.Choice = append(_fcggc.Choice, _bggfa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_bggd := NewCT_PlotAreaChoice()
				if _fead := d.DecodeElement(&_bggd.SurfaceChart, &_cfabe); _fead != nil {
					return _fead
				}
				_fcggc.Choice = append(_fcggc.Choice, _bggd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_bggdg := NewCT_PlotAreaChoice()
				if _ffdec := d.DecodeElement(&_bggdg.Surface3DChart, &_cfabe); _ffdec != nil {
					return _ffdec
				}
				_fcggc.Choice = append(_fcggc.Choice, _bggdg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_ggeg := NewCT_PlotAreaChoice()
				if _cegece := d.DecodeElement(&_ggeg.BubbleChart, &_cfabe); _cegece != nil {
					return _cegece
				}
				_fcggc.Choice = append(_fcggc.Choice, _ggeg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				if _fcggc.CChoice == nil {
					_fcggc.CChoice = NewCT_PlotAreaChoice1()
				}
				if _baffd := d.DecodeElement(&_fcggc.CChoice.ValAx, &_cfabe); _baffd != nil {
					return _baffd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				if _fcggc.CChoice == nil {
					_fcggc.CChoice = NewCT_PlotAreaChoice1()
				}
				if _fcabe := d.DecodeElement(&_fcggc.CChoice.CatAx, &_cfabe); _fcabe != nil {
					return _fcabe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				if _fcggc.CChoice == nil {
					_fcggc.CChoice = NewCT_PlotAreaChoice1()
				}
				if _cbbfc := d.DecodeElement(&_fcggc.CChoice.DateAx, &_cfabe); _cbbfc != nil {
					return _cbbfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				if _fcggc.CChoice == nil {
					_fcggc.CChoice = NewCT_PlotAreaChoice1()
				}
				if _fceagf := d.DecodeElement(&_fcggc.CChoice.SerAx, &_cfabe); _fceagf != nil {
					return _fceagf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0054\u0061\u0062\u006c\u0065"}:
				_fcggc.DTable = NewCT_DTable()
				if _ddccf := d.DecodeElement(_fcggc.DTable, &_cfabe); _ddccf != nil {
					return _ddccf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fcggc.SpPr = _bb.NewCT_ShapeProperties()
				if _fgaaa := d.DecodeElement(_fcggc.SpPr, &_cfabe); _fgaaa != nil {
					return _fgaaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fcggc.ExtLst = NewCT_ExtensionList()
				if _eecf := d.DecodeElement(_fcggc.ExtLst, &_cfabe); _eecf != nil {
					return _eecf
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0020\u0025\u0076", _cfabe.Name)
				if _cedeb := d.Skip(); _cedeb != nil {
					return _cedeb
				}
			}
		case _e.EndElement:
			break _ebcb
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_RadarSer and its children
func (_fbba *CT_RadarSer) Validate() error {
	return _fbba.ValidateWithPath("C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072")
}

func NewCT_DispUnits() *CT_DispUnits { _cdgg := &CT_DispUnits{}; return _cdgg }

func (_gaade ST_SplitType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gaade.String(), start)
}

func ParseUnionST_DepthPercent(s string) (ST_DepthPercent, error) {
	if ST_DepthPercentWithSymbolPatternRe.MatchString(s) {
		return ST_DepthPercent{ST_DepthPercentWithSymbol: &s}, nil
	}
	_beega, _cbaef := _bg.ParseUint(s, 10, 16)
	if _cbaef != nil {
		return ST_DepthPercent{}, _cbaef
	}
	_fgffe := uint16(_beega)
	return ST_DepthPercent{ST_DepthPercentUShort: &_fgffe}, nil
}

// ValidateWithPath validates the CT_FirstSliceAng and its children, prefixing error messages with path
func (_agbaf *CT_FirstSliceAng) ValidateWithPath(path string) error {
	if _agbaf.ValAttr != nil {
		if *_agbaf.ValAttr < 0 {
			return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_agbaf.ValAttr)
		}
		if *_agbaf.ValAttr > 360 {
			return _a.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_agbaf.ValAttr)
		}
	}
	return nil
}

// Validate validates the CT_PageSetup and its children
func (_fbgef *CT_PageSetup) Validate() error {
	return _fbgef.ValidateWithPath("\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070")
}

// Validate validates the CT_RelId and its children
func (_fbab *CT_RelId) Validate() error {
	return _fbab.ValidateWithPath("\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064")
}

// Validate validates the CT_ErrBars and its children
func (_eggge *CT_ErrBars) Validate() error {
	return _eggge.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073")
}

type CT_DLbls struct {
	DLbl   []*CT_DLbl
	Choice *CT_DLblsChoice
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_BubbleScale and its children, prefixing error messages with path
func (_bgce *CT_BubbleScale) ValidateWithPath(path string) error {
	if _bgce.ValAttr != nil {
		if _cgbf := _bgce.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cgbf != nil {
			return _cgbf
		}
	}
	return nil
}

func NewCT_LblAlgn() *CT_LblAlgn { _agag := &CT_LblAlgn{}; _agag.ValAttr = ST_LblAlgn(1); return _agag }

type CT_TrendlineType struct{ ValAttr ST_TrendlineType }

func (_eefbd *CT_ErrDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eefbd.ValAttr = ST_ErrDir(1)
	for _, _agaag := range start.Attr {
		if _agaag.Name.Local == "\u0076\u0061\u006c" {
			_eefbd.ValAttr.UnmarshalXMLAttr(_agaag)
			continue
		}
	}
	for {
		_gbcgb, _ffgc := d.Token()
		if _ffgc != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0045\u0072\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _ffgc)
		}
		if _gdgda, _gbee := _gbcgb.(_e.EndElement); _gbee && _gdgda.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Crosses and its children, prefixing error messages with path
func (_abac *CT_Crosses) ValidateWithPath(path string) error {
	if _abac.ValAttr == ST_CrossesUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gac := _abac.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gac != nil {
		return _gac
	}
	return nil
}

func (_ffcae ST_LegendPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_ffcae.String(), start)
}

func (_gfa *CT_BarGrouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfa.ValAttr != ST_BarGroupingUnset {
		_dde, _cgc := _gfa.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cgc != nil {
			return _cgc
		}
		start.Attr = append(start.Attr, _dde)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ffde *CT_LayoutMode) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ccgd := range start.Attr {
		if _ccgd.Name.Local == "\u0076\u0061\u006c" {
			_ffde.ValAttr.UnmarshalXMLAttr(_ccgd)
			continue
		}
	}
	for {
		_fcgb, _eeagb := d.Token()
		if _eeagb != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004ca\u0079o\u0075t\u004d\u006f\u0064\u0065\u003a\u0020\u0025s", _eeagb)
		}
		if _dffee, _geed := _fcgb.(_e.EndElement); _geed && _dffee.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_ExtensionList() *CT_ExtensionList { _caff := &CT_ExtensionList{}; return _caff }

func NewCT_PivotFmts() *CT_PivotFmts { _bccf := &CT_PivotFmts{}; return _bccf }

const (
	ST_CrossBetweenUnset   ST_CrossBetween = 0
	ST_CrossBetweenBetween ST_CrossBetween = 1
	ST_CrossBetweenMidCat  ST_CrossBetween = 2
)

// Validate validates the CT_PieChart and its children
func (_bggee *CT_PieChart) Validate() error {
	return _bggee.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}

func (_cfaf *CT_MarkerSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cfaf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_cfaf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cbefg ST_PageSetupOrientation) String() string {
	switch _cbefg {
	case 0:
		return ""
	case 1:
		return "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case 2:
		return "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case 3:
		return "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return ""
}

func NewCT_Skip() *CT_Skip { _edea := &CT_Skip{}; _edea.ValAttr = 1; return _edea }

type CT_ErrDir struct{ ValAttr ST_ErrDir }

func (_fabf *CT_MarkerSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fefeb := range start.Attr {
		if _fefeb.Name.Local == "\u0076\u0061\u006c" {
			_bebe, _ffbc := _bg.ParseUint(_fefeb.Value, 10, 8)
			if _ffbc != nil {
				return _ffbc
			}
			_aefc := uint8(_bebe)
			_fabf.ValAttr = &_aefc
			continue
		}
	}
	for {
		_ceefe, _bccbee := d.Token()
		if _bccbee != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u004da\u0072k\u0065r\u0053\u0069\u007a\u0065\u003a\u0020\u0025s", _bccbee)
		}
		if _cbgbd, _eafbd := _ceefe.(_e.EndElement); _eafbd && _cbgbd.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_Order struct{ ValAttr *uint8 }

type CT_AreaChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func NewCT_DispBlanksAs() *CT_DispBlanksAs { _ggfe := &CT_DispBlanksAs{}; return _ggfe }

func (_fggbd *EG_AreaChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fggbd.Grouping != nil {
		_faebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_fggbd.Grouping, _faebg)
	}
	if _fggbd.VaryColors != nil {
		_gabdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_fggbd.VaryColors, _gabdd)
	}
	if _fggbd.Ser != nil {
		_dcge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _defa := range _fggbd.Ser {
			e.EncodeElement(_defa, _dcge)
		}
	}
	if _fggbd.DLbls != nil {
		_eeeff := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_fggbd.DLbls, _eeeff)
	}
	if _fggbd.DropLines != nil {
		_cgbag := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fggbd.DropLines, _cgbag)
	}
	return nil
}

// Validate validates the CT_BarGrouping and its children
func (_deac *CT_BarGrouping) Validate() error {
	return _deac.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067")
}

func (_dfgeg *CT_RelId) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _a.Sprintf("\u0025\u0076", _dfgeg.IdAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_UpDownBar and its children, prefixing error messages with path
func (_fgdfg *CT_UpDownBar) ValidateWithPath(path string) error {
	if _fgdfg.SpPr != nil {
		if _adabc := _fgdfg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _adabc != nil {
			return _adabc
		}
	}
	return nil
}

// Validate validates the CT_DispUnitsLbl and its children
func (_afad *CT_DispUnitsLbl) Validate() error {
	return _afad.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c")
}

func (_ced *CT_AxPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ced.ValAttr = ST_AxPos(1)
	for _, _ada := range start.Attr {
		if _ada.Name.Local == "\u0076\u0061\u006c" {
			_ced.ValAttr.UnmarshalXMLAttr(_ada)
			continue
		}
	}
	for {
		_eefa, _fcfc := d.Token()
		if _fcfc != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fA\u0078\u0050\u006f\u0073: \u0025\u0073", _fcfc)
		}
		if _gbca, _gff := _eefa.(_e.EndElement); _gff && _gbca.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gbec *CT_DispUnitsChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gbec.CustUnit != nil {
		_eeff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_gbec.CustUnit, _eeff)
	}
	if _gbec.BuiltInUnit != nil {
		_dgcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_gbec.BuiltInUnit, _dgcb)
	}
	return nil
}

func (_ecgf *CT_ValAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_edebb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_ecgf.AxId, _edebb)
	_agfb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_ecgf.Scaling, _agfb)
	if _ecgf.Delete != nil {
		_gbefd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_ecgf.Delete, _gbefd)
	}
	_cceag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_ecgf.AxPos, _cceag)
	if _ecgf.MajorGridlines != nil {
		_cbbeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ecgf.MajorGridlines, _cbbeb)
	}
	if _ecgf.MinorGridlines != nil {
		_cecg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ecgf.MinorGridlines, _cecg)
	}
	if _ecgf.Title != nil {
		_fccfg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_ecgf.Title, _fccfg)
	}
	if _ecgf.NumFmt != nil {
		_dbdab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_ecgf.NumFmt, _dbdab)
	}
	if _ecgf.MajorTickMark != nil {
		_baffb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ecgf.MajorTickMark, _baffb)
	}
	if _ecgf.MinorTickMark != nil {
		_bfeaac := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_ecgf.MinorTickMark, _bfeaac)
	}
	if _ecgf.TickLblPos != nil {
		_fdfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_ecgf.TickLblPos, _fdfc)
	}
	if _ecgf.SpPr != nil {
		_cgabd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_ecgf.SpPr, _cgabd)
	}
	if _ecgf.TxPr != nil {
		_cccbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ecgf.TxPr, _cccbd)
	}
	_ccbc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_ecgf.CrossAx, _ccbc)
	if _ecgf.Choice != nil {
		_ecgf.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _ecgf.CrossBetween != nil {
		_aaabdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0072\u006f\u0073\u0073\u0042\u0065t\u0077\u0065\u0065\u006e"}}
		e.EncodeElement(_ecgf.CrossBetween, _aaabdc)
	}
	if _ecgf.MajorUnit != nil {
		_bbacd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ecgf.MajorUnit, _bbacd)
	}
	if _ecgf.MinorUnit != nil {
		_ebbeb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_ecgf.MinorUnit, _ebbeb)
	}
	if _ecgf.DispUnits != nil {
		_daec := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"}}
		e.EncodeElement(_ecgf.DispUnits, _daec)
	}
	if _ecgf.ExtLst != nil {
		_aeaee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ecgf.ExtLst, _aeaee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gfae *CT_ExtensionList) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gfae.Ext != nil {
		_bedff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065x\u0074"}}
		for _, _agadd := range _gfae.Ext {
			e.EncodeElement(_agadd, _bedff)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_BuiltInUnit struct{ ValAttr ST_BuiltInUnit }

func (_aedde ST_AxPos) Validate() error { return _aedde.ValidateWithPath("") }

func (_ccaa *CT_AreaSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ccaa.Idx = NewCT_UnsignedInt()
	_ccaa.Order = NewCT_UnsignedInt()
_cbe:
	for {
		_bbd, _dac := d.Token()
		if _dac != nil {
			return _dac
		}
		switch _bec := _bbd.(type) {
		case _e.StartElement:
			switch _bec.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bgc := d.DecodeElement(_ccaa.Idx, &_bec); _bgc != nil {
					return _bgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _ecc := d.DecodeElement(_ccaa.Order, &_bec); _ecc != nil {
					return _ecc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ccaa.Tx = NewCT_SerTx()
				if _abfc := d.DecodeElement(_ccaa.Tx, &_bec); _abfc != nil {
					return _abfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ccaa.SpPr = _bb.NewCT_ShapeProperties()
				if _ebac := d.DecodeElement(_ccaa.SpPr, &_bec); _ebac != nil {
					return _ebac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_ccaa.PictureOptions = NewCT_PictureOptions()
				if _cd := d.DecodeElement(_ccaa.PictureOptions, &_bec); _cd != nil {
					return _cd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_aecg := NewCT_DPt()
				if _ea := d.DecodeElement(_aecg, &_bec); _ea != nil {
					return _ea
				}
				_ccaa.DPt = append(_ccaa.DPt, _aecg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ccaa.DLbls = NewCT_DLbls()
				if _fdc := d.DecodeElement(_ccaa.DLbls, &_bec); _fdc != nil {
					return _fdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_bbf := NewCT_Trendline()
				if _gge := d.DecodeElement(_bbf, &_bec); _gge != nil {
					return _gge
				}
				_ccaa.Trendline = append(_ccaa.Trendline, _bbf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_ccd := NewCT_ErrBars()
				if _gbb := d.DecodeElement(_ccd, &_bec); _gbb != nil {
					return _gbb
				}
				_ccaa.ErrBars = append(_ccaa.ErrBars, _ccd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ccaa.Cat = NewCT_AxDataSource()
				if _aeg := d.DecodeElement(_ccaa.Cat, &_bec); _aeg != nil {
					return _aeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ccaa.Val = NewCT_NumDataSource()
				if _beef := d.DecodeElement(_ccaa.Val, &_bec); _beef != nil {
					return _beef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ccaa.ExtLst = NewCT_ExtensionList()
				if _efg := d.DecodeElement(_ccaa.ExtLst, &_bec); _efg != nil {
					return _efg
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fA\u0072\u0065\u0061\u0053\u0065\u0072\u0020\u0025\u0076", _bec.Name)
				if _bbb := d.Skip(); _bbb != nil {
					return _bbb
				}
			}
		case _e.EndElement:
			break _cbe
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_DispUnitsLbl() *CT_DispUnitsLbl { _ffcde := &CT_DispUnitsLbl{}; return _ffcde }

type CT_Scaling struct {
	LogBase     *CT_LogBase
	Orientation *CT_Orientation
	Max         *CT_Double
	Min         *CT_Double
	ExtLst      *CT_ExtensionList
}

type CT_SerTxChoice struct {
	StrRef *CT_StrRef
	V      *string
}

func (_dfbge ST_TickMark) Validate() error { return _dfbge.ValidateWithPath("") }

type CT_Surface struct {
	Thickness      *CT_Thickness
	SpPr           *_bb.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	ExtLst         *CT_ExtensionList
}

func NewCT_MarkerSize() *CT_MarkerSize { _eceb := &CT_MarkerSize{}; return _eceb }

func (_gcaf ST_Thickness) String() string {
	if _gcaf.ST_ThicknessPercent != nil {
		return _a.Sprintf("\u0025\u0076", *_gcaf.ST_ThicknessPercent)
	}
	if _gcaf.Uint32 != nil {
		return _a.Sprintf("\u0025\u0076", *_gcaf.Uint32)
	}
	return ""
}

// ValidateWithPath validates the CT_RadarStyle and its children, prefixing error messages with path
func (_gddab *CT_RadarStyle) ValidateWithPath(path string) error {
	if _cffce := _gddab.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cffce != nil {
		return _cffce
	}
	return nil
}

func (_cgecf *CT_Tx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cgecf.Choice = NewCT_TxChoice()
_gacfe:
	for {
		_babb, _bgfge := d.Token()
		if _bgfge != nil {
			return _bgfge
		}
		switch _dcac := _babb.(type) {
		case _e.StartElement:
			switch _dcac.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cgecf.Choice = NewCT_TxChoice()
				if _dcbd := d.DecodeElement(&_cgecf.Choice.StrRef, &_dcac); _dcbd != nil {
					return _dcbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_cgecf.Choice = NewCT_TxChoice()
				if _effe := d.DecodeElement(&_cgecf.Choice.Rich, &_dcac); _effe != nil {
					return _effe
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006fn \u0043\u0054\u005fT\u0078 \u0025\u0076", _dcac.Name)
				if _geegf := d.Skip(); _geegf != nil {
					return _geegf
				}
			}
		case _e.EndElement:
			break _gacfe
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_Protection() *CT_Protection { _dgbc := &CT_Protection{}; return _dgbc }

// ValidateWithPath validates the CT_SerTxChoice and its children, prefixing error messages with path
func (_bfaae *CT_SerTxChoice) ValidateWithPath(path string) error {
	if _bfaae.StrRef != nil {
		if _cagcf := _bfaae.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _cagcf != nil {
			return _cagcf
		}
	}
	return nil
}

type CT_LblOffset struct{ ValAttr *ST_LblOffset }

func NewEG_SurfaceChartShared() *EG_SurfaceChartShared {
	_eggfg := &EG_SurfaceChartShared{}
	return _eggfg
}

func (_bbgbae ST_CrossBetween) String() string {
	switch _bbgbae {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case 2:
		return "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return ""
}

func NewCT_ErrBars() *CT_ErrBars {
	_adba := &CT_ErrBars{}
	_adba.ErrBarType = NewCT_ErrBarType()
	_adba.ErrValType = NewCT_ErrValType()
	return _adba
}

// ValidateWithPath validates the CT_DLblPos and its children, prefixing error messages with path
func (_cggdf *CT_DLblPos) ValidateWithPath(path string) error {
	if _cggdf.ValAttr == ST_DLblPosUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gdec := _cggdf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gdec != nil {
		return _gdec
	}
	return nil
}

func (_cdga ST_TrendlineType) Validate() error { return _cdga.ValidateWithPath("") }

// Validate validates the CT_BarSer and its children
func (_gcab *CT_BarSer) Validate() error {
	return _gcab.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r")
}

// ValidateWithPath validates the CT_BarGrouping and its children, prefixing error messages with path
func (_aecd *CT_BarGrouping) ValidateWithPath(path string) error {
	if _gaed := _aecd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gaed != nil {
		return _gaed
	}
	return nil
}

// Validate validates the CT_AxDataSource and its children
func (_acd *CT_AxDataSource) Validate() error {
	return _acd.ValidateWithPath("\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}

func (_abab *CT_DLblChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gabd:
	for {
		_fgea, _adgfc := d.Token()
		if _adgfc != nil {
			return _adgfc
		}
		switch _ebeb := _fgea.(type) {
		case _e.StartElement:
			switch _ebeb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_abab.Delete = NewCT_Boolean()
				if _acdf := d.DecodeElement(_abab.Delete, &_ebeb); _acdf != nil {
					return _acdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_abab.Layout = NewCT_Layout()
				if _gdffa := d.DecodeElement(_abab.Layout, &_ebeb); _gdffa != nil {
					return _gdffa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_abab.Tx = NewCT_Tx()
				if _abda := d.DecodeElement(_abab.Tx, &_ebeb); _abda != nil {
					return _abda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_abab.NumFmt = NewCT_NumFmt()
				if _gdea := d.DecodeElement(_abab.NumFmt, &_ebeb); _gdea != nil {
					return _gdea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_abab.SpPr = _bb.NewCT_ShapeProperties()
				if _efce := d.DecodeElement(_abab.SpPr, &_ebeb); _efce != nil {
					return _efce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_abab.TxPr = _bb.NewCT_TextBody()
				if _cead := d.DecodeElement(_abab.TxPr, &_ebeb); _cead != nil {
					return _cead
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_abab.DLblPos = NewCT_DLblPos()
				if _fcdcf := d.DecodeElement(_abab.DLblPos, &_ebeb); _fcdcf != nil {
					return _fcdcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_abab.ShowLegendKey = NewCT_Boolean()
				if _fbfac := d.DecodeElement(_abab.ShowLegendKey, &_ebeb); _fbfac != nil {
					return _fbfac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_abab.ShowVal = NewCT_Boolean()
				if _agcd := d.DecodeElement(_abab.ShowVal, &_ebeb); _agcd != nil {
					return _agcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_abab.ShowCatName = NewCT_Boolean()
				if _gbbcf := d.DecodeElement(_abab.ShowCatName, &_ebeb); _gbbcf != nil {
					return _gbbcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_abab.ShowSerName = NewCT_Boolean()
				if _cgfc := d.DecodeElement(_abab.ShowSerName, &_ebeb); _cgfc != nil {
					return _cgfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_abab.ShowPercent = NewCT_Boolean()
				if _gega := d.DecodeElement(_abab.ShowPercent, &_ebeb); _gega != nil {
					return _gega
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_abab.ShowBubbleSize = NewCT_Boolean()
				if _afg := d.DecodeElement(_abab.ShowBubbleSize, &_ebeb); _afg != nil {
					return _afg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_abab.Separator = new(string)
				if _fgdb := d.DecodeElement(_abab.Separator, &_ebeb); _fgdb != nil {
					return _fgdb
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044L\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065 \u0025\u0076", _ebeb.Name)
				if _dfbg := d.Skip(); _dfbg != nil {
					return _dfbg
				}
			}
		case _e.EndElement:
			break _gabd
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Boolean and its children, prefixing error messages with path
func (_cgbg *CT_Boolean) ValidateWithPath(path string) error { return nil }

// ValidateWithPath validates the CT_Period and its children, prefixing error messages with path
func (_edce *CT_Period) ValidateWithPath(path string) error {
	if _edce.ValAttr != nil {
		if *_edce.ValAttr < 2 {
			return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_edce.ValAttr)
		}
	}
	return nil
}

type CT_HeaderFooter struct {
	AlignWithMarginsAttr *bool
	DifferentOddEvenAttr *bool
	DifferentFirstAttr   *bool
	OddHeader            *string
	OddFooter            *string
	EvenHeader           *string
	EvenFooter           *string
	FirstHeader          *string
	FirstFooter          *string
}

func NewCT_Lvl() *CT_Lvl { _acba := &CT_Lvl{}; return _acba }

func (_ccde *CT_DepthPercent) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfca := range start.Attr {
		if _dfca.Name.Local == "\u0076\u0061\u006c" {
			_geeg, _bcea := ParseUnionST_DepthPercent(_dfca.Value)
			if _bcea != nil {
				return _bcea
			}
			_ccde.ValAttr = &_geeg
			continue
		}
	}
	for {
		_eecg, _adgb := d.Token()
		if _adgb != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0065\u0070\u0074\u0068\u0050e\u0072\u0063\u0065n\u0074:\u0020\u0025\u0073", _adgb)
		}
		if _ccfab, _efgcc := _eecg.(_e.EndElement); _efgcc && _ccfab.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_AxPos and its children
func (_bcc *CT_AxPos) Validate() error {
	return _bcc.ValidateWithPath("\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073")
}

func (_gegea *CT_MultiLvlStrData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gegea.PtCount != nil {
		_fbgf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_gegea.PtCount, _fbgf)
	}
	if _gegea.Lvl != nil {
		_eafgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006cv\u006c"}}
		for _, _debdf := range _gegea.Lvl {
			e.EncodeElement(_debdf, _eafgb)
		}
	}
	if _gegea.ExtLst != nil {
		_bgcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gegea.ExtLst, _bgcg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_AxisUnit struct{ ValAttr float64 }

func NewCT_BandFmt() *CT_BandFmt { _eea := &CT_BandFmt{}; _eea.Idx = NewCT_UnsignedInt(); return _eea }

func (_eeed *CT_Double) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _aacag := range start.Attr {
		if _aacag.Name.Local == "\u0076\u0061\u006c" {
			_fgbf, _dgbe := _bg.ParseFloat(_aacag.Value, 64)
			if _dgbe != nil {
				return _dgbe
			}
			_eeed.ValAttr = _fgbf
			continue
		}
	}
	for {
		_aee, _cdfe := d.Token()
		if _cdfe != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0044\u006f\u0075b\u006c\u0065\u003a\u0020\u0025\u0073", _cdfe)
		}
		if _cgge, _ccfb := _aee.(_e.EndElement); _ccfb && _cgge.Name == start.Name {
			break
		}
	}
	return nil
}

func NewEG_AxSharedChoice() *EG_AxSharedChoice { _cacef := &EG_AxSharedChoice{}; return _cacef }

func (_ddedb *CT_Pie3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dbfa:
	for {
		_cdced, _eedg := d.Token()
		if _eedg != nil {
			return _eedg
		}
		switch _gecbb := _cdced.(type) {
		case _e.StartElement:
			switch _gecbb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ddedb.VaryColors = NewCT_Boolean()
				if _eafbg := d.DecodeElement(_ddedb.VaryColors, &_gecbb); _eafbg != nil {
					return _eafbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aacb := NewCT_PieSer()
				if _dcdfc := d.DecodeElement(_aacb, &_gecbb); _dcdfc != nil {
					return _dcdfc
				}
				_ddedb.Ser = append(_ddedb.Ser, _aacb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ddedb.DLbls = NewCT_DLbls()
				if _cdfg := d.DecodeElement(_ddedb.DLbls, &_gecbb); _cdfg != nil {
					return _cdfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ddedb.ExtLst = NewCT_ExtensionList()
				if _aeefc := d.DecodeElement(_ddedb.ExtLst, &_gecbb); _aeefc != nil {
					return _aeefc
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050i\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _gecbb.Name)
				if _bcab := d.Skip(); _bcab != nil {
					return _bcab
				}
			}
		case _e.EndElement:
			break _dbfa
		case _e.CharData:
		}
	}
	return nil
}

type CT_Title struct {
	Tx      *CT_Tx
	Layout  *CT_Layout
	Overlay *CT_Boolean
	SpPr    *_bb.CT_ShapeProperties
	TxPr    *_bb.CT_TextBody
	ExtLst  *CT_ExtensionList
}

func (_bdeb *ChartSpace) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdeb.CT_ChartSpace = *NewCT_ChartSpace()
_accee:
	for {
		_ceggd, _bcbf := d.Token()
		if _bcbf != nil {
			return _bcbf
		}
		switch _cgbbe := _ceggd.(type) {
		case _e.StartElement:
			switch _cgbbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_bdeb.Date1904 = NewCT_Boolean()
				if _gfde := d.DecodeElement(_bdeb.Date1904, &_cgbbe); _gfde != nil {
					return _gfde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_bdeb.Lang = NewCT_TextLanguageID()
				if _dccd := d.DecodeElement(_bdeb.Lang, &_cgbbe); _dccd != nil {
					return _dccd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_bdeb.RoundedCorners = NewCT_Boolean()
				if _cebaa := d.DecodeElement(_bdeb.RoundedCorners, &_cgbbe); _cebaa != nil {
					return _cebaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_bdeb.Style = NewCT_Style()
				if _ececb := d.DecodeElement(_bdeb.Style, &_cgbbe); _ececb != nil {
					return _ececb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_bdeb.ClrMapOvr = _bb.NewCT_ColorMapping()
				if _gbfbg := d.DecodeElement(_bdeb.ClrMapOvr, &_cgbbe); _gbfbg != nil {
					return _gbfbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_bdeb.PivotSource = NewCT_PivotSource()
				if _dfddc := d.DecodeElement(_bdeb.PivotSource, &_cgbbe); _dfddc != nil {
					return _dfddc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_bdeb.Protection = NewCT_Protection()
				if _ecfc := d.DecodeElement(_bdeb.Protection, &_cgbbe); _ecfc != nil {
					return _ecfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _ddaf := d.DecodeElement(_bdeb.Chart, &_cgbbe); _ddaf != nil {
					return _ddaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bdeb.SpPr = _bb.NewCT_ShapeProperties()
				if _dggbe := d.DecodeElement(_bdeb.SpPr, &_cgbbe); _dggbe != nil {
					return _dggbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bdeb.TxPr = _bb.NewCT_TextBody()
				if _dbdc := d.DecodeElement(_bdeb.TxPr, &_cgbbe); _dbdc != nil {
					return _dbdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_bdeb.ExternalData = NewCT_ExternalData()
				if _dgaf := d.DecodeElement(_bdeb.ExternalData, &_cgbbe); _dgaf != nil {
					return _dgaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_bdeb.PrintSettings = NewCT_PrintSettings()
				if _eecd := d.DecodeElement(_bdeb.PrintSettings, &_cgbbe); _eecd != nil {
					return _eecd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_bdeb.UserShapes = NewCT_RelId()
				if _dbcbc := d.DecodeElement(_bdeb.UserShapes, &_cgbbe); _dbcbc != nil {
					return _dbcbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdeb.ExtLst = NewCT_ExtensionList()
				if _cfcdge := d.DecodeElement(_bdeb.ExtLst, &_cgbbe); _cfcdge != nil {
					return _cfcdge
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0068\u0061r\u0074\u0053\u0070\u0061\u0063\u0065\u0020\u0025\u0076", _cgbbe.Name)
				if _fabff := d.Skip(); _fabff != nil {
					return _fabff
				}
			}
		case _e.EndElement:
			break _accee
		case _e.CharData:
		}
	}
	return nil
}

func (_bbdgd *EG_AxSharedChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bbdgd.Crosses != nil {
		_bcef := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0065s"}}
		e.EncodeElement(_bbdgd.Crosses, _bcef)
	}
	if _bbdgd.CrossesAt != nil {
		_bffbe := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"}}
		e.EncodeElement(_bbdgd.CrossesAt, _bffbe)
	}
	return nil
}

const (
	ST_GroupingUnset          ST_Grouping = 0
	ST_GroupingPercentStacked ST_Grouping = 1
	ST_GroupingStandard       ST_Grouping = 2
	ST_GroupingStacked        ST_Grouping = 3
)

type CT_TrendlineLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	NumFmt *CT_NumFmt
	SpPr   *_bb.CT_ShapeProperties
	TxPr   *_bb.CT_TextBody
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_StrRef and its children, prefixing error messages with path
func (_cagcg *CT_StrRef) ValidateWithPath(path string) error {
	if _cagcg.StrCache != nil {
		if _afeca := _cagcg.StrCache.ValidateWithPath(path + "\u002fS\u0074\u0072\u0043\u0061\u0063\u0068e"); _afeca != nil {
			return _afeca
		}
	}
	if _cagcg.ExtLst != nil {
		if _cfdfe := _cagcg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfdfe != nil {
			return _cfdfe
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Order and its children, prefixing error messages with path
func (_caaea *CT_Order) ValidateWithPath(path string) error {
	if _caaea.ValAttr != nil {
		if *_caaea.ValAttr < 2 {
			return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_caaea.ValAttr)
		}
		if *_caaea.ValAttr > 6 {
			return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003c=\u0020\u0036\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_caaea.ValAttr)
		}
	}
	return nil
}

type CT_Overlap struct{ ValAttr *ST_Overlap }

func (_ffdbg *ST_BarGrouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ggddg, _gbbde := d.Token()
	if _gbbde != nil {
		return _gbbde
	}
	if _gcge, _aebafb := _ggddg.(_e.EndElement); _aebafb && _gcge.Name == start.Name {
		*_ffdbg = 1
		return nil
	}
	if _ddeea, _effbe := _ggddg.(_e.CharData); !_effbe {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ggddg)
	} else {
		switch string(_ddeea) {
		case "":
			*_ffdbg = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_ffdbg = 1
		case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
			*_ffdbg = 2
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_ffdbg = 3
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_ffdbg = 4
		}
	}
	_ggddg, _gbbde = d.Token()
	if _gbbde != nil {
		return _gbbde
	}
	if _fdegeb, _dggcc := _ggddg.(_e.EndElement); _dggcc && _fdegeb.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ggddg)
}

// ValidateWithPath validates the CT_RadarSer and its children, prefixing error messages with path
func (_edaf *CT_RadarSer) ValidateWithPath(path string) error {
	if _cbdga := _edaf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cbdga != nil {
		return _cbdga
	}
	if _dcad := _edaf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _dcad != nil {
		return _dcad
	}
	if _edaf.Tx != nil {
		if _babfb := _edaf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _babfb != nil {
			return _babfb
		}
	}
	if _edaf.SpPr != nil {
		if _cdeef := _edaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cdeef != nil {
			return _cdeef
		}
	}
	if _edaf.Marker != nil {
		if _cafee := _edaf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _cafee != nil {
			return _cafee
		}
	}
	for _dbeec, _cddag := range _edaf.DPt {
		if _affb := _cddag.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _dbeec)); _affb != nil {
			return _affb
		}
	}
	if _edaf.DLbls != nil {
		if _cdggg := _edaf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cdggg != nil {
			return _cdggg
		}
	}
	if _edaf.Cat != nil {
		if _gdddc := _edaf.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _gdddc != nil {
			return _gdddc
		}
	}
	if _edaf.Val != nil {
		if _eebgb := _edaf.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _eebgb != nil {
			return _eebgb
		}
	}
	if _edaf.ExtLst != nil {
		if _aaaee := _edaf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _aaaee != nil {
			return _aaaee
		}
	}
	return nil
}

func NewCT_Pie3DChart() *CT_Pie3DChart { _bgagb := &CT_Pie3DChart{}; return _bgagb }

func (_dfdc *CT_PrintSettings) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dfdc.HeaderFooter != nil {
		_aeefb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u0065\u0061\u0064\u0065\u0072\u0046o\u006f\u0074\u0065\u0072"}}
		e.EncodeElement(_dfdc.HeaderFooter, _aeefb)
	}
	if _dfdc.PageMargins != nil {
		_dbbaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073"}}
		e.EncodeElement(_dfdc.PageMargins, _dbbaa)
	}
	if _dfdc.PageSetup != nil {
		_gdbcc := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0070\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070"}}
		e.EncodeElement(_dfdc.PageSetup, _gdbcc)
	}
	if _dfdc.LegacyDrawingHF != nil {
		_egaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0061\u0063\u0079\u0044\u0072\u0061\u0077i\u006e\u0067\u0048\u0046"}}
		e.EncodeElement(_dfdc.LegacyDrawingHF, _egaa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Bar3DChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	GapDepth   *CT_GapAmount
	Shape      *CT_Shape
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_acfgc *ST_PageSetupOrientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ddega, _abbgc := d.Token()
	if _abbgc != nil {
		return _abbgc
	}
	if _feaba, _ceage := _ddega.(_e.EndElement); _ceage && _feaba.Name == start.Name {
		*_acfgc = 1
		return nil
	}
	if _dfeef, _cbcf := _ddega.(_e.CharData); !_cbcf {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ddega)
	} else {
		switch string(_dfeef) {
		case "":
			*_acfgc = 0
		case "\u0064e\u0066\u0061\u0075\u006c\u0074":
			*_acfgc = 1
		case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
			*_acfgc = 2
		case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
			*_acfgc = 3
		}
	}
	_ddega, _abbgc = d.Token()
	if _abbgc != nil {
		return _abbgc
	}
	if _fcdge, _eedgd := _ddega.(_e.EndElement); _eedgd && _fcdge.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ddega)
}

func (_cbge *CT_StrRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cgada:
	for {
		_dcdef, _dgfee := d.Token()
		if _dgfee != nil {
			return _dgfee
		}
		switch _feadb := _dcdef.(type) {
		case _e.StartElement:
			switch _feadb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _fbaac := d.DecodeElement(&_cbge.F, &_feadb); _fbaac != nil {
					return _fbaac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}:
				_cbge.StrCache = NewCT_StrData()
				if _gedef := d.DecodeElement(_cbge.StrCache, &_feadb); _gedef != nil {
					return _gedef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cbge.ExtLst = NewCT_ExtensionList()
				if _eaea := d.DecodeElement(_cbge.ExtLst, &_feadb); _eaea != nil {
					return _eaea
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072R\u0065\u0066 \u0025\u0076", _feadb.Name)
				if _defbe := d.Skip(); _defbe != nil {
					return _defbe
				}
			}
		case _e.EndElement:
			break _cgada
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_Order() *CT_Order { _bfbgg := &CT_Order{}; return _bfbgg }

func (_bfeea *CT_RadarStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ffafgc := range start.Attr {
		if _ffafgc.Name.Local == "\u0076\u0061\u006c" {
			_bfeea.ValAttr.UnmarshalXMLAttr(_ffafgc)
			continue
		}
	}
	for {
		_cdbaa, _gfceb := d.Token()
		if _gfceb != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0043\u0054\u005f\u0052a\u0064a\u0072S\u0074\u0079\u006c\u0065\u003a\u0020\u0025s", _gfceb)
		}
		if _ebadg, _ebaff := _cdbaa.(_e.EndElement); _ebaff && _ebadg.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_BarGrouping struct{ ValAttr ST_BarGrouping }

func NewCT_Crosses() *CT_Crosses { _fccc := &CT_Crosses{}; _fccc.ValAttr = ST_Crosses(1); return _fccc }

func (_gbebd *CT_TrendlineLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_geegb:
	for {
		_accf, _fagaf := d.Token()
		if _fagaf != nil {
			return _fagaf
		}
		switch _aeaeb := _accf.(type) {
		case _e.StartElement:
			switch _aeaeb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_gbebd.Layout = NewCT_Layout()
				if _cgdgb := d.DecodeElement(_gbebd.Layout, &_aeaeb); _cgdgb != nil {
					return _cgdgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gbebd.Tx = NewCT_Tx()
				if _fcbab := d.DecodeElement(_gbebd.Tx, &_aeaeb); _fcbab != nil {
					return _fcbab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_gbebd.NumFmt = NewCT_NumFmt()
				if _bdfgd := d.DecodeElement(_gbebd.NumFmt, &_aeaeb); _bdfgd != nil {
					return _bdfgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gbebd.SpPr = _bb.NewCT_ShapeProperties()
				if _bdfa := d.DecodeElement(_gbebd.SpPr, &_aeaeb); _bdfa != nil {
					return _bdfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gbebd.TxPr = _bb.NewCT_TextBody()
				if _bfcde := d.DecodeElement(_gbebd.TxPr, &_aeaeb); _bfcde != nil {
					return _bfcde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gbebd.ExtLst = NewCT_ExtensionList()
				if _fcec := d.DecodeElement(_gbebd.ExtLst, &_aeaeb); _fcec != nil {
					return _fcec
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c\u0020\u0025\u0076", _aeaeb.Name)
				if _ccca := d.Skip(); _ccca != nil {
					return _ccca
				}
			}
		case _e.EndElement:
			break _geegb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StrVal and its children, prefixing error messages with path
func (_bcccf *CT_StrVal) ValidateWithPath(path string) error { return nil }

type CT_NumDataSource struct{ Choice *CT_NumDataSourceChoice }

// Validate validates the CT_BarChart and its children
func (_afaf *CT_BarChart) Validate() error {
	return _afaf.ValidateWithPath("C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_Surface3DChart and its children, prefixing error messages with path
func (_cdbag *CT_Surface3DChart) ValidateWithPath(path string) error {
	if _cdbag.Wireframe != nil {
		if _efdfc := _cdbag.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _efdfc != nil {
			return _efdfc
		}
	}
	for _agebf, _dega := range _cdbag.Ser {
		if _ecafg := _dega.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _agebf)); _ecafg != nil {
			return _ecafg
		}
	}
	if _cdbag.BandFmts != nil {
		if _ecdgf := _cdbag.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _ecdgf != nil {
			return _ecdgf
		}
	}
	for _baec, _gdcge := range _cdbag.AxId {
		if _dfdb := _gdcge.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _baec)); _dfdb != nil {
			return _dfdb
		}
	}
	if _cdbag.ExtLst != nil {
		if _ecfb := _cdbag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ecfb != nil {
			return _ecfb
		}
	}
	return nil
}

func (_bcff *CT_PictureStackUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bcff.ValAttr = 0 + 1
	for _, _fbace := range start.Attr {
		if _fbace.Name.Local == "\u0076\u0061\u006c" {
			_dggag, _cecca := _bg.ParseFloat(_fbace.Value, 64)
			if _cecca != nil {
				return _cecca
			}
			_bcff.ValAttr = _dggag
			continue
		}
	}
	for {
		_gefcd, _dfcef := d.Token()
		if _dfcef != nil {
			return _a.Errorf("\u0070\u0061\u0072s\u0069\u006e\u0067\u0020C\u0054\u005f\u0050\u0069\u0063\u0074\u0075r\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _dfcef)
		}
		if _baf, _bdff := _gefcd.(_e.EndElement); _bdff && _baf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_fecdg *CT_PlotAreaChoice1) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fecdg.ValAx != nil {
		_agcaa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0076\u0061\u006c\u0041\u0078"}}
		for _, _dfdd := range _fecdg.ValAx {
			e.EncodeElement(_dfdd, _agcaa)
		}
	}
	if _fecdg.CatAx != nil {
		_gedda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0061\u0074\u0041\u0078"}}
		for _, _ebgfg := range _fecdg.CatAx {
			e.EncodeElement(_ebgfg, _gedda)
		}
	}
	if _fecdg.DateAx != nil {
		_gdfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0041\u0078"}}
		for _, _fdgee := range _fecdg.DateAx {
			e.EncodeElement(_fdgee, _gdfc)
		}
	}
	if _fecdg.SerAx != nil {
		_gffe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0065\u0072\u0041\u0078"}}
		for _, _fdafe := range _fecdg.SerAx {
			e.EncodeElement(_fdafe, _gffe)
		}
	}
	return nil
}

type CT_RelId struct{ IdAttr string }

// Validate validates the CT_SurfaceChart and its children
func (_cgdg *CT_SurfaceChart) Validate() error {
	return _cgdg.ValidateWithPath("\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074")
}

type CT_DPt struct {
	Idx              *CT_UnsignedInt
	InvertIfNegative *CT_Boolean
	Marker           *CT_Marker
	Bubble3D         *CT_Boolean
	Explosion        *CT_UnsignedInt
	SpPr             *_bb.CT_ShapeProperties
	PictureOptions   *CT_PictureOptions
	ExtLst           *CT_ExtensionList
}

// ValidateWithPath validates the CT_OfPieType and its children, prefixing error messages with path
func (_dcdf *CT_OfPieType) ValidateWithPath(path string) error {
	if _bbcge := _dcdf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbcge != nil {
		return _bbcge
	}
	return nil
}

func (_ccac *ST_DepthPercent) Validate() error { return _ccac.ValidateWithPath("") }

// ValidateWithPath validates the CT_Grouping and its children, prefixing error messages with path
func (_gbac *CT_Grouping) ValidateWithPath(path string) error {
	if _dgdeb := _gbac.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dgdeb != nil {
		return _dgdeb
	}
	return nil
}

// ValidateWithPath validates the CT_RotY and its children, prefixing error messages with path
func (_fffe *CT_RotY) ValidateWithPath(path string) error {
	if _fffe.ValAttr != nil {
		if *_fffe.ValAttr < 0 {
			return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_fffe.ValAttr)
		}
		if *_fffe.ValAttr > 360 {
			return _a.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0033\u0036\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_fffe.ValAttr)
		}
	}
	return nil
}

func (_bgafd ST_Shape) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bbefb := _e.Attr{}
	_bbefb.Name = name
	switch _bgafd {
	case ST_ShapeUnset:
		_bbefb.Value = ""
	case ST_ShapeCone:
		_bbefb.Value = "\u0063\u006f\u006e\u0065"
	case ST_ShapeConeToMax:
		_bbefb.Value = "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case ST_ShapeBox:
		_bbefb.Value = "\u0062\u006f\u0078"
	case ST_ShapeCylinder:
		_bbefb.Value = "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case ST_ShapePyramid:
		_bbefb.Value = "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case ST_ShapePyramidToMax:
		_bbefb.Value = "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return _bbefb, nil
}

type CT_LegendPos struct{ ValAttr ST_LegendPos }

func (_agfe *CT_UpDownBar) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _agfe.SpPr != nil {
		_edbac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_agfe.SpPr, _edbac)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_ScatterSer and its children, prefixing error messages with path
func (_fgeea *CT_ScatterSer) ValidateWithPath(path string) error {
	if _gdcdc := _fgeea.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _gdcdc != nil {
		return _gdcdc
	}
	if _afcff := _fgeea.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _afcff != nil {
		return _afcff
	}
	if _fgeea.Tx != nil {
		if _dfebf := _fgeea.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dfebf != nil {
			return _dfebf
		}
	}
	if _fgeea.SpPr != nil {
		if _ceega := _fgeea.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ceega != nil {
			return _ceega
		}
	}
	if _fgeea.Marker != nil {
		if _bgdf := _fgeea.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _bgdf != nil {
			return _bgdf
		}
	}
	for _eeae, _aecgc := range _fgeea.DPt {
		if _adceb := _aecgc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _eeae)); _adceb != nil {
			return _adceb
		}
	}
	if _fgeea.DLbls != nil {
		if _ccbf := _fgeea.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ccbf != nil {
			return _ccbf
		}
	}
	for _cbceg, _fbfd := range _fgeea.Trendline {
		if _babc := _fbfd.ValidateWithPath(_a.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _cbceg)); _babc != nil {
			return _babc
		}
	}
	for _dcffg, _dbcc := range _fgeea.ErrBars {
		if _geacc := _dbcc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _dcffg)); _geacc != nil {
			return _geacc
		}
	}
	if _fgeea.XVal != nil {
		if _ggcg := _fgeea.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _ggcg != nil {
			return _ggcg
		}
	}
	if _fgeea.YVal != nil {
		if _ffcdc := _fgeea.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _ffcdc != nil {
			return _ffcdc
		}
	}
	if _fgeea.Smooth != nil {
		if _cbcd := _fgeea.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _cbcd != nil {
			return _cbcd
		}
	}
	if _fgeea.ExtLst != nil {
		if _dbea := _fgeea.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dbea != nil {
			return _dbea
		}
	}
	return nil
}

func (_fgdge *CT_SerAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bfba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_fgdge.AxId, _bfba)
	_ebdcg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_fgdge.Scaling, _ebdcg)
	if _fgdge.Delete != nil {
		_dcfgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_fgdge.Delete, _dcfgf)
	}
	_gcbga := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_fgdge.AxPos, _gcbga)
	if _fgdge.MajorGridlines != nil {
		_gada := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fgdge.MajorGridlines, _gada)
	}
	if _fgdge.MinorGridlines != nil {
		_bgdfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_fgdge.MinorGridlines, _bgdfe)
	}
	if _fgdge.Title != nil {
		_affbg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_fgdge.Title, _affbg)
	}
	if _fgdge.NumFmt != nil {
		_efbfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_fgdge.NumFmt, _efbfc)
	}
	if _fgdge.MajorTickMark != nil {
		_bccfc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_fgdge.MajorTickMark, _bccfc)
	}
	if _fgdge.MinorTickMark != nil {
		_ggbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_fgdge.MinorTickMark, _ggbe)
	}
	if _fgdge.TickLblPos != nil {
		_gcbcge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_fgdge.TickLblPos, _gcbcge)
	}
	if _fgdge.SpPr != nil {
		_gcdeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fgdge.SpPr, _gcdeb)
	}
	if _fgdge.TxPr != nil {
		_cfdbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_fgdge.TxPr, _cfdbf)
	}
	_fdgg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_fgdge.CrossAx, _fdgg)
	if _fgdge.Choice != nil {
		_fgdge.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _fgdge.TickLblSkip != nil {
		_bead := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_fgdge.TickLblSkip, _bead)
	}
	if _fgdge.TickMarkSkip != nil {
		_cgbad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_fgdge.TickMarkSkip, _cgbad)
	}
	if _fgdge.ExtLst != nil {
		_gadaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fgdge.ExtLst, _gadaa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_Layout() *CT_Layout { _dbge := &CT_Layout{}; return _dbge }

// Validate validates the CT_AreaSer and its children
func (_fad *CT_AreaSer) Validate() error {
	return _fad.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072")
}

type ST_BuiltInUnit byte

func NewCT_TickLblPos() *CT_TickLblPos { _deaec := &CT_TickLblPos{}; return _deaec }

// ValidateWithPath validates the CT_CatAx and its children, prefixing error messages with path
func (_befa *CT_CatAx) ValidateWithPath(path string) error {
	if _ecea := _befa.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _ecea != nil {
		return _ecea
	}
	if _gcggg := _befa.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _gcggg != nil {
		return _gcggg
	}
	if _befa.Delete != nil {
		if _dbab := _befa.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _dbab != nil {
			return _dbab
		}
	}
	if _afbg := _befa.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _afbg != nil {
		return _afbg
	}
	if _befa.MajorGridlines != nil {
		if _fbdc := _befa.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fbdc != nil {
			return _fbdc
		}
	}
	if _befa.MinorGridlines != nil {
		if _bfa := _befa.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _bfa != nil {
			return _bfa
		}
	}
	if _befa.Title != nil {
		if _eabae := _befa.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _eabae != nil {
			return _eabae
		}
	}
	if _befa.NumFmt != nil {
		if _bcdd := _befa.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _bcdd != nil {
			return _bcdd
		}
	}
	if _befa.MajorTickMark != nil {
		if _fceab := _befa.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _fceab != nil {
			return _fceab
		}
	}
	if _befa.MinorTickMark != nil {
		if _dcbb := _befa.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _dcbb != nil {
			return _dcbb
		}
	}
	if _befa.TickLblPos != nil {
		if _gdcg := _befa.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _gdcg != nil {
			return _gdcg
		}
	}
	if _befa.SpPr != nil {
		if _cde := _befa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cde != nil {
			return _cde
		}
	}
	if _befa.TxPr != nil {
		if _eaee := _befa.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _eaee != nil {
			return _eaee
		}
	}
	if _agca := _befa.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _agca != nil {
		return _agca
	}
	if _befa.Choice != nil {
		if _dcgb := _befa.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dcgb != nil {
			return _dcgb
		}
	}
	if _befa.Auto != nil {
		if _ebeg := _befa.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _ebeg != nil {
			return _ebeg
		}
	}
	if _befa.LblAlgn != nil {
		if _ffdb := _befa.LblAlgn.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u0041\u006c\u0067\u006e"); _ffdb != nil {
			return _ffdb
		}
	}
	if _befa.LblOffset != nil {
		if _afea := _befa.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _afea != nil {
			return _afea
		}
	}
	if _befa.TickLblSkip != nil {
		if _cbc := _befa.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _cbc != nil {
			return _cbc
		}
	}
	if _befa.TickMarkSkip != nil {
		if _bbbd := _befa.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _bbbd != nil {
			return _bbbd
		}
	}
	if _befa.NoMultiLvlLbl != nil {
		if _edge := _befa.NoMultiLvlLbl.ValidateWithPath(path + "\u002f\u004e\u006f\u004d\u0075\u006c\u0074\u0069\u004cv\u006c\u004c\u0062\u006c"); _edge != nil {
			return _edge
		}
	}
	if _befa.ExtLst != nil {
		if _ccba := _befa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ccba != nil {
			return _ccba
		}
	}
	return nil
}

// ValidateWithPath validates the CT_TextLanguageID and its children, prefixing error messages with path
func (_gbacg *CT_TextLanguageID) ValidateWithPath(path string) error { return nil }

func (_dabef *CT_UpDownBar) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fgca:
	for {
		_bdcb, _fadcf := d.Token()
		if _fadcf != nil {
			return _fadcf
		}
		switch _dcedb := _bdcb.(type) {
		case _e.StartElement:
			switch _dcedb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dabef.SpPr = _bb.NewCT_ShapeProperties()
				if _eacgg := d.DecodeElement(_dabef.SpPr, &_dcedb); _eacgg != nil {
					return _eacgg
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_U\u0070\u0044o\u0077\u006e\u0042\u0061\u0072\u0020\u0025\u0076", _dcedb.Name)
				if _dddcc := d.Skip(); _dddcc != nil {
					return _dddcc
				}
			}
		case _e.EndElement:
			break _fgca
		case _e.CharData:
		}
	}
	return nil
}

func (_cbbaa ST_HoleSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cbbaa.ST_HoleSizePercent != nil {
		e.EncodeToken(_e.CharData(*_cbbaa.ST_HoleSizePercent))
	}
	if _cbbaa.ST_HoleSizeUByte != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_cbbaa.ST_HoleSizeUByte)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func NewCT_SerAx() *CT_SerAx {
	_ddcf := &CT_SerAx{}
	_ddcf.AxId = NewCT_UnsignedInt()
	_ddcf.Scaling = NewCT_Scaling()
	_ddcf.AxPos = NewCT_AxPos()
	_ddcf.CrossAx = NewCT_UnsignedInt()
	return _ddcf
}

func (_afga *CT_PlotAreaChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_deabb:
	for {
		_abfcf, _egdff := d.Token()
		if _egdff != nil {
			return _egdff
		}
		switch _ccgbc := _abfcf.(type) {
		case _e.StartElement:
			switch _ccgbc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061r\u0065\u0061\u0043\u0068\u0061\u0072t"}:
				_afga.AreaChart = NewCT_AreaChart()
				if _dgge := d.DecodeElement(_afga.AreaChart, &_ccgbc); _dgge != nil {
					return _dgge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "a\u0072\u0065\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_afga.Area3DChart = NewCT_Area3DChart()
				if _decad := d.DecodeElement(_afga.Area3DChart, &_ccgbc); _decad != nil {
					return _decad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ci\u006e\u0065\u0043\u0068\u0061\u0072t"}:
				_afga.LineChart = NewCT_LineChart()
				if _dafad := d.DecodeElement(_afga.LineChart, &_ccgbc); _dafad != nil {
					return _dafad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0069\u006e\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_afga.Line3DChart = NewCT_Line3DChart()
				if _aebea := d.DecodeElement(_afga.Line3DChart, &_ccgbc); _aebea != nil {
					return _aebea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"}:
				_afga.StockChart = NewCT_StockChart()
				if _bgab := d.DecodeElement(_afga.StockChart, &_ccgbc); _bgab != nil {
					return _bgab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_afga.RadarChart = NewCT_RadarChart()
				if _ddbf := d.DecodeElement(_afga.RadarChart, &_ccgbc); _ddbf != nil {
					return _ddbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_afga.ScatterChart = NewCT_ScatterChart()
				if _gdef := d.DecodeElement(_afga.ScatterChart, &_ccgbc); _gdef != nil {
					return _gdef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_afga.PieChart = NewCT_PieChart()
				if _ebegc := d.DecodeElement(_afga.PieChart, &_ccgbc); _ebegc != nil {
					return _ebegc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_afga.Pie3DChart = NewCT_Pie3DChart()
				if _cbbe := d.DecodeElement(_afga.Pie3DChart, &_ccgbc); _cbbe != nil {
					return _cbbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074"}:
				_afga.DoughnutChart = NewCT_DoughnutChart()
				if _ecec := d.DecodeElement(_afga.DoughnutChart, &_ccgbc); _ecec != nil {
					return _ecec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0043\u0068\u0061\u0072\u0074"}:
				_afga.BarChart = NewCT_BarChart()
				if _fggcf := d.DecodeElement(_afga.BarChart, &_ccgbc); _fggcf != nil {
					return _fggcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"}:
				_afga.Bar3DChart = NewCT_Bar3DChart()
				if _eacad := d.DecodeElement(_afga.Bar3DChart, &_ccgbc); _eacad != nil {
					return _eacad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_afga.OfPieChart = NewCT_OfPieChart()
				if _dabgg := d.DecodeElement(_afga.OfPieChart, &_ccgbc); _dabgg != nil {
					return _dabgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072f\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_afga.SurfaceChart = NewCT_SurfaceChart()
				if _agcbe := d.DecodeElement(_afga.SurfaceChart, &_ccgbc); _agcbe != nil {
					return _agcbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074"}:
				_afga.Surface3DChart = NewCT_Surface3DChart()
				if _acad := d.DecodeElement(_afga.Surface3DChart, &_ccgbc); _acad != nil {
					return _acad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"}:
				_afga.BubbleChart = NewCT_BubbleChart()
				if _bdgec := d.DecodeElement(_afga.BubbleChart, &_ccgbc); _bdgec != nil {
					return _bdgec
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ccgbc.Name)
				if _fbga := d.Skip(); _fbga != nil {
					return _fbga
				}
			}
		case _e.EndElement:
			break _deabb
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_Title() *CT_Title { _fdcd := &CT_Title{}; return _fdcd }

func (_ca *CT_AreaChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ce:
	for {
		_gb, _bea := d.Token()
		if _bea != nil {
			return _bea
		}
		switch _fee := _gb.(type) {
		case _e.StartElement:
			switch _fee.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_ca.Grouping = NewCT_Grouping()
				if _fd := d.DecodeElement(_ca.Grouping, &_fee); _fd != nil {
					return _fd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_ca.VaryColors = NewCT_Boolean()
				if _dbeg := d.DecodeElement(_ca.VaryColors, &_fee); _dbeg != nil {
					return _dbeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bcd := NewCT_AreaSer()
				if _cca := d.DecodeElement(_bcd, &_fee); _cca != nil {
					return _cca
				}
				_ca.Ser = append(_ca.Ser, _bcd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ca.DLbls = NewCT_DLbls()
				if _cae := d.DecodeElement(_ca.DLbls, &_fee); _cae != nil {
					return _cae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_ca.DropLines = NewCT_ChartLines()
				if _fdd := d.DecodeElement(_ca.DropLines, &_fee); _fdd != nil {
					return _fdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_ed := NewCT_UnsignedInt()
				if _cg := d.DecodeElement(_ed, &_fee); _cg != nil {
					return _cg
				}
				_ca.AxId = append(_ca.AxId, _ed)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ca.ExtLst = NewCT_ExtensionList()
				if _dce := d.DecodeElement(_ca.ExtLst, &_fee); _dce != nil {
					return _dce
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_A\u0072\u0065a\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _fee.Name)
				if _acbe := d.Skip(); _acbe != nil {
					return _acbe
				}
			}
		case _e.EndElement:
			break _ce
		case _e.CharData:
		}
	}
	return nil
}

type CT_OfPieChart struct {
	OfPieType     *CT_OfPieType
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	GapWidth      *CT_GapAmount
	SplitType     *CT_SplitType
	SplitPos      *CT_Double
	CustSplit     *CT_CustSplit
	SecondPieSize *CT_SecondPieSize
	SerLines      []*CT_ChartLines
	ExtLst        *CT_ExtensionList
}

func (_dgecd *CT_LogBase) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dgecd.ValAttr = 2
	for _, _bfgdd := range start.Attr {
		if _bfgdd.Name.Local == "\u0076\u0061\u006c" {
			_effd, _gbdc := _bg.ParseFloat(_bfgdd.Value, 64)
			if _gbdc != nil {
				return _gbdc
			}
			_dgecd.ValAttr = _effd
			continue
		}
	}
	for {
		_aaee, _febg := d.Token()
		if _febg != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065\u003a\u0020%\u0073", _febg)
		}
		if _fdcca, _ageae := _aaee.(_e.EndElement); _ageae && _fdcca.Name == start.Name {
			break
		}
	}
	return nil
}

func (_adaf *CT_DispBlanksAs) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dbed := range start.Attr {
		if _dbed.Name.Local == "\u0076\u0061\u006c" {
			_adaf.ValAttr.UnmarshalXMLAttr(_dbed)
			continue
		}
	}
	for {
		_beda, _debgb := d.Token()
		if _debgb != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0042\u006ca\u006e\u006b\u0073A\u0073:\u0020\u0025\u0073", _debgb)
		}
		if _ddebd, _aagd := _beda.(_e.EndElement); _aagd && _ddebd.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_AxisUnit() *CT_AxisUnit { _dbac := &CT_AxisUnit{}; _dbac.ValAttr = 0 + 1; return _dbac }

// ValidateWithPath validates the CT_Area3DChart and its children, prefixing error messages with path
func (_fcf *CT_Area3DChart) ValidateWithPath(path string) error {
	if _fcf.Grouping != nil {
		if _dcf := _fcf.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _dcf != nil {
			return _dcf
		}
	}
	if _fcf.VaryColors != nil {
		if _ccc := _fcf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _ccc != nil {
			return _ccc
		}
	}
	for _dg, _ac := range _fcf.Ser {
		if _ec := _ac.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dg)); _ec != nil {
			return _ec
		}
	}
	if _fcf.DLbls != nil {
		if _bdc := _fcf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _bdc != nil {
			return _bdc
		}
	}
	if _fcf.DropLines != nil {
		if _fa := _fcf.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _fa != nil {
			return _fa
		}
	}
	if _fcf.GapDepth != nil {
		if _dbe := _fcf.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _dbe != nil {
			return _dbe
		}
	}
	for _de, _bcf := range _fcf.AxId {
		if _ag := _bcf.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _de)); _ag != nil {
			return _ag
		}
	}
	if _fcf.ExtLst != nil {
		if _bgg := _fcf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bgg != nil {
			return _bgg
		}
	}
	return nil
}

func (_edgcg *CT_Tx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_edgcg.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ValAx and its children
func (_bcdb *CT_ValAx) Validate() error {
	return _bcdb.ValidateWithPath("\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078")
}

func NewCT_NumDataSource() *CT_NumDataSource {
	_abecg := &CT_NumDataSource{}
	_abecg.Choice = NewCT_NumDataSourceChoice()
	return _abecg
}

// Validate validates the CT_BandFmts and its children
func (_bga *CT_BandFmts) Validate() error {
	return _bga.ValidateWithPath("C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073")
}

func (_ccgce ST_RadarStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_afdgbb := _e.Attr{}
	_afdgbb.Name = name
	switch _ccgce {
	case ST_RadarStyleUnset:
		_afdgbb.Value = ""
	case ST_RadarStyleStandard:
		_afdgbb.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_RadarStyleMarker:
		_afdgbb.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_RadarStyleFilled:
		_afdgbb.Value = "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return _afdgbb, nil
}

func (_eacg *CT_RotY) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ffbcc := range start.Attr {
		if _ffbcc.Name.Local == "\u0076\u0061\u006c" {
			_gdecf, _bebea := _bg.ParseUint(_ffbcc.Value, 10, 16)
			if _bebea != nil {
				return _bebea
			}
			_ebdf := uint16(_gdecf)
			_eacg.ValAttr = &_ebdf
			continue
		}
	}
	for {
		_egfad, _caaf := d.Token()
		if _caaf != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0059\u003a\u0020\u0025\u0073", _caaf)
		}
		if _beecc, _fafd := _egfad.(_e.EndElement); _fafd && _beecc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_NumRef struct {
	F        string
	NumCache *CT_NumData
	ExtLst   *CT_ExtensionList
}

func (_dcdg *CT_BarDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcdg.ValAttr != ST_BarDirUnset {
		_eaec, _acbc := _dcdg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _acbc != nil {
			return _acbc
		}
		start.Attr = append(start.Attr, _eaec)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

var ST_HoleSizePercentPatternRe = _b.MustCompile(ST_HoleSizePercentPattern)

func (_fdbdd *ST_BubbleScale) ValidateWithPath(path string) error {
	_edaccb := []string{}
	if _fdbdd.ST_BubbleScalePercent != nil {
		_edaccb = append(_edaccb, "S\u0054\u005f\u0042\u0075bb\u006ce\u0053\u0063\u0061\u006c\u0065P\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _fdbdd.ST_BubbleScaleUInt != nil {
		_edaccb = append(_edaccb, "\u0053T\u005fB\u0075\u0062\u0062\u006c\u0065S\u0063\u0061l\u0065\u0055\u0049\u006e\u0074")
	}
	if len(_edaccb) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _edaccb)
	}
	return nil
}

type CT_TickMark struct{ ValAttr ST_TickMark }

func NewCT_PlotAreaChoice() *CT_PlotAreaChoice { _ebfbe := &CT_PlotAreaChoice{}; return _ebfbe }

// ValidateWithPath validates the CT_SurfaceSer and its children, prefixing error messages with path
func (_gbdcf *CT_SurfaceSer) ValidateWithPath(path string) error {
	if _egbc := _gbdcf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _egbc != nil {
		return _egbc
	}
	if _eeba := _gbdcf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _eeba != nil {
		return _eeba
	}
	if _gbdcf.Tx != nil {
		if _gacb := _gbdcf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gacb != nil {
			return _gacb
		}
	}
	if _gbdcf.SpPr != nil {
		if _fdgf := _gbdcf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fdgf != nil {
			return _fdgf
		}
	}
	if _gbdcf.Cat != nil {
		if _bacag := _gbdcf.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _bacag != nil {
			return _bacag
		}
	}
	if _gbdcf.Val != nil {
		if _agcg := _gbdcf.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _agcg != nil {
			return _agcg
		}
	}
	if _gbdcf.ExtLst != nil {
		if _dddgd := _gbdcf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dddgd != nil {
			return _dddgd
		}
	}
	return nil
}

func (_dgggc *CT_SecondPieSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dgggc.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_dgggc.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_MarkerStyle() *CT_MarkerStyle {
	_edda := &CT_MarkerStyle{}
	_edda.ValAttr = ST_MarkerStyle(1)
	return _edda
}

type CT_Tx struct{ Choice *CT_TxChoice }

func (_fecb *CT_OfPieChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fecb.OfPieType = NewCT_OfPieType()
_ffbbbf:
	for {
		_fegfa, _fbgdd := d.Token()
		if _fbgdd != nil {
			return _fbgdd
		}
		switch _aebaf := _fegfa.(type) {
		case _e.StartElement:
			switch _aebaf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ff\u0050\u0069\u0065\u0054\u0079\u0070e"}:
				if _gcfc := d.DecodeElement(_fecb.OfPieType, &_aebaf); _gcfc != nil {
					return _gcfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_fecb.VaryColors = NewCT_Boolean()
				if _baca := d.DecodeElement(_fecb.VaryColors, &_aebaf); _baca != nil {
					return _baca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aeefg := NewCT_PieSer()
				if _gcfaa := d.DecodeElement(_aeefg, &_aebaf); _gcfaa != nil {
					return _gcfaa
				}
				_fecb.Ser = append(_fecb.Ser, _aeefg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fecb.DLbls = NewCT_DLbls()
				if _eefbe := d.DecodeElement(_fecb.DLbls, &_aebaf); _eefbe != nil {
					return _eefbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_fecb.GapWidth = NewCT_GapAmount()
				if _bfbb := d.DecodeElement(_fecb.GapWidth, &_aebaf); _bfbb != nil {
					return _bfbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073p\u006c\u0069\u0074\u0054\u0079\u0070e"}:
				_fecb.SplitType = NewCT_SplitType()
				if _gccff := d.DecodeElement(_fecb.SplitType, &_aebaf); _gccff != nil {
					return _gccff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}:
				_fecb.SplitPos = NewCT_Double()
				if _cgfb := d.DecodeElement(_fecb.SplitPos, &_aebaf); _cgfb != nil {
					return _cgfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063u\u0073\u0074\u0053\u0070\u006c\u0069t"}:
				_fecb.CustSplit = NewCT_CustSplit()
				if _cgbc := d.DecodeElement(_fecb.CustSplit, &_aebaf); _cgbc != nil {
					return _cgbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}:
				_fecb.SecondPieSize = NewCT_SecondPieSize()
				if _cbdg := d.DecodeElement(_fecb.SecondPieSize, &_aebaf); _cbdg != nil {
					return _cbdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_cdcad := NewCT_ChartLines()
				if _gfabe := d.DecodeElement(_cdcad, &_aebaf); _gfabe != nil {
					return _gfabe
				}
				_fecb.SerLines = append(_fecb.SerLines, _cdcad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fecb.ExtLst = NewCT_ExtensionList()
				if _daeafb := d.DecodeElement(_fecb.ExtLst, &_aebaf); _daeafb != nil {
					return _daeafb
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004ff\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _aebaf.Name)
				if _aacf := d.Skip(); _aacf != nil {
					return _aacf
				}
			}
		case _e.EndElement:
			break _ffbbbf
		case _e.CharData:
		}
	}
	return nil
}

var ST_SecondPieSizePercentPatternRe = _b.MustCompile(ST_SecondPieSizePercentPattern)

type ST_LayoutMode byte

func NewCT_SurfaceChart() *CT_SurfaceChart { _fbgc := &CT_SurfaceChart{}; return _fbgc }

func (_ffgb *CT_CrossBetween) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_gcfa, _cfc := _ffgb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _cfc != nil {
		return _cfc
	}
	start.Attr = append(start.Attr, _gcfa)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_AxDataSource and its children, prefixing error messages with path
func (_aef *CT_AxDataSource) ValidateWithPath(path string) error {
	if _aaa := _aef.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _aaa != nil {
		return _aaa
	}
	return nil
}

func (_gffeg *ST_ErrDir) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gffeg = 0
	case "\u0078":
		*_gffeg = 1
	case "\u0079":
		*_gffeg = 2
	}
	return nil
}

// Validate validates the CT_TimeUnit and its children
func (_gbbd *CT_TimeUnit) Validate() error {
	return _gbbd.ValidateWithPath("C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074")
}

// Validate validates the CT_PivotSource and its children
func (_aeacf *CT_PivotSource) Validate() error {
	return _aeacf.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065")
}

func (_fgdbb *CT_MarkerStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgdbb.ValAttr = ST_MarkerStyle(1)
	for _, _dddd := range start.Attr {
		if _dddd.Name.Local == "\u0076\u0061\u006c" {
			_fgdbb.ValAttr.UnmarshalXMLAttr(_dddd)
			continue
		}
	}
	for {
		_bdcg, _ddgf := d.Token()
		if _ddgf != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fM\u0061\u0072\u006b\u0065\u0072\u0053\u0074\u0079\u006c\u0065:\u0020\u0025\u0073", _ddgf)
		}
		if _adbad, _adeg := _bdcg.(_e.EndElement); _adeg && _adbad.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_BarChart() *CT_BarChart {
	_fefd := &CT_BarChart{}
	_fefd.BarDir = NewCT_BarDir()
	return _fefd
}

type CT_DepthPercent struct{ ValAttr *ST_DepthPercent }

// Validate validates the CT_UnsignedInt and its children
func (_egad *CT_UnsignedInt) Validate() error {
	return _egad.ValidateWithPath("\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074")
}

func (_dbbf *CT_DTable) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dbbf.ShowHorzBorder != nil {
		_ecef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077H\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_dbbf.ShowHorzBorder, _ecef)
	}
	if _dbbf.ShowVertBorder != nil {
		_ddef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077V\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_dbbf.ShowVertBorder, _ddef)
	}
	if _dbbf.ShowOutline != nil {
		_bbbge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"}}
		e.EncodeElement(_dbbf.ShowOutline, _bbbge)
	}
	if _dbbf.ShowKeys != nil {
		_aecfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004b\u0065\u0079\u0073"}}
		e.EncodeElement(_dbbf.ShowKeys, _aecfa)
	}
	if _dbbf.SpPr != nil {
		_baed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dbbf.SpPr, _baed)
	}
	if _dbbf.TxPr != nil {
		_eded := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_dbbf.TxPr, _eded)
	}
	if _dbbf.ExtLst != nil {
		_eadd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dbbf.ExtLst, _eadd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const (
	ST_LegendPosUnset ST_LegendPos = 0
	ST_LegendPosB     ST_LegendPos = 1
	ST_LegendPosTr    ST_LegendPos = 2
	ST_LegendPosL     ST_LegendPos = 3
	ST_LegendPosR     ST_LegendPos = 4
	ST_LegendPosT     ST_LegendPos = 5
)

func (_badag ST_TickLblPos) ValidateWithPath(path string) error {
	switch _badag {
	case 0, 1, 2, 3, 4:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_badag))
	}
	return nil
}

// Validate validates the CT_Lvl and its children
func (_fgded *CT_Lvl) Validate() error {
	return _fgded.ValidateWithPath("\u0043\u0054\u005f\u004c\u0076\u006c")
}

func NewCT_NumFmt() *CT_NumFmt { _afeg := &CT_NumFmt{}; return _afeg }

// ValidateWithPath validates the CT_LayoutMode and its children, prefixing error messages with path
func (_fafc *CT_LayoutMode) ValidateWithPath(path string) error {
	if _dcag := _fafc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dcag != nil {
		return _dcag
	}
	return nil
}

func (_cagg *CT_TrendlineType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fbeb := range start.Attr {
		if _fbeb.Name.Local == "\u0076\u0061\u006c" {
			_cagg.ValAttr.UnmarshalXMLAttr(_fbeb)
			continue
		}
	}
	for {
		_gadc, _ddbeg := d.Token()
		if _ddbeg != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0072\u0065\u006ed\u006ci\u006e\u0065\u0054\u0079\u0070\u0065\u003a \u0025\u0073", _ddbeg)
		}
		if _bbdga, _fgbgge := _gadc.(_e.EndElement); _fgbgge && _bbdga.Name == start.Name {
			break
		}
	}
	return nil
}

func _bbgbg(_fffce bool) uint8 {
	if _fffce {
		return 1
	}
	return 0
}

func (_fbb *CT_AxisUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _fbb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TxChoice and its children, prefixing error messages with path
func (_ddfaa *CT_TxChoice) ValidateWithPath(path string) error {
	if _ddfaa.StrRef != nil {
		if _fcef := _ddfaa.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _fcef != nil {
			return _fcef
		}
	}
	if _ddfaa.Rich != nil {
		if _bgdbd := _ddfaa.Rich.ValidateWithPath(path + "\u002f\u0052\u0069c\u0068"); _bgdbd != nil {
			return _bgdbd
		}
	}
	return nil
}

func (_affca ST_Thickness) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _affca.ST_ThicknessPercent != nil {
		e.EncodeToken(_e.CharData(*_affca.ST_ThicknessPercent))
	}
	if _affca.Uint32 != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_affca.Uint32)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_agdeg *CT_LegendEntry) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_agdeg.Idx = NewCT_UnsignedInt()
_gcaaa:
	for {
		_dbfd, _daag := d.Token()
		if _daag != nil {
			return _daag
		}
		switch _bbbaa := _dbfd.(type) {
		case _e.StartElement:
			switch _bbbaa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _fcgd := d.DecodeElement(_agdeg.Idx, &_bbbaa); _fcgd != nil {
					return _fcgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _agdeg.Choice == nil {
					_agdeg.Choice = NewCT_LegendEntryChoice()
				}
				if _aaeb := d.DecodeElement(&_agdeg.Choice.Delete, &_bbbaa); _aaeb != nil {
					return _aaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _agdeg.Choice == nil {
					_agdeg.Choice = NewCT_LegendEntryChoice()
				}
				if _geff := d.DecodeElement(&_agdeg.Choice.TxPr, &_bbbaa); _geff != nil {
					return _geff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_agdeg.ExtLst = NewCT_ExtensionList()
				if _bgaf := d.DecodeElement(_agdeg.ExtLst, &_bbbaa); _bgaf != nil {
					return _bgaf
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045n\u0074r\u0079\u0020\u0025\u0076", _bbbaa.Name)
				if _bbffg := d.Skip(); _bbffg != nil {
					return _bbffg
				}
			}
		case _e.EndElement:
			break _gcaaa
		case _e.CharData:
		}
	}
	return nil
}

func (_cdac *CT_DPt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gdfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_cdac.Idx, _gdfd)
	if _cdac.InvertIfNegative != nil {
		_ebbg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_cdac.InvertIfNegative, _ebbg)
	}
	if _cdac.Marker != nil {
		_caebc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_cdac.Marker, _caebc)
	}
	if _cdac.Bubble3D != nil {
		_agaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_cdac.Bubble3D, _agaa)
	}
	if _cdac.Explosion != nil {
		_ccaab := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0065\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"}}
		e.EncodeElement(_cdac.Explosion, _ccaab)
	}
	if _cdac.SpPr != nil {
		_cgfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cdac.SpPr, _cgfa)
	}
	if _cdac.PictureOptions != nil {
		_gbfda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_cdac.PictureOptions, _gbfda)
	}
	if _cdac.ExtLst != nil {
		_dgce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cdac.ExtLst, _dgce)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type ST_Crosses byte

func (_cgaee *CT_TimeUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cgaee.ValAttr != ST_TimeUnitUnset {
		_aaag, _cadf := _cgaee.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _cadf != nil {
			return _cadf
		}
		start.Attr = append(start.Attr, _aaag)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cebe *CT_BubbleSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cebe.Idx = NewCT_UnsignedInt()
	_cebe.Order = NewCT_UnsignedInt()
_faaf:
	for {
		_egga, _dgc := d.Token()
		if _dgc != nil {
			return _dgc
		}
		switch _acdb := _egga.(type) {
		case _e.StartElement:
			switch _acdb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _dbace := d.DecodeElement(_cebe.Idx, &_acdb); _dbace != nil {
					return _dbace
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _gad := d.DecodeElement(_cebe.Order, &_acdb); _gad != nil {
					return _gad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cebe.Tx = NewCT_SerTx()
				if _aacg := d.DecodeElement(_cebe.Tx, &_acdb); _aacg != nil {
					return _aacg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cebe.SpPr = _bb.NewCT_ShapeProperties()
				if _daf := d.DecodeElement(_cebe.SpPr, &_acdb); _daf != nil {
					return _daf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_cebe.InvertIfNegative = NewCT_Boolean()
				if _eggb := d.DecodeElement(_cebe.InvertIfNegative, &_acdb); _eggb != nil {
					return _eggb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_eggg := NewCT_DPt()
				if _caea := d.DecodeElement(_eggg, &_acdb); _caea != nil {
					return _caea
				}
				_cebe.DPt = append(_cebe.DPt, _eggg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_cebe.DLbls = NewCT_DLbls()
				if _gedd := d.DecodeElement(_cebe.DLbls, &_acdb); _gedd != nil {
					return _gedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_deef := NewCT_Trendline()
				if _eccgb := d.DecodeElement(_deef, &_acdb); _eccgb != nil {
					return _eccgb
				}
				_cebe.Trendline = append(_cebe.Trendline, _deef)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_afcb := NewCT_ErrBars()
				if _agcfd := d.DecodeElement(_afcb, &_acdb); _agcfd != nil {
					return _agcfd
				}
				_cebe.ErrBars = append(_cebe.ErrBars, _afcb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_cebe.XVal = NewCT_AxDataSource()
				if _daaec := d.DecodeElement(_cebe.XVal, &_acdb); _daaec != nil {
					return _daaec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_cebe.YVal = NewCT_NumDataSource()
				if _fbcd := d.DecodeElement(_cebe.YVal, &_acdb); _fbcd != nil {
					return _fbcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_cebe.BubbleSize = NewCT_NumDataSource()
				if _bbff := d.DecodeElement(_cebe.BubbleSize, &_acdb); _bbff != nil {
					return _bbff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_cebe.Bubble3D = NewCT_Boolean()
				if _aebf := d.DecodeElement(_cebe.Bubble3D, &_acdb); _aebf != nil {
					return _aebf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cebe.ExtLst = NewCT_ExtensionList()
				if _eebc := d.DecodeElement(_cebe.ExtLst, &_acdb); _eebc != nil {
					return _eebc
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_B\u0075\u0062b\u006c\u0065\u0053\u0065\u0072\u0020\u0025\u0076", _acdb.Name)
				if _fbfa := d.Skip(); _fbfa != nil {
					return _fbfa
				}
			}
		case _e.EndElement:
			break _faaf
		case _e.CharData:
		}
	}
	return nil
}

type ST_OfPieType byte

func (_gfbac *CT_Skip) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gfbac.ValAttr = 1
	for _, _dgbgb := range start.Attr {
		if _dgbgb.Name.Local == "\u0076\u0061\u006c" {
			_dgcd, _cddd := _bg.ParseUint(_dgbgb.Value, 10, 32)
			if _cddd != nil {
				return _cddd
			}
			_gfbac.ValAttr = uint32(_dgcd)
			continue
		}
	}
	for {
		_dagf, _ababb := d.Token()
		if _ababb != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0053\u006b\u0069\u0070\u003a\u0020\u0025\u0073", _ababb)
		}
		if _afbfg, _dedg := _dagf.(_e.EndElement); _dedg && _afbfg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bebaf *ST_PageSetupOrientation) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bebaf = 0
	case "\u0064e\u0066\u0061\u0075\u006c\u0074":
		*_bebaf = 1
	case "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074":
		*_bebaf = 2
	case "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e":
		*_bebaf = 3
	}
	return nil
}

func NewCT_OfPieChart() *CT_OfPieChart {
	_gfagf := &CT_OfPieChart{}
	_gfagf.OfPieType = NewCT_OfPieType()
	return _gfagf
}

// ValidateWithPath validates the CT_ManualLayout and its children, prefixing error messages with path
func (_ffgg *CT_ManualLayout) ValidateWithPath(path string) error {
	if _ffgg.LayoutTarget != nil {
		if _fdfg := _ffgg.LayoutTarget.ValidateWithPath(path + "\u002f\u004c\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"); _fdfg != nil {
			return _fdfg
		}
	}
	if _ffgg.XMode != nil {
		if _dgbb := _ffgg.XMode.ValidateWithPath(path + "\u002f\u0058\u004d\u006f\u0064\u0065"); _dgbb != nil {
			return _dgbb
		}
	}
	if _ffgg.YMode != nil {
		if _bceda := _ffgg.YMode.ValidateWithPath(path + "\u002f\u0059\u004d\u006f\u0064\u0065"); _bceda != nil {
			return _bceda
		}
	}
	if _ffgg.WMode != nil {
		if _ffecg := _ffgg.WMode.ValidateWithPath(path + "\u002f\u0057\u004d\u006f\u0064\u0065"); _ffecg != nil {
			return _ffecg
		}
	}
	if _ffgg.HMode != nil {
		if _aeaaf := _ffgg.HMode.ValidateWithPath(path + "\u002f\u0048\u004d\u006f\u0064\u0065"); _aeaaf != nil {
			return _aeaaf
		}
	}
	if _ffgg.X != nil {
		if _eabdd := _ffgg.X.ValidateWithPath(path + "\u002f\u0058"); _eabdd != nil {
			return _eabdd
		}
	}
	if _ffgg.Y != nil {
		if _agcdf := _ffgg.Y.ValidateWithPath(path + "\u002f\u0059"); _agcdf != nil {
			return _agcdf
		}
	}
	if _ffgg.W != nil {
		if _fegag := _ffgg.W.ValidateWithPath(path + "\u002f\u0057"); _fegag != nil {
			return _fegag
		}
	}
	if _ffgg.H != nil {
		if _addg := _ffgg.H.ValidateWithPath(path + "\u002f\u0048"); _addg != nil {
			return _addg
		}
	}
	if _ffgg.ExtLst != nil {
		if _ggaad := _ffgg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ggaad != nil {
			return _ggaad
		}
	}
	return nil
}

func (_fdbaf *CT_DLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bbde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_fdbaf.Idx, _bbde)
	if _fdbaf.Choice != nil {
		_fdbaf.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _fdbaf.ExtLst != nil {
		_fdgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fdbaf.ExtLst, _fdgd)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_PieChart() *CT_PieChart { _caebg := &CT_PieChart{}; return _caebg }

// ValidateWithPath validates the CT_PieChart and its children, prefixing error messages with path
func (_fccf *CT_PieChart) ValidateWithPath(path string) error {
	if _fccf.VaryColors != nil {
		if _egabc := _fccf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _egabc != nil {
			return _egabc
		}
	}
	for _dgadb, _cefc := range _fccf.Ser {
		if _faag := _cefc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dgadb)); _faag != nil {
			return _faag
		}
	}
	if _fccf.DLbls != nil {
		if _afcac := _fccf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _afcac != nil {
			return _afcac
		}
	}
	if _fccf.FirstSliceAng != nil {
		if _dabg := _fccf.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _dabg != nil {
			return _dabg
		}
	}
	if _fccf.ExtLst != nil {
		if _eefd := _fccf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _eefd != nil {
			return _eefd
		}
	}
	return nil
}

func (_fggd ST_PictureFormat) Validate() error { return _fggd.ValidateWithPath("") }

func (_aadb ST_BarDir) String() string {
	switch _aadb {
	case 0:
		return ""
	case 1:
		return "\u0062\u0061\u0072"
	case 2:
		return "\u0063\u006f\u006c"
	}
	return ""
}

func (_dgb *CT_AxDataSourceChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dgb.MultiLvlStrRef != nil {
		_bbbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0075\u006c\u0074i\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_dgb.MultiLvlStrRef, _bbbg)
	}
	if _dgb.NumRef != nil {
		_eccf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0052\u0065\u0066"}}
		e.EncodeElement(_dgb.NumRef, _eccf)
	}
	if _dgb.NumLit != nil {
		_eef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u004c\u0069\u0074"}}
		e.EncodeElement(_dgb.NumLit, _eef)
	}
	if _dgb.StrRef != nil {
		_fdcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_dgb.StrRef, _fdcg)
	}
	if _dgb.StrLit != nil {
		_fdcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u004c\u0069\u0074"}}
		e.EncodeElement(_dgb.StrLit, _fdcc)
	}
	return nil
}

// Validate validates the CT_SerAx and its children
func (_bageb *CT_SerAx) Validate() error {
	return _bageb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078")
}

func (_gggce *CT_RotX) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gggce.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_gggce.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_DispUnitsChoice() *CT_DispUnitsChoice { _cceg := &CT_DispUnitsChoice{}; return _cceg }

func (_fgbc *CT_DispUnitsChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cgcfc:
	for {
		_ggaae, _caed := d.Token()
		if _caed != nil {
			return _caed
		}
		switch _cagag := _ggaae.(type) {
		case _e.StartElement:
			switch _cagag.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_fgbc.CustUnit = NewCT_Double()
				if _aaadb := d.DecodeElement(_fgbc.CustUnit, &_cagag); _aaadb != nil {
					return _aaadb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_fgbc.BuiltInUnit = NewCT_BuiltInUnit()
				if _eadf := d.DecodeElement(_fgbc.BuiltInUnit, &_cagag); _eadf != nil {
					return _eadf
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073\u0070\u0055\u006ei\u0074\u0073\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _cagag.Name)
				if _dbgc := d.Skip(); _dbgc != nil {
					return _dbgc
				}
			}
		case _e.EndElement:
			break _cgcfc
		case _e.CharData:
		}
	}
	return nil
}

func (_adeba ST_TrendlineType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_cccbeg := _e.Attr{}
	_cccbeg.Name = name
	switch _adeba {
	case ST_TrendlineTypeUnset:
		_cccbeg.Value = ""
	case ST_TrendlineTypeExp:
		_cccbeg.Value = "\u0065\u0078\u0070"
	case ST_TrendlineTypeLinear:
		_cccbeg.Value = "\u006c\u0069\u006e\u0065\u0061\u0072"
	case ST_TrendlineTypeLog:
		_cccbeg.Value = "\u006c\u006f\u0067"
	case ST_TrendlineTypeMovingAvg:
		_cccbeg.Value = "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case ST_TrendlineTypePoly:
		_cccbeg.Value = "\u0070\u006f\u006c\u0079"
	case ST_TrendlineTypePower:
		_cccbeg.Value = "\u0070\u006f\u0077e\u0072"
	}
	return _cccbeg, nil
}

func NewCT_Line3DChart() *CT_Line3DChart {
	_gebc := &CT_Line3DChart{}
	_gebc.Grouping = NewCT_Grouping()
	return _gebc
}

func NewCT_TextLanguageID() *CT_TextLanguageID { _gceaa := &CT_TextLanguageID{}; return _gceaa }

func NewCT_BuiltInUnit() *CT_BuiltInUnit { _bacg := &CT_BuiltInUnit{}; return _bacg }

// Validate validates the EG_AreaChartShared and its children
func (_eeded *EG_AreaChartShared) Validate() error {
	return _eeded.ValidateWithPath("\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}

func (_gefabg *CT_NumFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _a.Sprintf("\u0025\u0076", _gefabg.FormatCodeAttr)})
	if _gefabg.SourceLinkedAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0073\u006f\u0075r\u0063\u0065\u004c\u0069\u006e\u006b\u0065\u0064"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_gefabg.SourceLinkedAttr))})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cefe ST_SplitType) ValidateWithPath(path string) error {
	switch _cefe {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cefe))
	}
	return nil
}

// Validate validates the CT_Shape and its children
func (_geda *CT_Shape) Validate() error {
	return _geda.ValidateWithPath("\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065")
}

func (_cagdg *CT_Title) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_egdbb:
	for {
		_ddfae, _eaffag := d.Token()
		if _eaffag != nil {
			return _eaffag
		}
		switch _cebef := _ddfae.(type) {
		case _e.StartElement:
			switch _cebef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_cagdg.Tx = NewCT_Tx()
				if _efccd := d.DecodeElement(_cagdg.Tx, &_cebef); _efccd != nil {
					return _efccd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_cagdg.Layout = NewCT_Layout()
				if _ggcdc := d.DecodeElement(_cagdg.Layout, &_cebef); _ggcdc != nil {
					return _ggcdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_cagdg.Overlay = NewCT_Boolean()
				if _gbbcg := d.DecodeElement(_cagdg.Overlay, &_cebef); _gbbcg != nil {
					return _gbbcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cagdg.SpPr = _bb.NewCT_ShapeProperties()
				if _fcafb := d.DecodeElement(_cagdg.SpPr, &_cebef); _fcafb != nil {
					return _fcafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cagdg.TxPr = _bb.NewCT_TextBody()
				if _gcaag := d.DecodeElement(_cagdg.TxPr, &_cebef); _gcaag != nil {
					return _gcaag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cagdg.ExtLst = NewCT_ExtensionList()
				if _gdcc := d.DecodeElement(_cagdg.ExtLst, &_cebef); _gdcc != nil {
					return _gdcc
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065\u0020\u0025\u0076", _cebef.Name)
				if _agbae := d.Skip(); _agbae != nil {
					return _agbae
				}
			}
		case _e.EndElement:
			break _egdbb
		case _e.CharData:
		}
	}
	return nil
}

func (_bddaf *CT_DLbls) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bddaf.DLbl != nil {
		_bbce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		for _, _gdae := range _bddaf.DLbl {
			e.EncodeElement(_gdae, _bbce)
		}
	}
	if _bddaf.Choice != nil {
		_bddaf.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _bddaf.ExtLst != nil {
		_cfge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bddaf.ExtLst, _cfge)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PivotSource and its children, prefixing error messages with path
func (_fgbe *CT_PivotSource) ValidateWithPath(path string) error {
	if _dffgb := _fgbe.FmtId.ValidateWithPath(path + "\u002f\u0046\u006d\u0074\u0049\u0064"); _dffgb != nil {
		return _dffgb
	}
	for _fcbbe, _bdba := range _fgbe.ExtLst {
		if _cfbec := _bdba.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u0078\u0074\u004c\u0073\u0074\u005b\u0025\u0064\u005d", path, _fcbbe)); _cfbec != nil {
			return _cfbec
		}
	}
	return nil
}

func (_gcfgg *CT_Trendline) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gcfgg.Name != nil {
		_bbgba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
		_g.AddPreserveSpaceAttr(&_bbgba, *_gcfgg.Name)
		e.EncodeElement(_gcfgg.Name, _bbgba)
	}
	if _gcfgg.SpPr != nil {
		_abgca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gcfgg.SpPr, _abgca)
	}
	_gdgce := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074r\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_gcfgg.TrendlineType, _gdgce)
	if _gcfgg.Order != nil {
		_abfgc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
		e.EncodeElement(_gcfgg.Order, _abfgc)
	}
	if _gcfgg.Period != nil {
		_agbfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0069\u006f\u0064"}}
		e.EncodeElement(_gcfgg.Period, _agbfg)
	}
	if _gcfgg.Forward != nil {
		_cedf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006f\u0072\u0077\u0061\u0072d"}}
		e.EncodeElement(_gcfgg.Forward, _cedf)
	}
	if _gcfgg.Backward != nil {
		_afgdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}}
		e.EncodeElement(_gcfgg.Backward, _afgdb)
	}
	if _gcfgg.Intercept != nil {
		_ebgca := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0069\u006e\u0074\u0065\u0072\u0063\u0065\u0070\u0074"}}
		e.EncodeElement(_gcfgg.Intercept, _ebgca)
	}
	if _gcfgg.DispRSqr != nil {
		_dgefg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}}
		e.EncodeElement(_gcfgg.DispRSqr, _dgefg)
	}
	if _gcfgg.DispEq != nil {
		_cfgeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0045\u0071"}}
		e.EncodeElement(_gcfgg.DispEq, _cfgeg)
	}
	if _gcfgg.TrendlineLbl != nil {
		_affba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069n\u0065\u004c\u0062\u006c"}}
		e.EncodeElement(_gcfgg.TrendlineLbl, _affba)
	}
	if _gcfgg.ExtLst != nil {
		_aegg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcfgg.ExtLst, _aegg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_LayoutTarget and its children, prefixing error messages with path
func (_gfee *CT_LayoutTarget) ValidateWithPath(path string) error {
	if _fgfe := _gfee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _fgfe != nil {
		return _fgfe
	}
	return nil
}

type CT_SerAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	ExtLst         *CT_ExtensionList
}

func (_degbg ST_CrossBetween) Validate() error { return _degbg.ValidateWithPath("") }

// Validate validates the CT_Double and its children
func (_cddb *CT_Double) Validate() error {
	return _cddb.ValidateWithPath("\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce")
}

func (_afbad *CT_Title) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _afbad.Tx != nil {
		_ggacg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_afbad.Tx, _ggacg)
	}
	if _afbad.Layout != nil {
		_cfgff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_afbad.Layout, _cfgff)
	}
	if _afbad.Overlay != nil {
		_fcaaf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_afbad.Overlay, _fcaaf)
	}
	if _afbad.SpPr != nil {
		_acfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_afbad.SpPr, _acfb)
	}
	if _afbad.TxPr != nil {
		_afffa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_afbad.TxPr, _afffa)
	}
	if _afbad.ExtLst != nil {
		_cbega := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_afbad.ExtLst, _cbega)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ggcc *CT_TickMark) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _caged := range start.Attr {
		if _caged.Name.Local == "\u0076\u0061\u006c" {
			_ggcc.ValAttr.UnmarshalXMLAttr(_caged)
			continue
		}
	}
	for {
		_faeea, _agab := d.Token()
		if _agab != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u003a\u0020\u0025\u0073", _agab)
		}
		if _cdbe, _gcbd := _faeea.(_e.EndElement); _gcbd && _cdbe.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PlotAreaChoice1 and its children
func (_facbba *CT_PlotAreaChoice1) Validate() error {
	return _facbba.ValidateWithPath("\u0043T\u005fP\u006c\u006f\u0074\u0041\u0072e\u0061\u0043h\u006f\u0069\u0063\u0065\u0031")
}

func (_daa *CT_BandFmts) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ffb:
	for {
		_fcc, _gdd := d.Token()
		if _gdd != nil {
			return _gdd
		}
		switch _gbcg := _fcc.(type) {
		case _e.StartElement:
			switch _gbcg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062a\u006e\u0064\u0046\u006d\u0074"}:
				_feab := NewCT_BandFmt()
				if _fgc := d.DecodeElement(_feab, &_gbcg); _fgc != nil {
					return _fgc
				}
				_daa.BandFmt = append(_daa.BandFmt, _feab)
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073\u0020\u0025\u0076", _gbcg.Name)
				if _debg := d.Skip(); _debg != nil {
					return _debg
				}
			}
		case _e.EndElement:
			break _ffb
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_DispUnitsChoice and its children
func (_cfef *CT_DispUnitsChoice) Validate() error {
	return _cfef.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0055\u006ei\u0074\u0073C\u0068\u006f\u0069\u0063\u0065")
}

// Validate validates the Group_DLbls and its children
func (_gdad *Group_DLbls) Validate() error {
	return _gdad.ValidateWithPath("G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073")
}

type ST_MarkerStyle byte

func (_geec ST_LayoutTarget) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bcaaea := _e.Attr{}
	_bcaaea.Name = name
	switch _geec {
	case ST_LayoutTargetUnset:
		_bcaaea.Value = ""
	case ST_LayoutTargetInner:
		_bcaaea.Value = "\u0069\u006e\u006ee\u0072"
	case ST_LayoutTargetOuter:
		_bcaaea.Value = "\u006f\u0075\u0074e\u0072"
	}
	return _bcaaea, nil
}

func NewCT_MultiLvlStrRef() *CT_MultiLvlStrRef { _ccbg := &CT_MultiLvlStrRef{}; return _ccbg }

func (_bddabe *ST_DispBlanksAs) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cdbadb, _ggccb := d.Token()
	if _ggccb != nil {
		return _ggccb
	}
	if _cfafd, _fecdf := _cdbadb.(_e.EndElement); _fecdf && _cfafd.Name == start.Name {
		*_bddabe = 1
		return nil
	}
	if _gddabc, _cbbfg := _cdbadb.(_e.CharData); !_cbbfg {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cdbadb)
	} else {
		switch string(_gddabc) {
		case "":
			*_bddabe = 0
		case "\u0073\u0070\u0061\u006e":
			*_bddabe = 1
		case "\u0067\u0061\u0070":
			*_bddabe = 2
		case "\u007a\u0065\u0072\u006f":
			*_bddabe = 3
		}
	}
	_cdbadb, _ggccb = d.Token()
	if _ggccb != nil {
		return _ggccb
	}
	if _dbdfc, _agcbf := _cdbadb.(_e.EndElement); _agcbf && _dbdfc.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cdbadb)
}

func (_bedg ST_ScatterStyle) String() string {
	switch _bedg {
	case 0:
		return ""
	case 1:
		return "\u006e\u006f\u006e\u0065"
	case 2:
		return "\u006c\u0069\u006e\u0065"
	case 3:
		return "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case 4:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 5:
		return "\u0073\u006d\u006f\u006f\u0074\u0068"
	case 6:
		return "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return ""
}

func NewCT_PivotFmt() *CT_PivotFmt {
	_dbebf := &CT_PivotFmt{}
	_dbebf.Idx = NewCT_UnsignedInt()
	return _dbebf
}

type CT_GapAmount struct{ ValAttr *ST_GapAmount }

func (_afbee *ST_BarDir) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_afbee = 0
	case "\u0062\u0061\u0072":
		*_afbee = 1
	case "\u0063\u006f\u006c":
		*_afbee = 2
	}
	return nil
}

// ValidateWithPath validates the CT_Skip and its children, prefixing error messages with path
func (_cgbeg *CT_Skip) ValidateWithPath(path string) error {
	if _cgbeg.ValAttr < 1 {
		return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0031\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _cgbeg.ValAttr)
	}
	return nil
}

type CT_BandFmt struct {
	Idx  *CT_UnsignedInt
	SpPr *_bb.CT_ShapeProperties
}

type CT_PlotArea struct {
	Layout  *CT_Layout
	Choice  []*CT_PlotAreaChoice
	CChoice *CT_PlotAreaChoice1
	DTable  *CT_DTable
	SpPr    *_bb.CT_ShapeProperties
	ExtLst  *CT_ExtensionList
}

func NewCT_LayoutMode() *CT_LayoutMode { _dgfbc := &CT_LayoutMode{}; return _dgfbc }

// Validate validates the CT_MultiLvlStrData and its children
func (_bfgfc *CT_MultiLvlStrData) Validate() error {
	return _bfgfc.ValidateWithPath("\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061")
}

// ValidateWithPath validates the CT_DTable and its children, prefixing error messages with path
func (_bdfc *CT_DTable) ValidateWithPath(path string) error {
	if _bdfc.ShowHorzBorder != nil {
		if _bgag := _bdfc.ShowHorzBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0048\u006f\u0072\u007a\u0042\u006f\u0072\u0064\u0065\u0072"); _bgag != nil {
			return _bgag
		}
	}
	if _bdfc.ShowVertBorder != nil {
		if _eec := _bdfc.ShowVertBorder.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0056\u0065\u0072\u0074\u0042\u006f\u0072\u0064\u0065\u0072"); _eec != nil {
			return _eec
		}
	}
	if _bdfc.ShowOutline != nil {
		if _gccd := _bdfc.ShowOutline.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u004f\u0075\u0074\u006c\u0069\u006e\u0065"); _gccd != nil {
			return _gccd
		}
	}
	if _bdfc.ShowKeys != nil {
		if _ddfa := _bdfc.ShowKeys.ValidateWithPath(path + "\u002fS\u0068\u006f\u0077\u004b\u0065\u0079s"); _ddfa != nil {
			return _ddfa
		}
	}
	if _bdfc.SpPr != nil {
		if _ebfbb := _bdfc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ebfbb != nil {
			return _ebfbb
		}
	}
	if _bdfc.TxPr != nil {
		if _ebde := _bdfc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ebde != nil {
			return _ebde
		}
	}
	if _bdfc.ExtLst != nil {
		if _cffe := _bdfc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cffe != nil {
			return _cffe
		}
	}
	return nil
}

type ST_LblAlgn byte

type CT_LegendEntryChoice struct {
	Delete *CT_Boolean
	TxPr   *_bb.CT_TextBody
}

func (_ccaac *ST_TickMark) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eefaa, _fceeac := d.Token()
	if _fceeac != nil {
		return _fceeac
	}
	if _dfbac, _dcgd := _eefaa.(_e.EndElement); _dcgd && _dfbac.Name == start.Name {
		*_ccaac = 1
		return nil
	}
	if _gcgdg, _gddfa := _eefaa.(_e.CharData); !_gddfa {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eefaa)
	} else {
		switch string(_gcgdg) {
		case "":
			*_ccaac = 0
		case "\u0063\u0072\u006fs\u0073":
			*_ccaac = 1
		case "\u0069\u006e":
			*_ccaac = 2
		case "\u006e\u006f\u006e\u0065":
			*_ccaac = 3
		case "\u006f\u0075\u0074":
			*_ccaac = 4
		}
	}
	_eefaa, _fceeac = d.Token()
	if _fceeac != nil {
		return _fceeac
	}
	if _adebaf, _gbga := _eefaa.(_e.EndElement); _gbga && _adebaf.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eefaa)
}

func (_bdaeg *Group_DLbls) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bdaeg.NumFmt != nil {
		_cbege := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bdaeg.NumFmt, _cbege)
	}
	if _bdaeg.SpPr != nil {
		_bacbgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bdaeg.SpPr, _bacbgd)
	}
	if _bdaeg.TxPr != nil {
		_fgda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bdaeg.TxPr, _fgda)
	}
	if _bdaeg.DLblPos != nil {
		_abccf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_bdaeg.DLblPos, _abccf)
	}
	if _bdaeg.ShowLegendKey != nil {
		_cgfcd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_bdaeg.ShowLegendKey, _cgfcd)
	}
	if _bdaeg.ShowVal != nil {
		_efegc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_bdaeg.ShowVal, _efegc)
	}
	if _bdaeg.ShowCatName != nil {
		_deeea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bdaeg.ShowCatName, _deeea)
	}
	if _bdaeg.ShowSerName != nil {
		_edag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_bdaeg.ShowSerName, _edag)
	}
	if _bdaeg.ShowPercent != nil {
		_bbecd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_bdaeg.ShowPercent, _bbecd)
	}
	if _bdaeg.ShowBubbleSize != nil {
		_cgedc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_bdaeg.ShowBubbleSize, _cgedc)
	}
	if _bdaeg.Separator != nil {
		_fcad := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_g.AddPreserveSpaceAttr(&_fcad, *_bdaeg.Separator)
		e.EncodeElement(_bdaeg.Separator, _fcad)
	}
	if _bdaeg.ShowLeaderLines != nil {
		_fgefc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u004c\u0065\u0061\u0064\u0065\u0072L\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bdaeg.ShowLeaderLines, _fgefc)
	}
	if _bdaeg.LeaderLines != nil {
		_gefdc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_bdaeg.LeaderLines, _gefdc)
	}
	return nil
}

// Validate validates the CT_StrVal and its children
func (_beeba *CT_StrVal) Validate() error {
	return _beeba.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l")
}

func (_fbadg ST_AxPos) ValidateWithPath(path string) error {
	switch _fbadg {
	case 0, 1, 2, 3, 4:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fbadg))
	}
	return nil
}

func (_bfcfd ST_ErrValType) Validate() error { return _bfcfd.ValidateWithPath("") }

func (_acag *CT_HeaderFooter) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dabfe := range start.Attr {
		if _dabfe.Name.Local == "\u0061\u006ci\u0067\u006e\u0057i\u0074\u0068\u004d\u0061\u0072\u0067\u0069\u006e\u0073" {
			_gdfa, _cdcaa := _bg.ParseBool(_dabfe.Value)
			if _cdcaa != nil {
				return _cdcaa
			}
			_acag.AlignWithMarginsAttr = &_gdfa
			continue
		}
		if _dabfe.Name.Local == "\u0064\u0069f\u0066\u0065\u0072e\u006e\u0074\u004f\u0064\u0064\u0045\u0076\u0065\u006e" {
			_cbee, _decc := _bg.ParseBool(_dabfe.Value)
			if _decc != nil {
				return _decc
			}
			_acag.DifferentOddEvenAttr = &_cbee
			continue
		}
		if _dabfe.Name.Local == "\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074F\u0069\u0072\u0073\u0074" {
			_aabe, _dace := _bg.ParseBool(_dabfe.Value)
			if _dace != nil {
				return _dace
			}
			_acag.DifferentFirstAttr = &_aabe
			continue
		}
	}
_cced:
	for {
		_ebba, _cfda := d.Token()
		if _cfda != nil {
			return _cfda
		}
		switch _dgfbe := _ebba.(type) {
		case _e.StartElement:
			switch _dgfbe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0048\u0065\u0061\u0064\u0065r"}:
				_acag.OddHeader = new(string)
				if _gdcd := d.DecodeElement(_acag.OddHeader, &_dgfbe); _gdcd != nil {
					return _gdcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fd\u0064\u0046\u006f\u006f\u0074\u0065r"}:
				_acag.OddFooter = new(string)
				if _dacf := d.DecodeElement(_acag.OddFooter, &_dgfbe); _dacf != nil {
					return _dacf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_acag.EvenHeader = new(string)
				if _ccfg := d.DecodeElement(_acag.EvenHeader, &_dgfbe); _ccfg != nil {
					return _ccfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0076\u0065\u006e\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_acag.EvenFooter = new(string)
				if _bgge := d.DecodeElement(_acag.EvenFooter, &_dgfbe); _bgge != nil {
					return _bgge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0048\u0065\u0061\u0064\u0065\u0072"}:
				_acag.FirstHeader = new(string)
				if _cbaf := d.DecodeElement(_acag.FirstHeader, &_dgfbe); _cbaf != nil {
					return _cbaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "f\u0069\u0072\u0073\u0074\u0046\u006f\u006f\u0074\u0065\u0072"}:
				_acag.FirstFooter = new(string)
				if _cgef := d.DecodeElement(_acag.FirstFooter, &_dgfbe); _cgef != nil {
					return _cgef
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0048\u0065\u0061d\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072\u0020\u0025\u0076", _dgfbe.Name)
				if _eefff := d.Skip(); _eefff != nil {
					return _eefff
				}
			}
		case _e.EndElement:
			break _cced
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_TickMarkUnset ST_TickMark = 0
	ST_TickMarkCross ST_TickMark = 1
	ST_TickMarkIn    ST_TickMark = 2
	ST_TickMarkNone  ST_TickMark = 3
	ST_TickMarkOut   ST_TickMark = 4
)

func (_abb *CT_Crosses) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_ecgc, _edee := _abb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _edee != nil {
		return _edee
	}
	start.Attr = append(start.Attr, _ecgc)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Pie3DChart struct {
	VaryColors *CT_Boolean
	Ser        []*CT_PieSer
	DLbls      *CT_DLbls
	ExtLst     *CT_ExtensionList
}

func (_cgdbf *ST_Crosses) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_faebf, _edafe := d.Token()
	if _edafe != nil {
		return _edafe
	}
	if _fabcf, _gggcef := _faebf.(_e.EndElement); _gggcef && _fabcf.Name == start.Name {
		*_cgdbf = 1
		return nil
	}
	if _dcacf, _ceaea := _faebf.(_e.CharData); !_ceaea {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _faebf)
	} else {
		switch string(_dcacf) {
		case "":
			*_cgdbf = 0
		case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
			*_cgdbf = 1
		case "\u006d\u0061\u0078":
			*_cgdbf = 2
		case "\u006d\u0069\u006e":
			*_cgdbf = 3
		}
	}
	_faebf, _edafe = d.Token()
	if _edafe != nil {
		return _edafe
	}
	if _debba, _fcbdf := _faebf.(_e.EndElement); _fcbdf && _debba.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _faebf)
}

// Validate validates the CT_NumRef and its children
func (_cgdd *CT_NumRef) Validate() error {
	return _cgdd.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f")
}

func (_aecdc *CT_LegendEntryChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eaac:
	for {
		_ebagb, _gebe := d.Token()
		if _gebe != nil {
			return _gebe
		}
		switch _fdbb := _ebagb.(type) {
		case _e.StartElement:
			switch _fdbb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_aecdc.Delete = NewCT_Boolean()
				if _eeef := d.DecodeElement(_aecdc.Delete, &_fdbb); _eeef != nil {
					return _eeef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_aecdc.TxPr = _bb.NewCT_TextBody()
				if _bffed := d.DecodeElement(_aecdc.TxPr, &_fdbb); _bffed != nil {
					return _bffed
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070o\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006de\u006et \u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fdbb.Name)
				if _bcfbc := d.Skip(); _bcfbc != nil {
					return _bcfbc
				}
			}
		case _e.EndElement:
			break _eaac
		case _e.CharData:
		}
	}
	return nil
}

func (_fdfb *CT_TrendlineType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fdfb.ValAttr != ST_TrendlineTypeUnset {
		_gecbc, _ffbcde := _fdfb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ffbcde != nil {
			return _ffbcde
		}
		start.Attr = append(start.Attr, _gecbc)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_UnsignedInt() *CT_UnsignedInt { _dcgbd := &CT_UnsignedInt{}; return _dcgbd }

func (_ffdc *CT_StrData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fdeb:
	for {
		_fbfbbc, _cdcagc := d.Token()
		if _cdcagc != nil {
			return _cdcagc
		}
		switch _ffcf := _fbfbbc.(type) {
		case _e.StartElement:
			switch _ffcf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_ffdc.PtCount = NewCT_UnsignedInt()
				if _ccfaf := d.DecodeElement(_ffdc.PtCount, &_ffcf); _ccfaf != nil {
					return _ccfaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_aeffef := NewCT_StrVal()
				if _bcba := d.DecodeElement(_aeffef, &_ffcf); _bcba != nil {
					return _bcba
				}
				_ffdc.Pt = append(_ffdc.Pt, _aeffef)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ffdc.ExtLst = NewCT_ExtensionList()
				if _gbcc := d.DecodeElement(_ffdc.ExtLst, &_ffcf); _gbcc != nil {
					return _gbcc
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fS\u0074\u0072\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _ffcf.Name)
				if _decadd := d.Skip(); _decadd != nil {
					return _decadd
				}
			}
		case _e.EndElement:
			break _fdeb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DispUnits and its children, prefixing error messages with path
func (_cgecb *CT_DispUnits) ValidateWithPath(path string) error {
	if _cgecb.Choice != nil {
		if _dgga := _cgecb.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dgga != nil {
			return _dgga
		}
	}
	if _cgecb.DispUnitsLbl != nil {
		if _bffe := _cgecb.DispUnitsLbl.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"); _bffe != nil {
			return _bffe
		}
	}
	if _cgecb.ExtLst != nil {
		if _bagf := _cgecb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bagf != nil {
			return _bagf
		}
	}
	return nil
}

type EG_AxShared struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
}

// ValidateWithPath validates the CT_ErrDir and its children, prefixing error messages with path
func (_ffba *CT_ErrDir) ValidateWithPath(path string) error {
	if _ffba.ValAttr == ST_ErrDirUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _afd := _ffba.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _afd != nil {
		return _afd
	}
	return nil
}

func NewEG_AxShared() *EG_AxShared {
	_bfafg := &EG_AxShared{}
	_bfafg.AxId = NewCT_UnsignedInt()
	_bfafg.Scaling = NewCT_Scaling()
	_bfafg.AxPos = NewCT_AxPos()
	_bfafg.CrossAx = NewCT_UnsignedInt()
	return _bfafg
}

func (_acfef ST_PictureFormat) String() string {
	switch _acfef {
	case 0:
		return ""
	case 1:
		return "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case 2:
		return "\u0073\u0074\u0061c\u006b"
	case 3:
		return "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return ""
}

func NewCT_DateAx() *CT_DateAx {
	_bfdae := &CT_DateAx{}
	_bfdae.AxId = NewCT_UnsignedInt()
	_bfdae.Scaling = NewCT_Scaling()
	_bfdae.AxPos = NewCT_AxPos()
	_bfdae.CrossAx = NewCT_UnsignedInt()
	return _bfdae
}

func (_dba *CT_AreaChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dba.Grouping != nil {
		_ffa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_dba.Grouping, _ffa)
	}
	if _dba.VaryColors != nil {
		_da := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dba.VaryColors, _da)
	}
	if _dba.Ser != nil {
		_agg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _agc := range _dba.Ser {
			e.EncodeElement(_agc, _agg)
		}
	}
	if _dba.DLbls != nil {
		_bca := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dba.DLbls, _bca)
	}
	if _dba.DropLines != nil {
		_acb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_dba.DropLines, _acb)
	}
	_gga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bf := range _dba.AxId {
		e.EncodeElement(_bf, _gga)
	}
	if _dba.ExtLst != nil {
		_ga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dba.ExtLst, _ga)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TrendlineLbl and its children, prefixing error messages with path
func (_dbabd *CT_TrendlineLbl) ValidateWithPath(path string) error {
	if _dbabd.Layout != nil {
		if _efgda := _dbabd.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _efgda != nil {
			return _efgda
		}
	}
	if _dbabd.Tx != nil {
		if _gggba := _dbabd.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gggba != nil {
			return _gggba
		}
	}
	if _dbabd.NumFmt != nil {
		if _aaeeg := _dbabd.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _aaeeg != nil {
			return _aaeeg
		}
	}
	if _dbabd.SpPr != nil {
		if _adaac := _dbabd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _adaac != nil {
			return _adaac
		}
	}
	if _dbabd.TxPr != nil {
		if _abdaa := _dbabd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _abdaa != nil {
			return _abdaa
		}
	}
	if _dbabd.ExtLst != nil {
		if _gfacc := _dbabd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gfacc != nil {
			return _gfacc
		}
	}
	return nil
}

type CT_RadarChart struct {
	RadarStyle *CT_RadarStyle
	VaryColors *CT_Boolean
	Ser        []*CT_RadarSer
	DLbls      *CT_DLbls
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_eafg *CT_DLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_bbbfb, _acdc := _eafg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _acdc != nil {
		return _acdc
	}
	start.Attr = append(start.Attr, _bbbfb)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_PrintSettings struct {
	HeaderFooter    *CT_HeaderFooter
	PageMargins     *CT_PageMargins
	PageSetup       *CT_PageSetup
	LegacyDrawingHF *CT_RelId
}

type CT_CatAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblAlgn        *CT_LblAlgn
	LblOffset      *CT_LblOffset
	TickLblSkip    *CT_Skip
	TickMarkSkip   *CT_Skip
	NoMultiLvlLbl  *CT_Boolean
	ExtLst         *CT_ExtensionList
}

func (_affgb ST_PageSetupOrientation) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gcgcf := _e.Attr{}
	_gcgcf.Name = name
	switch _affgb {
	case ST_PageSetupOrientationUnset:
		_gcgcf.Value = ""
	case ST_PageSetupOrientationDefault:
		_gcgcf.Value = "\u0064e\u0066\u0061\u0075\u006c\u0074"
	case ST_PageSetupOrientationPortrait:
		_gcgcf.Value = "\u0070\u006f\u0072\u0074\u0072\u0061\u0069\u0074"
	case ST_PageSetupOrientationLandscape:
		_gcgcf.Value = "\u006ca\u006e\u0064\u0073\u0063\u0061\u0070e"
	}
	return _gcgcf, nil
}

func NewCT_CatAx() *CT_CatAx {
	_ebgd := &CT_CatAx{}
	_ebgd.AxId = NewCT_UnsignedInt()
	_ebgd.Scaling = NewCT_Scaling()
	_ebgd.AxPos = NewCT_AxPos()
	_ebgd.CrossAx = NewCT_UnsignedInt()
	return _ebgd
}

type CT_Skip struct{ ValAttr uint32 }

type CT_UnsignedInt struct{ ValAttr uint32 }

// Validate validates the CT_TrendlineLbl and its children
func (_faaef *CT_TrendlineLbl) Validate() error {
	return _faaef.ValidateWithPath("\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c")
}

// Validate validates the CT_Skip and its children
func (_ecead *CT_Skip) Validate() error {
	return _ecead.ValidateWithPath("\u0043T\u005f\u0053\u006b\u0069\u0070")
}

// ValidateWithPath validates the CT_SecondPieSize and its children, prefixing error messages with path
func (_fcfae *CT_SecondPieSize) ValidateWithPath(path string) error {
	if _fcfae.ValAttr != nil {
		if _abbf := _fcfae.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _abbf != nil {
			return _abbf
		}
	}
	return nil
}

func (_ba *CT_Area3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ba.Grouping != nil {
		_fc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_ba.Grouping, _fc)
	}
	if _ba.VaryColors != nil {
		_gg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ba.VaryColors, _gg)
	}
	if _ba.Ser != nil {
		_bd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bc := range _ba.Ser {
			e.EncodeElement(_bc, _bd)
		}
	}
	if _ba.DLbls != nil {
		_fce := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ba.DLbls, _fce)
	}
	if _ba.DropLines != nil {
		_fe := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ba.DropLines, _fe)
	}
	if _ba.GapDepth != nil {
		_cc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_ba.GapDepth, _cc)
	}
	_ggg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _cce := range _ba.AxId {
		e.EncodeElement(_cce, _ggg)
	}
	if _ba.ExtLst != nil {
		_bee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ba.ExtLst, _bee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type EG_SurfaceChartShared struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
}

func (_ddcg *CT_Period) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfag := range start.Attr {
		if _dfag.Name.Local == "\u0076\u0061\u006c" {
			_bgfdd, _beabb := _bg.ParseUint(_dfag.Value, 10, 32)
			if _beabb != nil {
				return _beabb
			}
			_cafe := uint32(_bgfdd)
			_ddcg.ValAttr = &_cafe
			continue
		}
	}
	for {
		_cggbe, _ccebf := d.Token()
		if _ccebf != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0050\u0065\u0072i\u006f\u0064\u003a\u0020\u0025\u0073", _ccebf)
		}
		if _cecc, _gcaab := _cggbe.(_e.EndElement); _gcaab && _cecc.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Line3DChart and its children, prefixing error messages with path
func (_adad *CT_Line3DChart) ValidateWithPath(path string) error {
	if _gdde := _adad.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _gdde != nil {
		return _gdde
	}
	if _adad.VaryColors != nil {
		if _becf := _adad.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _becf != nil {
			return _becf
		}
	}
	for _gfbdg, _cabcc := range _adad.Ser {
		if _eadca := _cabcc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gfbdg)); _eadca != nil {
			return _eadca
		}
	}
	if _adad.DLbls != nil {
		if _gaffa := _adad.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gaffa != nil {
			return _gaffa
		}
	}
	if _adad.DropLines != nil {
		if _bagg := _adad.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _bagg != nil {
			return _bagg
		}
	}
	if _adad.GapDepth != nil {
		if _gfcb := _adad.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _gfcb != nil {
			return _gfcb
		}
	}
	for _bagab, _ddeg := range _adad.AxId {
		if _gcfg := _ddeg.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _bagab)); _gcfg != nil {
			return _gcfg
		}
	}
	if _adad.ExtLst != nil {
		if _gdagc := _adad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gdagc != nil {
			return _gdagc
		}
	}
	return nil
}

// Validate validates the CT_Orientation and its children
func (_faeg *CT_Orientation) Validate() error {
	return _faeg.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e")
}

// ValidateWithPath validates the CT_BubbleSer and its children, prefixing error messages with path
func (_effg *CT_BubbleSer) ValidateWithPath(path string) error {
	if _bgec := _effg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bgec != nil {
		return _bgec
	}
	if _ddeab := _effg.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _ddeab != nil {
		return _ddeab
	}
	if _effg.Tx != nil {
		if _afaa := _effg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _afaa != nil {
			return _afaa
		}
	}
	if _effg.SpPr != nil {
		if _afbe := _effg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afbe != nil {
			return _afbe
		}
	}
	if _effg.InvertIfNegative != nil {
		if _eaba := _effg.InvertIfNegative.ValidateWithPath(path + "\u002f\u0049\u006e\u0076\u0065\u0072\u0074\u0049\u0066\u004e\u0065\u0067a\u0074\u0069\u0076\u0065"); _eaba != nil {
			return _eaba
		}
	}
	for _dddcb, _abd := range _effg.DPt {
		if _cdb := _abd.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _dddcb)); _cdb != nil {
			return _cdb
		}
	}
	if _effg.DLbls != nil {
		if _caa := _effg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _caa != nil {
			return _caa
		}
	}
	for _cbfa, _afba := range _effg.Trendline {
		if _bbbb := _afba.ValidateWithPath(_a.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _cbfa)); _bbbb != nil {
			return _bbbb
		}
	}
	for _eaecb, _cbd := range _effg.ErrBars {
		if _fdbe := _cbd.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _eaecb)); _fdbe != nil {
			return _fdbe
		}
	}
	if _effg.XVal != nil {
		if _cgdc := _effg.XVal.ValidateWithPath(path + "\u002f\u0058\u0056a\u006c"); _cgdc != nil {
			return _cgdc
		}
	}
	if _effg.YVal != nil {
		if _afbf := _effg.YVal.ValidateWithPath(path + "\u002f\u0059\u0056a\u006c"); _afbf != nil {
			return _afbf
		}
	}
	if _effg.BubbleSize != nil {
		if _edgb := _effg.BubbleSize.ValidateWithPath(path + "/\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _edgb != nil {
			return _edgb
		}
	}
	if _effg.Bubble3D != nil {
		if _daff := _effg.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _daff != nil {
			return _daff
		}
	}
	if _effg.ExtLst != nil {
		if _ggc := _effg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ggc != nil {
			return _ggc
		}
	}
	return nil
}

func (_eccd *CT_Lvl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_edae:
	for {
		_gggb, _aaafa := d.Token()
		if _aaafa != nil {
			return _aaafa
		}
		switch _ecadg := _gggb.(type) {
		case _e.StartElement:
			switch _ecadg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_cbgf := NewCT_StrVal()
				if _eaddc := d.DecodeElement(_cbgf, &_ecadg); _eaddc != nil {
					return _eaddc
				}
				_eccd.Pt = append(_eccd.Pt, _cbgf)
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0076\u006c\u0020\u0025\u0076", _ecadg.Name)
				if _fedgb := d.Skip(); _fedgb != nil {
					return _fedgb
				}
			}
		case _e.EndElement:
			break _edae
		case _e.CharData:
		}
	}
	return nil
}

type CT_SurfaceChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

const (
	ST_TimeUnitUnset  ST_TimeUnit = 0
	ST_TimeUnitDays   ST_TimeUnit = 1
	ST_TimeUnitMonths ST_TimeUnit = 2
	ST_TimeUnitYears  ST_TimeUnit = 3
)

// ValidateWithPath validates the CT_Double and its children, prefixing error messages with path
func (_ffafa *CT_Double) ValidateWithPath(path string) error { return nil }

func (_bcbca *ST_TimeUnit) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bcbca = 0
	case "\u0064\u0061\u0079\u0073":
		*_bcbca = 1
	case "\u006d\u006f\u006e\u0074\u0068\u0073":
		*_bcbca = 2
	case "\u0079\u0065\u0061r\u0073":
		*_bcbca = 3
	}
	return nil
}

func (_daeae *CT_UnsignedInt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _daeae.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_TrendlineType() *CT_TrendlineType { _cfcb := &CT_TrendlineType{}; return _cfcb }

func NewCT_DLblPos() *CT_DLblPos { _dcee := &CT_DLblPos{}; _dcee.ValAttr = ST_DLblPos(1); return _dcee }

func (_baegb ST_CrossBetween) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_baegb.String(), start)
}

type CT_TickLblPos struct{ ValAttr ST_TickLblPos }

func (_cfeg *ST_MarkerStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_abcca, _deaae := d.Token()
	if _deaae != nil {
		return _deaae
	}
	if _ccbgae, _bcfdd := _abcca.(_e.EndElement); _bcfdd && _ccbgae.Name == start.Name {
		*_cfeg = 1
		return nil
	}
	if _cfgd, _gegg := _abcca.(_e.CharData); !_gegg {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _abcca)
	} else {
		switch string(_cfgd) {
		case "":
			*_cfeg = 0
		case "\u0063\u0069\u0072\u0063\u006c\u0065":
			*_cfeg = 1
		case "\u0064\u0061\u0073\u0068":
			*_cfeg = 2
		case "\u0064i\u0061\u006d\u006f\u006e\u0064":
			*_cfeg = 3
		case "\u0064\u006f\u0074":
			*_cfeg = 4
		case "\u006e\u006f\u006e\u0065":
			*_cfeg = 5
		case "\u0070i\u0063\u0074\u0075\u0072\u0065":
			*_cfeg = 6
		case "\u0070\u006c\u0075\u0073":
			*_cfeg = 7
		case "\u0073\u0071\u0075\u0061\u0072\u0065":
			*_cfeg = 8
		case "\u0073\u0074\u0061\u0072":
			*_cfeg = 9
		case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
			*_cfeg = 10
		case "\u0078":
			*_cfeg = 11
		case "\u0061\u0075\u0074\u006f":
			*_cfeg = 12
		}
	}
	_abcca, _deaae = d.Token()
	if _deaae != nil {
		return _deaae
	}
	if _cdgda, _cfcac := _abcca.(_e.EndElement); _cfcac && _cdgda.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _abcca)
}

func (_fcecc *ST_LegendPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fcecc = 0
	case "\u0062":
		*_fcecc = 1
	case "\u0074\u0072":
		*_fcecc = 2
	case "\u006c":
		*_fcecc = 3
	case "\u0072":
		*_fcecc = 4
	case "\u0074":
		*_fcecc = 5
	}
	return nil
}

// Validate validates the CT_DispBlanksAs and its children
func (_debd *CT_DispBlanksAs) Validate() error {
	return _debd.ValidateWithPath("\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073")
}

func (_bbecdf ST_DLblPos) String() string {
	switch _bbecdf {
	case 0:
		return ""
	case 1:
		return "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case 2:
		return "\u0062"
	case 3:
		return "\u0063\u0074\u0072"
	case 4:
		return "\u0069\u006e\u0042\u0061\u0073\u0065"
	case 5:
		return "\u0069\u006e\u0045n\u0064"
	case 6:
		return "\u006c"
	case 7:
		return "\u006f\u0075\u0074\u0045\u006e\u0064"
	case 8:
		return "\u0072"
	case 9:
		return "\u0074"
	}
	return ""
}

func (_eeegf ST_BarDir) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_eeegf.String(), start)
}

func (_dfffc *CT_TimeUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dbdgge := range start.Attr {
		if _dbdgge.Name.Local == "\u0076\u0061\u006c" {
			_dfffc.ValAttr.UnmarshalXMLAttr(_dbdgge)
			continue
		}
	}
	for {
		_babdd, _dfcfdf := d.Token()
		if _dfcfdf != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _dfcfdf)
		}
		if _agaad, _cccbg := _babdd.(_e.EndElement); _cccbg && _agaad.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_LineChart() *CT_LineChart {
	_eagbb := &CT_LineChart{}
	_eagbb.Grouping = NewCT_Grouping()
	return _eagbb
}

type CT_Marker struct {
	Symbol *CT_MarkerStyle
	Size   *CT_MarkerSize
	SpPr   *_bb.CT_ShapeProperties
	ExtLst *CT_ExtensionList
}

func (_fbae *CT_Shape) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fbae.ValAttr != ST_ShapeUnset {
		_fbdcb, _affbc := _fbae.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _affbc != nil {
			return _affbc
		}
		start.Attr = append(start.Attr, _fbdcb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cfefb *CT_TxChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cegeg:
	for {
		_fgcg, _eebf := d.Token()
		if _eebf != nil {
			return _eebf
		}
		switch _bcac := _fgcg.(type) {
		case _e.StartElement:
			switch _bcac.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_cfefb.StrRef = NewCT_StrRef()
				if _beadb := d.DecodeElement(_cfefb.StrRef, &_bcac); _beadb != nil {
					return _beadb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0069\u0063\u0068"}:
				_cfefb.Rich = _bb.NewCT_TextBody()
				if _cbgca := d.DecodeElement(_cfefb.Rich, &_bcac); _cbgca != nil {
					return _cbgca
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bcac.Name)
				if _bgae := d.Skip(); _bgae != nil {
					return _bgae
				}
			}
		case _e.EndElement:
			break _cegeg
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_RotY() *CT_RotY { _cbeeg := &CT_RotY{}; return _cbeeg }

func (_bebd *ST_Overlap) ValidateWithPath(path string) error {
	_abea := []string{}
	if _bebd.ST_OverlapPercent != nil {
		_abea = append(_abea, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u0050\u0065r\u0063\u0065\u006e\u0074")
	}
	if _bebd.ST_OverlapByte != nil {
		_abea = append(_abea, "\u0053\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061p\u0042\u0079\u0074\u0065")
	}
	if len(_abea) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _abea)
	}
	return nil
}

// ValidateWithPath validates the CT_RotX and its children, prefixing error messages with path
func (_fdgb *CT_RotX) ValidateWithPath(path string) error {
	if _fdgb.ValAttr != nil {
		if *_fdgb.ValAttr < -90 {
			return _a.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003e\u003d\u0020\u002d\u0039\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_fdgb.ValAttr)
		}
		if *_fdgb.ValAttr > 90 {
			return _a.Errorf("\u0025\u0073/m\u002e\u0056\u0061l\u0041\u0074\u0074\u0072 mu\u0073t \u0062\u0065\u0020\u003c\u003d\u0020\u00390 \u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_fdgb.ValAttr)
		}
	}
	return nil
}

func (_gabf *CT_PageMargins) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dgdab := range start.Attr {
		if _dgdab.Name.Local == "\u006c" {
			_afcf, _cbfb := _bg.ParseFloat(_dgdab.Value, 64)
			if _cbfb != nil {
				return _cbfb
			}
			_gabf.LAttr = _afcf
			continue
		}
		if _dgdab.Name.Local == "\u0072" {
			_abgf, _fgdbe := _bg.ParseFloat(_dgdab.Value, 64)
			if _fgdbe != nil {
				return _fgdbe
			}
			_gabf.RAttr = _abgf
			continue
		}
		if _dgdab.Name.Local == "\u0074" {
			_afec, _eaffa := _bg.ParseFloat(_dgdab.Value, 64)
			if _eaffa != nil {
				return _eaffa
			}
			_gabf.TAttr = _afec
			continue
		}
		if _dgdab.Name.Local == "\u0062" {
			_egdc, _dceb := _bg.ParseFloat(_dgdab.Value, 64)
			if _dceb != nil {
				return _dceb
			}
			_gabf.BAttr = _egdc
			continue
		}
		if _dgdab.Name.Local == "\u0068\u0065\u0061\u0064\u0065\u0072" {
			_cbbd, _bfgb := _bg.ParseFloat(_dgdab.Value, 64)
			if _bfgb != nil {
				return _bfgb
			}
			_gabf.HeaderAttr = _cbbd
			continue
		}
		if _dgdab.Name.Local == "\u0066\u006f\u006f\u0074\u0065\u0072" {
			_fggab, _eada := _bg.ParseFloat(_dgdab.Value, 64)
			if _eada != nil {
				return _eada
			}
			_gabf.FooterAttr = _fggab
			continue
		}
	}
	for {
		_ebbcb, _aedgb := d.Token()
		if _aedgb != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0061\u0067\u0065\u004d\u0061\u0072\u0067\u0069\u006e\u0073:\u0020\u0025\u0073", _aedgb)
		}
		if _agdb, _gbbgd := _ebbcb.(_e.EndElement); _gbbgd && _agdb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_fcfaf *CT_PlotAreaChoice1) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gbgbe:
	for {
		_bdgff, _bacga := d.Token()
		if _bacga != nil {
			return _bacga
		}
		switch _daagb := _bdgff.(type) {
		case _e.StartElement:
			switch _daagb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006cA\u0078"}:
				_ffcgd := NewCT_ValAx()
				if _bcfed := d.DecodeElement(_ffcgd, &_daagb); _bcfed != nil {
					return _bcfed
				}
				_fcfaf.ValAx = append(_fcfaf.ValAx, _ffcgd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074A\u0078"}:
				_gbdf := NewCT_CatAx()
				if _fadae := d.DecodeElement(_gbdf, &_daagb); _fadae != nil {
					return _fadae
				}
				_fcfaf.CatAx = append(_fcfaf.CatAx, _gbdf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0041\u0078"}:
				_ggdge := NewCT_DateAx()
				if _cbbec := d.DecodeElement(_ggdge, &_daagb); _cbbec != nil {
					return _cbbec
				}
				_fcfaf.DateAx = append(_fcfaf.DateAx, _ggdge)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072A\u0078"}:
				_afef := NewCT_SerAx()
				if _bgdc := d.DecodeElement(_afef, &_daagb); _bgdc != nil {
					return _bgdc
				}
				_fcfaf.SerAx = append(_fcfaf.SerAx, _afef)
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072e\u0061\u0043\u0068\u006f\u0069\u0063\u0065\u0031\u0020\u0025\u0076", _daagb.Name)
				if _cgaae := d.Skip(); _cgaae != nil {
					return _cgaae
				}
			}
		case _e.EndElement:
			break _gbgbe
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PictureOptions and its children, prefixing error messages with path
func (_feead *CT_PictureOptions) ValidateWithPath(path string) error {
	if _feead.ApplyToFront != nil {
		if _ffbg := _feead.ApplyToFront.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"); _ffbg != nil {
			return _ffbg
		}
	}
	if _feead.ApplyToSides != nil {
		if _gbcaef := _feead.ApplyToSides.ValidateWithPath(path + "\u002f\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"); _gbcaef != nil {
			return _gbcaef
		}
	}
	if _feead.ApplyToEnd != nil {
		if _ffaff := _feead.ApplyToEnd.ValidateWithPath(path + "/\u0041\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"); _ffaff != nil {
			return _ffaff
		}
	}
	if _feead.PictureFormat != nil {
		if _bdeg := _feead.PictureFormat.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0046o\u0072\u006d\u0061\u0074"); _bdeg != nil {
			return _bdeg
		}
	}
	if _feead.PictureStackUnit != nil {
		if _fcgfd := _feead.PictureStackUnit.ValidateWithPath(path + "\u002f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063k\u0055\u006e\u0069\u0074"); _fcgfd != nil {
			return _fcgfd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxPos and its children, prefixing error messages with path
func (_adag *CT_AxPos) ValidateWithPath(path string) error {
	if _adag.ValAttr == ST_AxPosUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _adf := _adag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adf != nil {
		return _adf
	}
	return nil
}

// Validate validates the CT_Scaling and its children
func (_edbfd *CT_Scaling) Validate() error {
	return _edbfd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067")
}

// Validate validates the CT_Order and its children
func (_bbgb *CT_Order) Validate() error {
	return _bbgb.ValidateWithPath("\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072")
}

// Validate validates the UserShapes and its children
func (_ebcfa *UserShapes) Validate() error {
	return _ebcfa.ValidateWithPath("\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073")
}

// Validate validates the EG_LegendEntryData and its children
func (_bfcc *EG_LegendEntryData) Validate() error {
	return _bfcc.ValidateWithPath("\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061")
}

type CT_UpDownBar struct{ SpPr *_bb.CT_ShapeProperties }

func (_fgefce ST_MarkerStyle) String() string {
	switch _fgefce {
	case 0:
		return ""
	case 1:
		return "\u0063\u0069\u0072\u0063\u006c\u0065"
	case 2:
		return "\u0064\u0061\u0073\u0068"
	case 3:
		return "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case 4:
		return "\u0064\u006f\u0074"
	case 5:
		return "\u006e\u006f\u006e\u0065"
	case 6:
		return "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case 7:
		return "\u0070\u006c\u0075\u0073"
	case 8:
		return "\u0073\u0071\u0075\u0061\u0072\u0065"
	case 9:
		return "\u0073\u0074\u0061\u0072"
	case 10:
		return "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case 11:
		return "\u0078"
	case 12:
		return "\u0061\u0075\u0074\u006f"
	}
	return ""
}

func (_gcedad *ST_Shape) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gcedad = 0
	case "\u0063\u006f\u006e\u0065":
		*_gcedad = 1
	case "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x":
		*_gcedad = 2
	case "\u0062\u006f\u0078":
		*_gcedad = 3
	case "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072":
		*_gcedad = 4
	case "\u0070y\u0072\u0061\u006d\u0069\u0064":
		*_gcedad = 5
	case "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078":
		*_gcedad = 6
	}
	return nil
}

func (_fbdbd *CT_Surface) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fbdbd.Thickness != nil {
		_adea := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"}}
		e.EncodeElement(_fbdbd.Thickness, _adea)
	}
	if _fbdbd.SpPr != nil {
		_dfafg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_fbdbd.SpPr, _dfafg)
	}
	if _fbdbd.PictureOptions != nil {
		_cafgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_fbdbd.PictureOptions, _cafgg)
	}
	if _fbdbd.ExtLst != nil {
		_aabee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbdbd.ExtLst, _aabee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_NumVal struct {
	IdxAttr        uint32
	FormatCodeAttr *string
	V              string
}

func (_dege *CT_PageSetup) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _edbc := range start.Attr {
		if _edbc.Name.Local == "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae" {
			_fgdffc, _fgaa := _bg.ParseUint(_edbc.Value, 10, 32)
			if _fgaa != nil {
				return _fgaa
			}
			_ddcd := uint32(_fgdffc)
			_dege.PaperSizeAttr = &_ddcd
			continue
		}
		if _edbc.Name.Local == "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074" {
			_egbf, _dacag := _edbc.Value, error(nil)
			if _dacag != nil {
				return _dacag
			}
			_dege.PaperHeightAttr = &_egbf
			continue
		}
		if _edbc.Name.Local == "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068" {
			_gfdc, _bebge := _edbc.Value, error(nil)
			if _bebge != nil {
				return _bebge
			}
			_dege.PaperWidthAttr = &_gfdc
			continue
		}
		if _edbc.Name.Local == "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072" {
			_gfeg, _eadae := _bg.ParseUint(_edbc.Value, 10, 32)
			if _eadae != nil {
				return _eadae
			}
			_abfa := uint32(_gfeg)
			_dege.FirstPageNumberAttr = &_abfa
			continue
		}
		if _edbc.Name.Local == "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e" {
			_dege.OrientationAttr.UnmarshalXMLAttr(_edbc)
			continue
		}
		if _edbc.Name.Local == "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065" {
			_gbce, _daba := _bg.ParseBool(_edbc.Value)
			if _daba != nil {
				return _daba
			}
			_dege.BlackAndWhiteAttr = &_gbce
			continue
		}
		if _edbc.Name.Local == "\u0064\u0072\u0061f\u0074" {
			_eefcc, _egeed := _bg.ParseBool(_edbc.Value)
			if _egeed != nil {
				return _egeed
			}
			_dege.DraftAttr = &_eefcc
			continue
		}
		if _edbc.Name.Local == "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072" {
			_gbega, _bbgag := _bg.ParseBool(_edbc.Value)
			if _bbgag != nil {
				return _bbgag
			}
			_dege.UseFirstPageNumberAttr = &_gbega
			continue
		}
		if _edbc.Name.Local == "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069" {
			_bagc, _gadec := _bg.ParseInt(_edbc.Value, 10, 32)
			if _gadec != nil {
				return _gadec
			}
			_ffbf := int32(_bagc)
			_dege.HorizontalDpiAttr = &_ffbf
			continue
		}
		if _edbc.Name.Local == "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069" {
			_cggeage, _gabe := _bg.ParseInt(_edbc.Value, 10, 32)
			if _gabe != nil {
				return _gabe
			}
			_efac := int32(_cggeage)
			_dege.VerticalDpiAttr = &_efac
			continue
		}
		if _edbc.Name.Local == "\u0063\u006f\u0070\u0069\u0065\u0073" {
			_dddcd, _afbae := _bg.ParseUint(_edbc.Value, 10, 32)
			if _afbae != nil {
				return _afbae
			}
			_edgec := uint32(_dddcd)
			_dege.CopiesAttr = &_edgec
			continue
		}
	}
	for {
		_ccdec, _eegbc := d.Token()
		if _eegbc != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0050\u0061g\u0065\u0053\u0065\u0074\u0075\u0070\u003a\u0020\u0025\u0073", _eegbc)
		}
		if _fggb, _cdfc := _ccdec.(_e.EndElement); _cdfc && _fggb.Name == start.Name {
			break
		}
	}
	return nil
}

var ST_DepthPercentWithSymbolPatternRe = _b.MustCompile(ST_DepthPercentWithSymbolPattern)

func (_abga ST_MarkerStyle) ValidateWithPath(path string) error {
	switch _abga {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_abga))
	}
	return nil
}

const ST_BubbleScalePercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0032\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0033\u0030\u0030\u0029\u0025"

func (_cggac *ST_HoleSize) ValidateWithPath(path string) error {
	_dadff := []string{}
	if _cggac.ST_HoleSizePercent != nil {
		_dadff = append(_dadff, "\u0053T\u005fH\u006f\u006c\u0065\u0053\u0069z\u0065\u0050e\u0072\u0063\u0065\u006e\u0074")
	}
	if _cggac.ST_HoleSizeUByte != nil {
		_dadff = append(_dadff, "\u0053\u0054_\u0048\u006f\u006ce\u0053\u0069\u007a\u0065\u0055\u0042\u0079\u0074\u0065")
	}
	if len(_dadff) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _dadff)
	}
	return nil
}

type CT_Grouping struct{ ValAttr ST_Grouping }

func (_dffa *CT_ScatterChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_adfca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0063\u0061\u0074\u0074\u0065\u0072S\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_dffa.ScatterStyle, _adfca)
	if _dffa.VaryColors != nil {
		_geddab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dffa.VaryColors, _geddab)
	}
	if _dffa.Ser != nil {
		_ccceg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _facbbaf := range _dffa.Ser {
			e.EncodeElement(_facbbaf, _ccceg)
		}
	}
	if _dffa.DLbls != nil {
		_adccc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dffa.DLbls, _adccc)
	}
	_acca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _fdec := range _dffa.AxId {
		e.EncodeElement(_fdec, _acca)
	}
	if _dffa.ExtLst != nil {
		_faae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dffa.ExtLst, _faae)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_View3D and its children
func (_ffeca *CT_View3D) Validate() error {
	return _ffeca.ValidateWithPath("\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D")
}

func (_aeaded *EG_DLblShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _aeaded.NumFmt != nil {
		_cbeaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_aeaded.NumFmt, _cbeaa)
	}
	if _aeaded.SpPr != nil {
		_fbacbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aeaded.SpPr, _fbacbd)
	}
	if _aeaded.TxPr != nil {
		_babfe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_aeaded.TxPr, _babfe)
	}
	if _aeaded.DLblPos != nil {
		_cged := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_aeaded.DLblPos, _cged)
	}
	if _aeaded.ShowLegendKey != nil {
		_dbeeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_aeaded.ShowLegendKey, _dbeeg)
	}
	if _aeaded.ShowVal != nil {
		_cggff := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_aeaded.ShowVal, _cggff)
	}
	if _aeaded.ShowCatName != nil {
		_cbeab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_aeaded.ShowCatName, _cbeab)
	}
	if _aeaded.ShowSerName != nil {
		_aceac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_aeaded.ShowSerName, _aceac)
	}
	if _aeaded.ShowPercent != nil {
		_bbcgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_aeaded.ShowPercent, _bbcgf)
	}
	if _aeaded.ShowBubbleSize != nil {
		_cedbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_aeaded.ShowBubbleSize, _cedbb)
	}
	if _aeaded.Separator != nil {
		_gdga := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_g.AddPreserveSpaceAttr(&_gdga, *_aeaded.Separator)
		e.EncodeElement(_aeaded.Separator, _gdga)
	}
	return nil
}

// ValidateWithPath validates the CT_TrendlineType and its children, prefixing error messages with path
func (_daggb *CT_TrendlineType) ValidateWithPath(path string) error {
	if _bbed := _daggb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _bbed != nil {
		return _bbed
	}
	return nil
}

func (_gecdf *CT_ScatterSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gecdf.Idx = NewCT_UnsignedInt()
	_gecdf.Order = NewCT_UnsignedInt()
_gfba:
	for {
		_ebbe, _gfga := d.Token()
		if _gfga != nil {
			return _gfga
		}
		switch _egeef := _ebbe.(type) {
		case _e.StartElement:
			switch _egeef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _afeda := d.DecodeElement(_gecdf.Idx, &_egeef); _afeda != nil {
					return _afeda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _feeefa := d.DecodeElement(_gecdf.Order, &_egeef); _feeefa != nil {
					return _feeefa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gecdf.Tx = NewCT_SerTx()
				if _ddcb := d.DecodeElement(_gecdf.Tx, &_egeef); _ddcb != nil {
					return _ddcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gecdf.SpPr = _bb.NewCT_ShapeProperties()
				if _bfedac := d.DecodeElement(_gecdf.SpPr, &_egeef); _bfedac != nil {
					return _bfedac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_gecdf.Marker = NewCT_Marker()
				if _dbacd := d.DecodeElement(_gecdf.Marker, &_egeef); _dbacd != nil {
					return _dbacd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_edgee := NewCT_DPt()
				if _bdfce := d.DecodeElement(_edgee, &_egeef); _bdfce != nil {
					return _bdfce
				}
				_gecdf.DPt = append(_gecdf.DPt, _edgee)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gecdf.DLbls = NewCT_DLbls()
				if _face := d.DecodeElement(_gecdf.DLbls, &_egeef); _face != nil {
					return _face
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_ccedc := NewCT_Trendline()
				if _efcec := d.DecodeElement(_ccedc, &_egeef); _efcec != nil {
					return _efcec
				}
				_gecdf.Trendline = append(_gecdf.Trendline, _ccedc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_adebe := NewCT_ErrBars()
				if _bbbaf := d.DecodeElement(_adebe, &_egeef); _bbbaf != nil {
					return _bbbaf
				}
				_gecdf.ErrBars = append(_gecdf.ErrBars, _adebe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u0056\u0061\u006c"}:
				_gecdf.XVal = NewCT_AxDataSource()
				if _eceg := d.DecodeElement(_gecdf.XVal, &_egeef); _eceg != nil {
					return _eceg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u0056\u0061\u006c"}:
				_gecdf.YVal = NewCT_NumDataSource()
				if _fecdgf := d.DecodeElement(_gecdf.YVal, &_egeef); _fecdgf != nil {
					return _fecdgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_gecdf.Smooth = NewCT_Boolean()
				if _efaa := d.DecodeElement(_gecdf.Smooth, &_egeef); _efaa != nil {
					return _efaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gecdf.ExtLst = NewCT_ExtensionList()
				if _gcgac := d.DecodeElement(_gecdf.ExtLst, &_egeef); _gcgac != nil {
					return _gcgac
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053c\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072 \u0025\u0076", _egeef.Name)
				if _bedcg := d.Skip(); _bedcg != nil {
					return _bedcg
				}
			}
		case _e.EndElement:
			break _gfba
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_TrendlineLbl() *CT_TrendlineLbl { _eeace := &CT_TrendlineLbl{}; return _eeace }

func (_becd *EG_PieChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_caffb:
	for {
		_caded, _bbcdc := d.Token()
		if _bbcdc != nil {
			return _bbcdc
		}
		switch _feeeg := _caded.(type) {
		case _e.StartElement:
			switch _feeeg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_becd.VaryColors = NewCT_Boolean()
				if _fffc := d.DecodeElement(_becd.VaryColors, &_feeeg); _fffc != nil {
					return _fffc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_afegf := NewCT_PieSer()
				if _fbfebf := d.DecodeElement(_afegf, &_feeeg); _fbfebf != nil {
					return _fbfebf
				}
				_becd.Ser = append(_becd.Ser, _afegf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_becd.DLbls = NewCT_DLbls()
				if _dgebb := d.DecodeElement(_becd.DLbls, &_feeeg); _dgebb != nil {
					return _dgebb
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _feeeg.Name)
				if _cbaeae := d.Skip(); _cbaeae != nil {
					return _cbaeae
				}
			}
		case _e.EndElement:
			break _caffb
		case _e.CharData:
		}
	}
	return nil
}

func (_ddbcf *EG_LineChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_abaeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_ddbcf.Grouping, _abaeg)
	if _ddbcf.VaryColors != nil {
		_fffa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ddbcf.VaryColors, _fffa)
	}
	if _ddbcf.Ser != nil {
		_cccfbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cfccb := range _ddbcf.Ser {
			e.EncodeElement(_cfccb, _cccfbc)
		}
	}
	if _ddbcf.DLbls != nil {
		_bdfgf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ddbcf.DLbls, _bdfgf)
	}
	if _ddbcf.DropLines != nil {
		_ggde := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ddbcf.DropLines, _ggde)
	}
	return nil
}

func NewChartSpace() *ChartSpace {
	_gfeebd := &ChartSpace{}
	_gfeebd.CT_ChartSpace = *NewCT_ChartSpace()
	return _gfeebd
}

// ValidateWithPath validates the CT_StrData and its children, prefixing error messages with path
func (_fgggde *CT_StrData) ValidateWithPath(path string) error {
	if _fgggde.PtCount != nil {
		if _bdcf := _fgggde.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _bdcf != nil {
			return _bdcf
		}
	}
	for _afgc, _aaffd := range _fgggde.Pt {
		if _bafff := _aaffd.ValidateWithPath(_a.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _afgc)); _bafff != nil {
			return _bafff
		}
	}
	if _fgggde.ExtLst != nil {
		if _gaeea := _fgggde.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gaeea != nil {
			return _gaeea
		}
	}
	return nil
}

type CT_LogBase struct{ ValAttr float64 }

func (_bfdaee *CT_TrendlineLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _bfdaee.Layout != nil {
		_gfgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_bfdaee.Layout, _gfgg)
	}
	if _bfdaee.Tx != nil {
		_bbfff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bfdaee.Tx, _bbfff)
	}
	if _bfdaee.NumFmt != nil {
		_ceccg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_bfdaee.NumFmt, _ceccg)
	}
	if _bfdaee.SpPr != nil {
		_gfccd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bfdaee.SpPr, _gfccd)
	}
	if _bfdaee.TxPr != nil {
		_acec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_bfdaee.TxPr, _acec)
	}
	if _bfdaee.ExtLst != nil {
		_bdegf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bfdaee.ExtLst, _bdegf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_PageMargins() *CT_PageMargins { _fdge := &CT_PageMargins{}; return _fdge }

func (_bebbf ST_TickMark) ValidateWithPath(path string) error {
	switch _bebbf {
	case 0, 1, 2, 3, 4:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bebbf))
	}
	return nil
}

func (_bcagc *CT_StockChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_efagf:
	for {
		_cegea, _efgcg := d.Token()
		if _efgcg != nil {
			return _efgcg
		}
		switch _aeade := _cegea.(type) {
		case _e.StartElement:
			switch _aeade.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dfcec := NewCT_LineSer()
				if _dabdg := d.DecodeElement(_dfcec, &_aeade); _dabdg != nil {
					return _dabdg
				}
				_bcagc.Ser = append(_bcagc.Ser, _dfcec)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bcagc.DLbls = NewCT_DLbls()
				if _eagad := d.DecodeElement(_bcagc.DLbls, &_aeade); _eagad != nil {
					return _eagad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_bcagc.DropLines = NewCT_ChartLines()
				if _fedda := d.DecodeElement(_bcagc.DropLines, &_aeade); _fedda != nil {
					return _fedda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_bcagc.HiLowLines = NewCT_ChartLines()
				if _cbggb := d.DecodeElement(_bcagc.HiLowLines, &_aeade); _cbggb != nil {
					return _cbggb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_bcagc.UpDownBars = NewCT_UpDownBars()
				if _egabg := d.DecodeElement(_bcagc.UpDownBars, &_aeade); _egabg != nil {
					return _egabg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cgccb := NewCT_UnsignedInt()
				if _fcacea := d.DecodeElement(_cgccb, &_aeade); _fcacea != nil {
					return _fcacea
				}
				_bcagc.AxId = append(_bcagc.AxId, _cgccb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bcagc.ExtLst = NewCT_ExtensionList()
				if _dcada := d.DecodeElement(_bcagc.ExtLst, &_aeade); _dcada != nil {
					return _dcada
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053t\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _aeade.Name)
				if _gebg := d.Skip(); _gebg != nil {
					return _gebg
				}
			}
		case _e.EndElement:
			break _efagf
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_RadarChart and its children, prefixing error messages with path
func (_aeffg *CT_RadarChart) ValidateWithPath(path string) error {
	if _ebaa := _aeffg.RadarStyle.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"); _ebaa != nil {
		return _ebaa
	}
	if _aeffg.VaryColors != nil {
		if _afda := _aeffg.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _afda != nil {
			return _afda
		}
	}
	for _acgdf, _ccegf := range _aeffg.Ser {
		if _bbfbd := _ccegf.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _acgdf)); _bbfbd != nil {
			return _bbfbd
		}
	}
	if _aeffg.DLbls != nil {
		if _aebee := _aeffg.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _aebee != nil {
			return _aebee
		}
	}
	for _gdfgc, _dgcf := range _aeffg.AxId {
		if _daafg := _dgcf.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gdfgc)); _daafg != nil {
			return _daafg
		}
	}
	if _aeffg.ExtLst != nil {
		if _beag := _aeffg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _beag != nil {
			return _beag
		}
	}
	return nil
}

func (_afbb *CT_SerTx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_afbb.Choice = NewCT_SerTxChoice()
_ffda:
	for {
		_ecaea, _bafb := d.Token()
		if _bafb != nil {
			return _bafb
		}
		switch _accca := _ecaea.(type) {
		case _e.StartElement:
			switch _accca.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_afbb.Choice = NewCT_SerTxChoice()
				if _afcfe := d.DecodeElement(&_afbb.Choice.StrRef, &_accca); _afcfe != nil {
					return _afcfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_afbb.Choice = NewCT_SerTxChoice()
				if _gffaf := d.DecodeElement(&_afbb.Choice.V, &_accca); _gffaf != nil {
					return _gffaf
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0020\u0025\u0076", _accca.Name)
				if _ccdd := d.Skip(); _ccdd != nil {
					return _ccdd
				}
			}
		case _e.EndElement:
			break _ffda
		case _e.CharData:
		}
	}
	return nil
}

func (_bdae *CT_DLbls) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_eadc:
	for {
		_bddab, _dbdbf := d.Token()
		if _dbdbf != nil {
			return _dbdbf
		}
		switch _acac := _bddab.(type) {
		case _e.StartElement:
			switch _acac.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_cbdc := NewCT_DLbl()
				if _fgb := d.DecodeElement(_cbdc, &_acac); _fgb != nil {
					return _fgb
				}
				_bdae.DLbl = append(_bdae.DLbl, _cbdc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _eaecg := d.DecodeElement(&_bdae.Choice.Delete, &_acac); _eaecg != nil {
					return _eaecg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _ebaga := d.DecodeElement(&_bdae.Choice.NumFmt, &_acac); _ebaga != nil {
					return _ebaga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _gdbc := d.DecodeElement(&_bdae.Choice.SpPr, &_acac); _gdbc != nil {
					return _gdbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _fbge := d.DecodeElement(&_bdae.Choice.TxPr, &_acac); _fbge != nil {
					return _fbge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _eeda := d.DecodeElement(&_bdae.Choice.DLblPos, &_acac); _eeda != nil {
					return _eeda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _fbfc := d.DecodeElement(&_bdae.Choice.ShowLegendKey, &_acac); _fbfc != nil {
					return _fbfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _gddd := d.DecodeElement(&_bdae.Choice.ShowVal, &_acac); _gddd != nil {
					return _gddd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _eged := d.DecodeElement(&_bdae.Choice.ShowCatName, &_acac); _eged != nil {
					return _eged
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _aaae := d.DecodeElement(&_bdae.Choice.ShowSerName, &_acac); _aaae != nil {
					return _aaae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _gfeb := d.DecodeElement(&_bdae.Choice.ShowPercent, &_acac); _gfeb != nil {
					return _gfeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _befaa := d.DecodeElement(&_bdae.Choice.ShowBubbleSize, &_acac); _befaa != nil {
					return _befaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _cga := d.DecodeElement(&_bdae.Choice.Separator, &_acac); _cga != nil {
					return _cga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _gfab := d.DecodeElement(&_bdae.Choice.ShowLeaderLines, &_acac); _gfab != nil {
					return _gfab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				if _bdae.Choice == nil {
					_bdae.Choice = NewCT_DLblsChoice()
				}
				if _fdga := d.DecodeElement(&_bdae.Choice.LeaderLines, &_acac); _fdga != nil {
					return _fdga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdae.ExtLst = NewCT_ExtensionList()
				if _gcde := d.DecodeElement(_bdae.ExtLst, &_acac); _gcde != nil {
					return _gcde
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _acac.Name)
				if _dfg := d.Skip(); _dfg != nil {
					return _dfg
				}
			}
		case _e.EndElement:
			break _eadc
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DepthPercent and its children, prefixing error messages with path
func (_cgff *CT_DepthPercent) ValidateWithPath(path string) error {
	if _cgff.ValAttr != nil {
		if _aecfb := _cgff.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aecfb != nil {
			return _aecfb
		}
	}
	return nil
}

func (_faac *CT_CustSplit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fgee:
	for {
		_bffa, _acee := d.Token()
		if _acee != nil {
			return _acee
		}
		switch _ccff := _bffa.(type) {
		case _e.StartElement:
			switch _ccff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0065\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0050\u0074"}:
				_gbfdg := NewCT_UnsignedInt()
				if _ebag := d.DecodeElement(_gbfdg, &_ccff); _ebag != nil {
					return _ebag
				}
				_faac.SecondPiePt = append(_faac.SecondPiePt, _gbfdg)
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_C\u0075\u0073t\u0053\u0070\u006c\u0069\u0074\u0020\u0025\u0076", _ccff.Name)
				if _caf := d.Skip(); _caf != nil {
					return _caf
				}
			}
		case _e.EndElement:
			break _fgee
		case _e.CharData:
		}
	}
	return nil
}

func (_edfg *ST_TrendlineType) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_edfg = 0
	case "\u0065\u0078\u0070":
		*_edfg = 1
	case "\u006c\u0069\u006e\u0065\u0061\u0072":
		*_edfg = 2
	case "\u006c\u006f\u0067":
		*_edfg = 3
	case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
		*_edfg = 4
	case "\u0070\u006f\u006c\u0079":
		*_edfg = 5
	case "\u0070\u006f\u0077e\u0072":
		*_edfg = 6
	}
	return nil
}

type CT_PictureStackUnit struct{ ValAttr float64 }

type CT_ErrBars struct {
	ErrDir     *CT_ErrDir
	ErrBarType *CT_ErrBarType
	ErrValType *CT_ErrValType
	NoEndCap   *CT_Boolean
	Plus       *CT_NumDataSource
	Minus      *CT_NumDataSource
	Val        *CT_Double
	SpPr       *_bb.CT_ShapeProperties
	ExtLst     *CT_ExtensionList
}

// Validate validates the CT_MarkerStyle and its children
func (_aabcc *CT_MarkerStyle) Validate() error {
	return _aabcc.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065")
}

func (_ded *CT_BarDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _daef := range start.Attr {
		if _daef.Name.Local == "\u0076\u0061\u006c" {
			_ded.ValAttr.UnmarshalXMLAttr(_daef)
			continue
		}
	}
	for {
		_afb, _fbed := d.Token()
		if _fbed != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069ng\u0020C\u0054\u005f\u0042\u0061\u0072D\u0069\u0072\u003a\u0020\u0025\u0073", _fbed)
		}
		if _bggf, _ebf := _afb.(_e.EndElement); _ebf && _bggf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bdaee *EG_DLblShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dadfgd:
	for {
		_baab, _dgbag := d.Token()
		if _dgbag != nil {
			return _dgbag
		}
		switch _cdbfd := _baab.(type) {
		case _e.StartElement:
			switch _cdbfd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_bdaee.NumFmt = NewCT_NumFmt()
				if _fbecad := d.DecodeElement(_bdaee.NumFmt, &_cdbfd); _fbecad != nil {
					return _fbecad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bdaee.SpPr = _bb.NewCT_ShapeProperties()
				if _eggc := d.DecodeElement(_bdaee.SpPr, &_cdbfd); _eggc != nil {
					return _eggc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_bdaee.TxPr = _bb.NewCT_TextBody()
				if _cfaa := d.DecodeElement(_bdaee.TxPr, &_cdbfd); _cfaa != nil {
					return _cfaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_bdaee.DLblPos = NewCT_DLblPos()
				if _bbadd := d.DecodeElement(_bdaee.DLblPos, &_cdbfd); _bbadd != nil {
					return _bbadd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_bdaee.ShowLegendKey = NewCT_Boolean()
				if _fbdbf := d.DecodeElement(_bdaee.ShowLegendKey, &_cdbfd); _fbdbf != nil {
					return _fbdbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_bdaee.ShowVal = NewCT_Boolean()
				if _gagd := d.DecodeElement(_bdaee.ShowVal, &_cdbfd); _gagd != nil {
					return _gagd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_bdaee.ShowCatName = NewCT_Boolean()
				if _aaegd := d.DecodeElement(_bdaee.ShowCatName, &_cdbfd); _aaegd != nil {
					return _aaegd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_bdaee.ShowSerName = NewCT_Boolean()
				if _beeccb := d.DecodeElement(_bdaee.ShowSerName, &_cdbfd); _beeccb != nil {
					return _beeccb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_bdaee.ShowPercent = NewCT_Boolean()
				if _agdcc := d.DecodeElement(_bdaee.ShowPercent, &_cdbfd); _agdcc != nil {
					return _agdcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_bdaee.ShowBubbleSize = NewCT_Boolean()
				if _bbedd := d.DecodeElement(_bdaee.ShowBubbleSize, &_cdbfd); _bbedd != nil {
					return _bbedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_bdaee.Separator = new(string)
				if _cabff := d.DecodeElement(_bdaee.Separator, &_cdbfd); _cabff != nil {
					return _cabff
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0044L\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064 \u0025\u0076", _cdbfd.Name)
				if _edffg := d.Skip(); _edffg != nil {
					return _edffg
				}
			}
		case _e.EndElement:
			break _dadfgd
		case _e.CharData:
		}
	}
	return nil
}

type CT_RotX struct{ ValAttr *int8 }

// ValidateWithPath validates the CT_RelId and its children, prefixing error messages with path
func (_dfgd *CT_RelId) ValidateWithPath(path string) error { return nil }

func (_fgfba ST_Orientation) ValidateWithPath(path string) error {
	switch _fgfba {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_fgfba))
	}
	return nil
}

func (_adda *CT_PivotSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_fcaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0061\u006d\u0065"}}
	_g.AddPreserveSpaceAttr(&_fcaf, _adda.Name)
	e.EncodeElement(_adda.Name, _fcaf)
	_dacbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066\u006d\u0074\u0049\u0064"}}
	e.EncodeElement(_adda.FmtId, _dacbe)
	if _adda.ExtLst != nil {
		_gfffe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		for _, _deca := range _adda.ExtLst {
			e.EncodeElement(_deca, _gfffe)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_BubbleScale() *CT_BubbleScale { _dbdb := &CT_BubbleScale{}; return _dbdb }

func (_eaad *ST_SizeRepresents) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdgdf, _ddgeg := d.Token()
	if _ddgeg != nil {
		return _ddgeg
	}
	if _ecba, _ddedg := _bdgdf.(_e.EndElement); _ddedg && _ecba.Name == start.Name {
		*_eaad = 1
		return nil
	}
	if _acdff, _fabg := _bdgdf.(_e.CharData); !_fabg {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bdgdf)
	} else {
		switch string(_acdff) {
		case "":
			*_eaad = 0
		case "\u0061\u0072\u0065\u0061":
			*_eaad = 1
		case "\u0077":
			*_eaad = 2
		}
	}
	_bdgdf, _ddgeg = d.Token()
	if _ddgeg != nil {
		return _ddgeg
	}
	if _daefa, _gedaa := _bdgdf.(_e.EndElement); _gedaa && _daefa.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bdgdf)
}

func NewEG_AreaChartShared() *EG_AreaChartShared { _effa := &EG_AreaChartShared{}; return _effa }

// Validate validates the CT_Pie3DChart and its children
func (_eacd *CT_Pie3DChart) Validate() error {
	return _eacd.ValidateWithPath("\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

func (_eececf *CT_ScatterChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eececf.ScatterStyle = NewCT_ScatterStyle()
_gcdc:
	for {
		_cccb, _degcf := d.Token()
		if _degcf != nil {
			return _degcf
		}
		switch _bbfda := _cccb.(type) {
		case _e.StartElement:
			switch _bbfda.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0063\u0061t\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _egdaf := d.DecodeElement(_eececf.ScatterStyle, &_bbfda); _egdaf != nil {
					return _egdaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_eececf.VaryColors = NewCT_Boolean()
				if _gbgec := d.DecodeElement(_eececf.VaryColors, &_bbfda); _gbgec != nil {
					return _gbgec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_bbbfe := NewCT_ScatterSer()
				if _cfabed := d.DecodeElement(_bbbfe, &_bbfda); _cfabed != nil {
					return _cfabed
				}
				_eececf.Ser = append(_eececf.Ser, _bbbfe)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eececf.DLbls = NewCT_DLbls()
				if _edfa := d.DecodeElement(_eececf.DLbls, &_bbfda); _edfa != nil {
					return _edfa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_aaadc := NewCT_UnsignedInt()
				if _egccf := d.DecodeElement(_aaadc, &_bbfda); _egccf != nil {
					return _egccf
				}
				_eececf.AxId = append(_eececf.AxId, _aaadc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eececf.ExtLst = NewCT_ExtensionList()
				if _bbdae := d.DecodeElement(_eececf.ExtLst, &_bbfda); _bbdae != nil {
					return _bbdae
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0063\u0061t\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _bbfda.Name)
				if _cfcd := d.Skip(); _cfcd != nil {
					return _cfcd
				}
			}
		case _e.EndElement:
			break _gcdc
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_LineSer and its children
func (_ebagf *CT_LineSer) Validate() error {
	return _ebagf.ValidateWithPath("\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072")
}

func (_ffceb *ST_TickLblPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ffceb = 0
	case "\u0068\u0069\u0067\u0068":
		*_ffceb = 1
	case "\u006c\u006f\u0077":
		*_ffceb = 2
	case "\u006e\u0065\u0078\u0074\u0054\u006f":
		*_ffceb = 3
	case "\u006e\u006f\u006e\u0065":
		*_ffceb = 4
	}
	return nil
}

func NewCT_ScatterSer() *CT_ScatterSer {
	_aeaf := &CT_ScatterSer{}
	_aeaf.Idx = NewCT_UnsignedInt()
	_aeaf.Order = NewCT_UnsignedInt()
	return _aeaf
}

func NewCT_StrRef() *CT_StrRef { _cdge := &CT_StrRef{}; return _cdge }

func (_egea ST_BuiltInUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_egea.String(), start)
}

func (_efeb *ST_ScatterStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bgcag, _adacg := d.Token()
	if _adacg != nil {
		return _adacg
	}
	if _affge, _bcecg := _bgcag.(_e.EndElement); _bcecg && _affge.Name == start.Name {
		*_efeb = 1
		return nil
	}
	if _bbbacf, _bggcb := _bgcag.(_e.CharData); !_bggcb {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bgcag)
	} else {
		switch string(_bbbacf) {
		case "":
			*_efeb = 0
		case "\u006e\u006f\u006e\u0065":
			*_efeb = 1
		case "\u006c\u0069\u006e\u0065":
			*_efeb = 2
		case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
			*_efeb = 3
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_efeb = 4
		case "\u0073\u006d\u006f\u006f\u0074\u0068":
			*_efeb = 5
		case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
			*_efeb = 6
		}
	}
	_bgcag, _adacg = d.Token()
	if _adacg != nil {
		return _adacg
	}
	if _bgeb, _adebc := _bgcag.(_e.EndElement); _adebc && _bgeb.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bgcag)
}

func (_fcbfb ST_Grouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fcbfb.String(), start)
}

func (_fcfagg ST_Overlap) String() string {
	if _fcfagg.ST_OverlapPercent != nil {
		return _a.Sprintf("\u0025\u0076", *_fcfagg.ST_OverlapPercent)
	}
	if _fcfagg.ST_OverlapByte != nil {
		return _a.Sprintf("\u0025\u0076", *_fcfagg.ST_OverlapByte)
	}
	return ""
}

// ST_HoleSize is a union type
type ST_HoleSize struct {
	ST_HoleSizePercent *string
	ST_HoleSizeUByte   *uint8
}

func (_dcda *CT_RadarStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcda.ValAttr != ST_RadarStyleUnset {
		_gdbg, _fcagb := _dcda.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _fcagb != nil {
			return _fcagb
		}
		start.Attr = append(start.Attr, _gdbg)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type ST_DispBlanksAs byte

type CT_Period struct{ ValAttr *uint32 }

// ValidateWithPath validates the CT_ExternalData and its children, prefixing error messages with path
func (_eaa *CT_ExternalData) ValidateWithPath(path string) error {
	if _eaa.AutoUpdate != nil {
		if _fgef := _eaa.AutoUpdate.ValidateWithPath(path + "/\u0041\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"); _fgef != nil {
			return _fgef
		}
	}
	return nil
}

func (_dag *CT_AxDataSourceChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cgd:
	for {
		_fdg, _gfce := d.Token()
		if _gfce != nil {
			return _gfce
		}
		switch _bgcc := _fdg.(type) {
		case _e.StartElement:
			switch _bgcc.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_dag.MultiLvlStrRef = NewCT_MultiLvlStrRef()
				if _fec := d.DecodeElement(_dag.MultiLvlStrRef, &_bgcc); _fec != nil {
					return _fec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_dag.NumRef = NewCT_NumRef()
				if _cbf := d.DecodeElement(_dag.NumRef, &_bgcc); _cbf != nil {
					return _cbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_dag.NumLit = NewCT_NumData()
				if _dabb := d.DecodeElement(_dag.NumLit, &_bgcc); _dabb != nil {
					return _dabb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_dag.StrRef = NewCT_StrRef()
				if _ccb := d.DecodeElement(_dag.StrRef, &_bgcc); _ccb != nil {
					return _ccb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_dag.StrLit = NewCT_StrData()
				if _eaf := d.DecodeElement(_dag.StrLit, &_bgcc); _eaf != nil {
					return _eaf
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e C\u0054\u005f\u0041\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _bgcc.Name)
				if _gdb := d.Skip(); _gdb != nil {
					return _gdb
				}
			}
		case _e.EndElement:
			break _cgd
		case _e.CharData:
		}
	}
	return nil
}

func (_cgcac ST_LayoutTarget) Validate() error { return _cgcac.ValidateWithPath("") }

type CT_ScatterStyle struct{ ValAttr ST_ScatterStyle }

type ST_PictureFormat byte

// ValidateWithPath validates the CT_LineChart and its children, prefixing error messages with path
func (_aaaa *CT_LineChart) ValidateWithPath(path string) error {
	if _gaac := _aaaa.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _gaac != nil {
		return _gaac
	}
	if _aaaa.VaryColors != nil {
		if _bbaf := _aaaa.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bbaf != nil {
			return _bbaf
		}
	}
	for _bbacb, _ggebe := range _aaaa.Ser {
		if _ccfga := _ggebe.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bbacb)); _ccfga != nil {
			return _ccfga
		}
	}
	if _aaaa.DLbls != nil {
		if _edgc := _aaaa.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _edgc != nil {
			return _edgc
		}
	}
	if _aaaa.DropLines != nil {
		if _ddeeb := _aaaa.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _ddeeb != nil {
			return _ddeeb
		}
	}
	if _aaaa.HiLowLines != nil {
		if _ebcc := _aaaa.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _ebcc != nil {
			return _ebcc
		}
	}
	if _aaaa.UpDownBars != nil {
		if _efgd := _aaaa.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _efgd != nil {
			return _efgd
		}
	}
	if _aaaa.Marker != nil {
		if _gacgd := _aaaa.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _gacgd != nil {
			return _gacgd
		}
	}
	if _aaaa.Smooth != nil {
		if _gddb := _aaaa.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _gddb != nil {
			return _gddb
		}
	}
	for _efdc, _bfcd := range _aaaa.AxId {
		if _fbcg := _bfcd.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _efdc)); _fbcg != nil {
			return _fbcg
		}
	}
	if _aaaa.ExtLst != nil {
		if _efcc := _aaaa.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _efcc != nil {
			return _efcc
		}
	}
	return nil
}

var ST_LblOffsetPercentPatternRe = _b.MustCompile(ST_LblOffsetPercentPattern)

func (_aafbg *CT_PictureOptions) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aafbg.ApplyToFront != nil {
		_aedda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fF\u0072\u006f\u006e\u0074"}}
		e.EncodeElement(_aafbg.ApplyToFront, _aedda)
	}
	if _aafbg.ApplyToSides != nil {
		_cbbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0070\u0070\u006c\u0079\u0054\u006fS\u0069\u0064\u0065\u0073"}}
		e.EncodeElement(_aafbg.ApplyToSides, _cbbg)
	}
	if _aafbg.ApplyToEnd != nil {
		_aaacg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061p\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}}
		e.EncodeElement(_aafbg.ApplyToEnd, _aaacg)
	}
	if _aafbg.PictureFormat != nil {
		_eefea := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}}
		e.EncodeElement(_aafbg.PictureFormat, _eefea)
	}
	if _aafbg.PictureStackUnit != nil {
		_fced := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070i\u0063\u0074\u0075\u0072\u0065S\u0074\u0061c\u006b\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_aafbg.PictureStackUnit, _fced)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ddcee *CT_RelId) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cadbg := range start.Attr {
		if _cadbg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _cadbg.Name.Local == "\u0069\u0064" || _cadbg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _cadbg.Name.Local == "\u0069\u0064" {
			_cbbeg, _ebgg := _cadbg.Value, error(nil)
			if _ebgg != nil {
				return _ebgg
			}
			_ddcee.IdAttr = _cbbeg
			continue
		}
	}
	for {
		_ddggd, _gbfcg := d.Token()
		if _gbfcg != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fR\u0065\u006c\u0049\u0064: \u0025\u0073", _gbfcg)
		}
		if _cbcga, _egddf := _ddggd.(_e.EndElement); _egddf && _cbcga.Name == start.Name {
			break
		}
	}
	return nil
}

func (_dcbf *CT_SerTxChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dcbf.StrRef != nil {
		_fcfbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_dcbf.StrRef, _fcfbe)
	}
	if _dcbf.V != nil {
		_ccgag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
		_g.AddPreserveSpaceAttr(&_ccgag, *_dcbf.V)
		e.EncodeElement(_dcbf.V, _ccgag)
	}
	return nil
}

func (_bacb *CT_DoughnutChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_edgbd:
	for {
		_ccdb, _gbfb := d.Token()
		if _gbfb != nil {
			return _gbfb
		}
		switch _fceag := _ccdb.(type) {
		case _e.StartElement:
			switch _fceag.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bacb.VaryColors = NewCT_Boolean()
				if _caede := d.DecodeElement(_bacb.VaryColors, &_fceag); _caede != nil {
					return _caede
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_agcfg := NewCT_PieSer()
				if _cdde := d.DecodeElement(_agcfg, &_fceag); _cdde != nil {
					return _cdde
				}
				_bacb.Ser = append(_bacb.Ser, _agcfg)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bacb.DLbls = NewCT_DLbls()
				if _gfabc := d.DecodeElement(_bacb.DLbls, &_fceag); _gfabc != nil {
					return _gfabc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_bacb.FirstSliceAng = NewCT_FirstSliceAng()
				if _agde := d.DecodeElement(_bacb.FirstSliceAng, &_fceag); _agde != nil {
					return _agde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}:
				_bacb.HoleSize = NewCT_HoleSize()
				if _caebe := d.DecodeElement(_bacb.HoleSize, &_fceag); _caebe != nil {
					return _caebe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bacb.ExtLst = NewCT_ExtensionList()
				if _egfeb := d.DecodeElement(_bacb.ExtLst, &_fceag); _egfeb != nil {
					return _egfeb
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074\u0020\u0025v", _fceag.Name)
				if _dbcd := d.Skip(); _dbcd != nil {
					return _dbcd
				}
			}
		case _e.EndElement:
			break _edgbd
		case _e.CharData:
		}
	}
	return nil
}

func (_aegfa *EG_LegendEntryData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bcbac:
	for {
		_eececc, _cdcaag := d.Token()
		if _cdcaag != nil {
			return _cdcaag
		}
		switch _aagbb := _eececc.(type) {
		case _e.StartElement:
			switch _aagbb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_aegfa.TxPr = _bb.NewCT_TextBody()
				if _gfcba := d.DecodeElement(_aegfa.TxPr, &_aagbb); _gfcba != nil {
					return _gfcba
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _aagbb.Name)
				if _cefga := d.Skip(); _cefga != nil {
					return _cefga
				}
			}
		case _e.EndElement:
			break _bcbac
		case _e.CharData:
		}
	}
	return nil
}

// ST_SecondPieSize is a union type
type ST_SecondPieSize struct {
	ST_SecondPieSizePercent *string
	ST_SecondPieSizeUShort  *uint16
}

func (_cebgb *ST_TickLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ebdca, _fcbcc := d.Token()
	if _fcbcc != nil {
		return _fcbcc
	}
	if _cecf, _gaceg := _ebdca.(_e.EndElement); _gaceg && _cecf.Name == start.Name {
		*_cebgb = 1
		return nil
	}
	if _fggabc, _daaga := _ebdca.(_e.CharData); !_daaga {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ebdca)
	} else {
		switch string(_fggabc) {
		case "":
			*_cebgb = 0
		case "\u0068\u0069\u0067\u0068":
			*_cebgb = 1
		case "\u006c\u006f\u0077":
			*_cebgb = 2
		case "\u006e\u0065\u0078\u0074\u0054\u006f":
			*_cebgb = 3
		case "\u006e\u006f\u006e\u0065":
			*_cebgb = 4
		}
	}
	_ebdca, _fcbcc = d.Token()
	if _fcbcc != nil {
		return _fcbcc
	}
	if _fbdcg, _beffa := _ebdca.(_e.EndElement); _beffa && _fbdcg.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ebdca)
}

func (_ffcgf *CT_NumVal) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fdbff := range start.Attr {
		if _fdbff.Name.Local == "\u0069\u0064\u0078" {
			_cagd, _ffcbg := _bg.ParseUint(_fdbff.Value, 10, 32)
			if _ffcbg != nil {
				return _ffcbg
			}
			_ffcgf.IdxAttr = uint32(_cagd)
			continue
		}
		if _fdbff.Name.Local == "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065" {
			_bcfd, _ecdec := _fdbff.Value, error(nil)
			if _ecdec != nil {
				return _ecdec
			}
			_ffcgf.FormatCodeAttr = &_bcfd
			continue
		}
	}
_fcgda:
	for {
		_afgeg, _cbafa := d.Token()
		if _cbafa != nil {
			return _cbafa
		}
		switch _ddad := _afgeg.(type) {
		case _e.StartElement:
			switch _ddad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _fabfe := d.DecodeElement(&_ffcgf.V, &_ddad); _fabfe != nil {
					return _fabfe
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dV\u0061\u006c \u0025\u0076", _ddad.Name)
				if _gcabf := d.Skip(); _gcabf != nil {
					return _gcabf
				}
			}
		case _e.EndElement:
			break _fcgda
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_OfPieTypeUnset ST_OfPieType = 0
	ST_OfPieTypePie   ST_OfPieType = 1
	ST_OfPieTypeBar   ST_OfPieType = 2
)

func (_deed *CT_DispUnits) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _deed.Choice != nil {
		_deed.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _deed.DispUnitsLbl != nil {
		_bged := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0069\u0073\u0070\u0055\u006e\u0069t\u0073\u004c\u0062\u006c"}}
		e.EncodeElement(_deed.DispUnitsLbl, _bged)
	}
	if _deed.ExtLst != nil {
		_fggg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_deed.ExtLst, _fggg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fcccc *ST_LblOffset) ValidateWithPath(path string) error {
	_faega := []string{}
	if _fcccc.ST_LblOffsetPercent != nil {
		_faega = append(_faega, "\u0053\u0054\u005f\u004cbl\u004f\u0066\u0066\u0073\u0065\u0074\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _fcccc.ST_LblOffsetUShort != nil {
		_faega = append(_faega, "\u0053T\u005fL\u0062\u006c\u004f\u0066\u0066s\u0065\u0074U\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_faega) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _faega)
	}
	return nil
}

func (_acffe ST_PageSetupOrientation) ValidateWithPath(path string) error {
	switch _acffe {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_acffe))
	}
	return nil
}

// ValidateWithPath validates the EG_AreaChartShared and its children, prefixing error messages with path
func (_bgba *EG_AreaChartShared) ValidateWithPath(path string) error {
	if _bgba.Grouping != nil {
		if _bdcfg := _bgba.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _bdcfg != nil {
			return _bdcfg
		}
	}
	if _bgba.VaryColors != nil {
		if _cfcde := _bgba.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _cfcde != nil {
			return _cfcde
		}
	}
	for _cbbde, _ededb := range _bgba.Ser {
		if _fecgc := _ededb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cbbde)); _fecgc != nil {
			return _fecgc
		}
	}
	if _bgba.DLbls != nil {
		if _ggfg := _bgba.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ggfg != nil {
			return _ggfg
		}
	}
	if _bgba.DropLines != nil {
		if _gcagf := _bgba.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _gcagf != nil {
			return _gcagf
		}
	}
	return nil
}

// ValidateWithPath validates the EG_AxSharedChoice and its children, prefixing error messages with path
func (_ageaa *EG_AxSharedChoice) ValidateWithPath(path string) error {
	if _ageaa.Crosses != nil {
		if _cbed := _ageaa.Crosses.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073"); _cbed != nil {
			return _cbed
		}
	}
	if _ageaa.CrossesAt != nil {
		if _dgeac := _ageaa.CrossesAt.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u0041\u0074"); _dgeac != nil {
			return _dgeac
		}
	}
	return nil
}

// Validate validates the CT_BandFmt and its children
func (_cedb *CT_BandFmt) Validate() error {
	return _cedb.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074")
}

// Validate validates the CT_ErrValType and its children
func (_bceg *CT_ErrValType) Validate() error {
	return _bceg.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065")
}

// Validate validates the CT_NumDataSourceChoice and its children
func (_bdcdd *CT_NumDataSourceChoice) Validate() error {
	return _bdcdd.ValidateWithPath("\u0043\u0054\u005f\u004eum\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069c\u0065")
}

type CT_Perspective struct{ ValAttr *uint8 }

func NewCT_DLblsChoice() *CT_DLblsChoice { _aaab := &CT_DLblsChoice{}; return _aaab }

func (_ebcea *CT_PageSetup) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ebcea.PaperSizeAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0070a\u0070\u0065\u0072\u0053\u0069\u007ae"}, Value: _a.Sprintf("\u0025\u0076", *_ebcea.PaperSizeAttr)})
	}
	if _ebcea.PaperHeightAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "p\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074"}, Value: _a.Sprintf("\u0025\u0076", *_ebcea.PaperHeightAttr)})
	}
	if _ebcea.PaperWidthAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0070\u0061\u0070\u0065\u0072\u0057\u0069\u0064\u0074\u0068"}, Value: _a.Sprintf("\u0025\u0076", *_ebcea.PaperWidthAttr)})
	}
	if _ebcea.FirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066i\u0072s\u0074\u0050\u0061\u0067\u0065\u004e\u0075\u006d\u0062\u0065\u0072"}, Value: _a.Sprintf("\u0025\u0076", *_ebcea.FirstPageNumberAttr)})
	}
	if _ebcea.OrientationAttr != ST_PageSetupOrientationUnset {
		_acbge, _fcbff := _ebcea.OrientationAttr.MarshalXMLAttr(_e.Name{Local: "o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"})
		if _fcbff != nil {
			return _fcbff
		}
		start.Attr = append(start.Attr, _acbge)
	}
	if _ebcea.BlackAndWhiteAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0062\u006c\u0061\u0063\u006b\u0041\u006e\u0064\u0057\u0068\u0069\u0074\u0065"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_ebcea.BlackAndWhiteAttr))})
	}
	if _ebcea.DraftAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0064\u0072\u0061f\u0074"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_ebcea.DraftAttr))})
	}
	if _ebcea.UseFirstPageNumberAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0075s\u0065F\u0069\u0072\u0073\u0074\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072"}, Value: _a.Sprintf("\u0025\u0064", _bbgbg(*_ebcea.UseFirstPageNumberAttr))})
	}
	if _ebcea.HorizontalDpiAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0044\u0070\u0069"}, Value: _a.Sprintf("\u0025\u0076", *_ebcea.HorizontalDpiAttr)})
	}
	if _ebcea.VerticalDpiAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "v\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u0044\u0070\u0069"}, Value: _a.Sprintf("\u0025\u0076", *_ebcea.VerticalDpiAttr)})
	}
	if _ebcea.CopiesAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0063\u006f\u0070\u0069\u0065\u0073"}, Value: _a.Sprintf("\u0025\u0076", *_ebcea.CopiesAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bcfe *CT_AxDataSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bcfe.Choice = NewCT_AxDataSourceChoice()
_gefa:
	for {
		_ace, _abc := d.Token()
		if _abc != nil {
			return _abc
		}
		switch _bcec := _ace.(type) {
		case _e.StartElement:
			switch _bcec.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066"}:
				_bcfe.Choice = NewCT_AxDataSourceChoice()
				if _gdf := d.DecodeElement(&_bcfe.Choice.MultiLvlStrRef, &_bcec); _gdf != nil {
					return _gdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_bcfe.Choice = NewCT_AxDataSourceChoice()
				if _caec := d.DecodeElement(&_bcfe.Choice.NumRef, &_bcec); _caec != nil {
					return _caec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_bcfe.Choice = NewCT_AxDataSourceChoice()
				if _gfc := d.DecodeElement(&_bcfe.Choice.NumLit, &_bcec); _gfc != nil {
					return _gfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_bcfe.Choice = NewCT_AxDataSourceChoice()
				if _bffc := d.DecodeElement(&_bcfe.Choice.StrRef, &_bcec); _bffc != nil {
					return _bffc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u004c\u0069\u0074"}:
				_bcfe.Choice = NewCT_AxDataSourceChoice()
				if _deaf := d.DecodeElement(&_bcfe.Choice.StrLit, &_bcec); _deaf != nil {
					return _deaf
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0078\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0025\u0076", _bcec.Name)
				if _bcee := d.Skip(); _bcee != nil {
					return _bcee
				}
			}
		case _e.EndElement:
			break _gefa
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_NumDataSourceChoice() *CT_NumDataSourceChoice {
	_bbeb := &CT_NumDataSourceChoice{}
	return _bbeb
}

// ValidateWithPath validates the CT_ErrBars and its children, prefixing error messages with path
func (_dfcac *CT_ErrBars) ValidateWithPath(path string) error {
	if _dfcac.ErrDir != nil {
		if _abaf := _dfcac.ErrDir.ValidateWithPath(path + "\u002fE\u0072\u0072\u0044\u0069\u0072"); _abaf != nil {
			return _abaf
		}
	}
	if _bdce := _dfcac.ErrBarType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"); _bdce != nil {
		return _bdce
	}
	if _beead := _dfcac.ErrValType.ValidateWithPath(path + "/\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"); _beead != nil {
		return _beead
	}
	if _dfcac.NoEndCap != nil {
		if _ddae := _dfcac.NoEndCap.ValidateWithPath(path + "\u002fN\u006f\u0045\u006e\u0064\u0043\u0061p"); _ddae != nil {
			return _ddae
		}
	}
	if _dfcac.Plus != nil {
		if _bfea := _dfcac.Plus.ValidateWithPath(path + "\u002f\u0050\u006cu\u0073"); _bfea != nil {
			return _bfea
		}
	}
	if _dfcac.Minus != nil {
		if _gagg := _dfcac.Minus.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u0075\u0073"); _gagg != nil {
			return _gagg
		}
	}
	if _dfcac.Val != nil {
		if _afed := _dfcac.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _afed != nil {
			return _afed
		}
	}
	if _dfcac.SpPr != nil {
		if _fdddg := _dfcac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fdddg != nil {
			return _fdddg
		}
	}
	if _dfcac.ExtLst != nil {
		if _dbeb := _dfcac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dbeb != nil {
			return _dbeb
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Orientation and its children, prefixing error messages with path
func (_baac *CT_Orientation) ValidateWithPath(path string) error {
	if _adcga := _baac.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adcga != nil {
		return _adcga
	}
	return nil
}

// Validate validates the CT_DLbl and its children
func (_cccd *CT_DLbl) Validate() error {
	return _cccd.ValidateWithPath("\u0043T\u005f\u0044\u004c\u0062\u006c")
}

// Validate validates the CT_NumFmt and its children
func (_aagb *CT_NumFmt) Validate() error {
	return _aagb.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt")
}

// ValidateWithPath validates the CT_DispUnitsChoice and its children, prefixing error messages with path
func (_fbfad *CT_DispUnitsChoice) ValidateWithPath(path string) error {
	if _fbfad.CustUnit != nil {
		if _afac := _fbfad.CustUnit.ValidateWithPath(path + "\u002fC\u0075\u0073\u0074\u0055\u006e\u0069t"); _afac != nil {
			return _afac
		}
	}
	if _fbfad.BuiltInUnit != nil {
		if _bfgd := _fbfad.BuiltInUnit.ValidateWithPath(path + "\u002f\u0042\u0075i\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"); _bfgd != nil {
			return _bfgd
		}
	}
	return nil
}

func (_bdfcg ST_RadarStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bdfcg.String(), start)
}

type CT_RadarSer struct {
	Idx    *CT_UnsignedInt
	Order  *CT_UnsignedInt
	Tx     *CT_SerTx
	SpPr   *_bb.CT_ShapeProperties
	Marker *CT_Marker
	DPt    []*CT_DPt
	DLbls  *CT_DLbls
	Cat    *CT_AxDataSource
	Val    *CT_NumDataSource
	ExtLst *CT_ExtensionList
}

func (_dgdb *CT_DispBlanksAs) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dgdb.ValAttr != ST_DispBlanksAsUnset {
		_cfba, _eabg := _dgdb.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _eabg != nil {
			return _eabg
		}
		start.Attr = append(start.Attr, _cfba)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

const ST_ThicknessPercentPattern = "\u0028[\u0030\u002d\u0039\u005d\u002b\u0029%"

func (_dbdba ST_BubbleScale) String() string {
	if _dbdba.ST_BubbleScalePercent != nil {
		return _a.Sprintf("\u0025\u0076", *_dbdba.ST_BubbleScalePercent)
	}
	if _dbdba.ST_BubbleScaleUInt != nil {
		return _a.Sprintf("\u0025\u0076", *_dbdba.ST_BubbleScaleUInt)
	}
	return ""
}

func (_dafa *CT_DepthPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dafa.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_dafa.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_BubbleChart struct {
	VaryColors     *CT_Boolean
	Ser            []*CT_BubbleSer
	DLbls          *CT_DLbls
	Bubble3D       *CT_Boolean
	BubbleScale    *CT_BubbleScale
	ShowNegBubbles *CT_Boolean
	SizeRepresents *CT_SizeRepresents
	AxId           []*CT_UnsignedInt
	ExtLst         *CT_ExtensionList
}

const (
	ST_DispBlanksAsUnset ST_DispBlanksAs = 0
	ST_DispBlanksAsSpan  ST_DispBlanksAs = 1
	ST_DispBlanksAsGap   ST_DispBlanksAs = 2
	ST_DispBlanksAsZero  ST_DispBlanksAs = 3
)

func (_bfeg ST_SizeRepresents) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bfeg.String(), start)
}

func (_dcgbg ST_LayoutMode) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_dgeaa := _e.Attr{}
	_dgeaa.Name = name
	switch _dcgbg {
	case ST_LayoutModeUnset:
		_dgeaa.Value = ""
	case ST_LayoutModeEdge:
		_dgeaa.Value = "\u0065\u0064\u0067\u0065"
	case ST_LayoutModeFactor:
		_dgeaa.Value = "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return _dgeaa, nil
}

func (_ddc *CT_BuiltInUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ddde := range start.Attr {
		if _ddde.Name.Local == "\u0076\u0061\u006c" {
			_ddc.ValAttr.UnmarshalXMLAttr(_ddde)
			continue
		}
	}
	for {
		_gadd, _aebe := d.Token()
		if _aebe != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074:\u0020\u0025\u0073", _aebe)
		}
		if _aaf, _egdgg := _gadd.(_e.EndElement); _egdgg && _aaf.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gffbg ST_PageSetupOrientation) Validate() error { return _gffbg.ValidateWithPath("") }

func ParseUnionST_Overlap(s string) (ST_Overlap, error) {
	if ST_OverlapPercentPatternRe.MatchString(s) {
		return ST_Overlap{ST_OverlapPercent: &s}, nil
	}
	_cdbad, _ebedc := _bg.ParseInt(s, 10, 8)
	if _ebedc != nil {
		return ST_Overlap{}, _ebedc
	}
	_gcdd := int8(_cdbad)
	return ST_Overlap{ST_OverlapByte: &_gcdd}, nil
}

type EG_SerShared struct {
	Idx   *CT_UnsignedInt
	Order *CT_UnsignedInt
	Tx    *CT_SerTx
	SpPr  *_bb.CT_ShapeProperties
}

// Validate validates the EG_LineChartShared and its children
func (_agedb *EG_LineChartShared) Validate() error {
	return _agedb.ValidateWithPath("\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064")
}

func (_cacg *ST_LblAlgn) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_debb, _afggg := d.Token()
	if _afggg != nil {
		return _afggg
	}
	if _cdaedb, _bdga := _debb.(_e.EndElement); _bdga && _cdaedb.Name == start.Name {
		*_cacg = 1
		return nil
	}
	if _gedddd, _efaad := _debb.(_e.CharData); !_efaad {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _debb)
	} else {
		switch string(_gedddd) {
		case "":
			*_cacg = 0
		case "\u0063\u0074\u0072":
			*_cacg = 1
		case "\u006c":
			*_cacg = 2
		case "\u0072":
			*_cacg = 3
		}
	}
	_debb, _afggg = d.Token()
	if _afggg != nil {
		return _afggg
	}
	if _gbdef, _degae := _debb.(_e.EndElement); _degae && _gbdef.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _debb)
}

func (_afccf ST_PictureFormat) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_dcfeb := _e.Attr{}
	_dcfeb.Name = name
	switch _afccf {
	case ST_PictureFormatUnset:
		_dcfeb.Value = ""
	case ST_PictureFormatStretch:
		_dcfeb.Value = "\u0073t\u0072\u0065\u0074\u0063\u0068"
	case ST_PictureFormatStack:
		_dcfeb.Value = "\u0073\u0074\u0061c\u006b"
	case ST_PictureFormatStackScale:
		_dcfeb.Value = "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065"
	}
	return _dcfeb, nil
}

// ValidateWithPath validates the CT_BuiltInUnit and its children, prefixing error messages with path
func (_bccc *CT_BuiltInUnit) ValidateWithPath(path string) error {
	if _acbg := _bccc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _acbg != nil {
		return _acbg
	}
	return nil
}

func (_deaed ST_OfPieType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_deaed.String(), start)
}

const (
	ST_BarDirUnset ST_BarDir = 0
	ST_BarDirBar   ST_BarDir = 1
	ST_BarDirCol   ST_BarDir = 2
)

func (_fgfb *CT_Line3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fgfb.Grouping = NewCT_Grouping()
_eeadg:
	for {
		_aaaba, _eaae := d.Token()
		if _eaae != nil {
			return _eaae
		}
		switch _dacbf := _aaaba.(type) {
		case _e.StartElement:
			switch _dacbf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _cbgg := d.DecodeElement(_fgfb.Grouping, &_dacbf); _cbgg != nil {
					return _cbgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_fgfb.VaryColors = NewCT_Boolean()
				if _cccc := d.DecodeElement(_fgfb.VaryColors, &_dacbf); _cccc != nil {
					return _cccc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ccbab := NewCT_LineSer()
				if _bfgde := d.DecodeElement(_ccbab, &_dacbf); _bfgde != nil {
					return _bfgde
				}
				_fgfb.Ser = append(_fgfb.Ser, _ccbab)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fgfb.DLbls = NewCT_DLbls()
				if _bbfdg := d.DecodeElement(_fgfb.DLbls, &_dacbf); _bbfdg != nil {
					return _bbfdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_fgfb.DropLines = NewCT_ChartLines()
				if _bedd := d.DecodeElement(_fgfb.DropLines, &_dacbf); _bedd != nil {
					return _bedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_fgfb.GapDepth = NewCT_GapAmount()
				if _dgdaf := d.DecodeElement(_fgfb.GapDepth, &_dacbf); _dgdaf != nil {
					return _dgdaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cbae := NewCT_UnsignedInt()
				if _bbab := d.DecodeElement(_cbae, &_dacbf); _bbab != nil {
					return _bbab
				}
				_fgfb.AxId = append(_fgfb.AxId, _cbae)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fgfb.ExtLst = NewCT_ExtensionList()
				if _dfbe := d.DecodeElement(_fgfb.ExtLst, &_dacbf); _dfbe != nil {
					return _dfbe
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _dacbf.Name)
				if _faged := d.Skip(); _faged != nil {
					return _faged
				}
			}
		case _e.EndElement:
			break _eeadg
		case _e.CharData:
		}
	}
	return nil
}

func (_ccgfgd ST_LayoutTarget) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_ccgfgd.String(), start)
}

type CT_TimeUnit struct{ ValAttr ST_TimeUnit }

// ValidateWithPath validates the CT_DateAx and its children, prefixing error messages with path
func (_ebaf *CT_DateAx) ValidateWithPath(path string) error {
	if _afgd := _ebaf.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _afgd != nil {
		return _afgd
	}
	if _abdf := _ebaf.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _abdf != nil {
		return _abdf
	}
	if _ebaf.Delete != nil {
		if _bccb := _ebaf.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _bccb != nil {
			return _bccb
		}
	}
	if _dbege := _ebaf.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _dbege != nil {
		return _dbege
	}
	if _ebaf.MajorGridlines != nil {
		if _eccbf := _ebaf.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _eccbf != nil {
			return _eccbf
		}
	}
	if _ebaf.MinorGridlines != nil {
		if _afca := _ebaf.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _afca != nil {
			return _afca
		}
	}
	if _ebaf.Title != nil {
		if _cdcc := _ebaf.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _cdcc != nil {
			return _cdcc
		}
	}
	if _ebaf.NumFmt != nil {
		if _eac := _ebaf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _eac != nil {
			return _eac
		}
	}
	if _ebaf.MajorTickMark != nil {
		if _aage := _ebaf.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _aage != nil {
			return _aage
		}
	}
	if _ebaf.MinorTickMark != nil {
		if _dade := _ebaf.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _dade != nil {
			return _dade
		}
	}
	if _ebaf.TickLblPos != nil {
		if _fagg := _ebaf.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _fagg != nil {
			return _fagg
		}
	}
	if _ebaf.SpPr != nil {
		if _ecac := _ebaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ecac != nil {
			return _ecac
		}
	}
	if _ebaf.TxPr != nil {
		if _deec := _ebaf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _deec != nil {
			return _deec
		}
	}
	if _gdeg := _ebaf.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _gdeg != nil {
		return _gdeg
	}
	if _ebaf.Choice != nil {
		if _efbfa := _ebaf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _efbfa != nil {
			return _efbfa
		}
	}
	if _ebaf.Auto != nil {
		if _ebfa := _ebaf.Auto.ValidateWithPath(path + "\u002f\u0041\u0075t\u006f"); _ebfa != nil {
			return _ebfa
		}
	}
	if _ebaf.LblOffset != nil {
		if _bdee := _ebaf.LblOffset.ValidateWithPath(path + "\u002f\u004c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"); _bdee != nil {
			return _bdee
		}
	}
	if _ebaf.BaseTimeUnit != nil {
		if _adgca := _ebaf.BaseTimeUnit.ValidateWithPath(path + "\u002f\u0042\u0061\u0073\u0065\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"); _adgca != nil {
			return _adgca
		}
	}
	if _ebaf.MajorUnit != nil {
		if _dbdf := _ebaf.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _dbdf != nil {
			return _dbdf
		}
	}
	if _ebaf.MajorTimeUnit != nil {
		if _cac := _ebaf.MajorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _cac != nil {
			return _cac
		}
	}
	if _ebaf.MinorUnit != nil {
		if _gcebf := _ebaf.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _gcebf != nil {
			return _gcebf
		}
	}
	if _ebaf.MinorTimeUnit != nil {
		if _acbbf := _ebaf.MinorTimeUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u006de\u0055\u006e\u0069\u0074"); _acbbf != nil {
			return _acbbf
		}
	}
	if _ebaf.ExtLst != nil {
		if _dafb := _ebaf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dafb != nil {
			return _dafb
		}
	}
	return nil
}

func (_efafa ST_Grouping) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_agaafa := _e.Attr{}
	_agaafa.Name = name
	switch _efafa {
	case ST_GroupingUnset:
		_agaafa.Value = ""
	case ST_GroupingPercentStacked:
		_agaafa.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_GroupingStandard:
		_agaafa.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_GroupingStacked:
		_agaafa.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _agaafa, nil
}

type CT_DispUnitsChoice struct {
	CustUnit    *CT_Double
	BuiltInUnit *CT_BuiltInUnit
}

func (_cfgde *ST_PictureFormat) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ccegg, _afdfe := d.Token()
	if _afdfe != nil {
		return _afdfe
	}
	if _feddf, _eggaa := _ccegg.(_e.EndElement); _eggaa && _feddf.Name == start.Name {
		*_cfgde = 1
		return nil
	}
	if _bbcc, _deecf := _ccegg.(_e.CharData); !_deecf {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _ccegg)
	} else {
		switch string(_bbcc) {
		case "":
			*_cfgde = 0
		case "\u0073t\u0072\u0065\u0074\u0063\u0068":
			*_cfgde = 1
		case "\u0073\u0074\u0061c\u006b":
			*_cfgde = 2
		case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
			*_cfgde = 3
		}
	}
	_ccegg, _afdfe = d.Token()
	if _afdfe != nil {
		return _afdfe
	}
	if _fdfafc, _dcabab := _ccegg.(_e.EndElement); _dcabab && _fdfafc.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _ccegg)
}

func (_dcdfe *EG_AxShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcdfe.AxId = NewCT_UnsignedInt()
	_dcdfe.Scaling = NewCT_Scaling()
	_dcdfe.AxPos = NewCT_AxPos()
	_dcdfe.CrossAx = NewCT_UnsignedInt()
_dfcfe:
	for {
		_egaac, _edbea := d.Token()
		if _edbea != nil {
			return _edbea
		}
		switch _ecddb := _egaac.(type) {
		case _e.StartElement:
			switch _ecddb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _baef := d.DecodeElement(_dcdfe.AxId, &_ecddb); _baef != nil {
					return _baef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _ffgaa := d.DecodeElement(_dcdfe.Scaling, &_ecddb); _ffgaa != nil {
					return _ffgaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_dcdfe.Delete = NewCT_Boolean()
				if _gbbb := d.DecodeElement(_dcdfe.Delete, &_ecddb); _gbbb != nil {
					return _gbbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _fgecg := d.DecodeElement(_dcdfe.AxPos, &_ecddb); _fgecg != nil {
					return _fgecg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_dcdfe.MajorGridlines = NewCT_ChartLines()
				if _cbaeag := d.DecodeElement(_dcdfe.MajorGridlines, &_ecddb); _cbaeag != nil {
					return _cbaeag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_dcdfe.MinorGridlines = NewCT_ChartLines()
				if _efbdb := d.DecodeElement(_dcdfe.MinorGridlines, &_ecddb); _efbdb != nil {
					return _efbdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_dcdfe.Title = NewCT_Title()
				if _gbgf := d.DecodeElement(_dcdfe.Title, &_ecddb); _gbgf != nil {
					return _gbgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_dcdfe.NumFmt = NewCT_NumFmt()
				if _gbeca := d.DecodeElement(_dcdfe.NumFmt, &_ecddb); _gbeca != nil {
					return _gbeca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_dcdfe.MajorTickMark = NewCT_TickMark()
				if _addd := d.DecodeElement(_dcdfe.MajorTickMark, &_ecddb); _addd != nil {
					return _addd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_dcdfe.MinorTickMark = NewCT_TickMark()
				if _faadb := d.DecodeElement(_dcdfe.MinorTickMark, &_ecddb); _faadb != nil {
					return _faadb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_dcdfe.TickLblPos = NewCT_TickLblPos()
				if _efcg := d.DecodeElement(_dcdfe.TickLblPos, &_ecddb); _efcg != nil {
					return _efcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dcdfe.SpPr = _bb.NewCT_ShapeProperties()
				if _eebgf := d.DecodeElement(_dcdfe.SpPr, &_ecddb); _eebgf != nil {
					return _eebgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_dcdfe.TxPr = _bb.NewCT_TextBody()
				if _fedag := d.DecodeElement(_dcdfe.TxPr, &_ecddb); _fedag != nil {
					return _fedag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _edace := d.DecodeElement(_dcdfe.CrossAx, &_ecddb); _edace != nil {
					return _edace
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_dcdfe.Choice = NewEG_AxSharedChoice()
				if _eeagd := d.DecodeElement(&_dcdfe.Choice.Crosses, &_ecddb); _eeagd != nil {
					return _eeagd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_dcdfe.Choice = NewEG_AxSharedChoice()
				if _gggaa := d.DecodeElement(&_dcdfe.Choice.CrossesAt, &_ecddb); _gggaa != nil {
					return _gggaa
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _ecddb.Name)
				if _efagg := d.Skip(); _efagg != nil {
					return _efagg
				}
			}
		case _e.EndElement:
			break _dfcfe
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the Group_DLbl and its children
func (_gcdbg *Group_DLbl) Validate() error {
	return _gcdbg.ValidateWithPath("\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c")
}

// ValidateWithPath validates the CT_Layout and its children, prefixing error messages with path
func (_agegc *CT_Layout) ValidateWithPath(path string) error {
	if _agegc.ManualLayout != nil {
		if _cddg := _agegc.ManualLayout.ValidateWithPath(path + "\u002f\u004d\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074"); _cddg != nil {
			return _cddg
		}
	}
	if _agegc.ExtLst != nil {
		if _dfaf := _agegc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfaf != nil {
			return _dfaf
		}
	}
	return nil
}

// Validate validates the CT_MarkerSize and its children
func (_daga *CT_MarkerSize) Validate() error {
	return _daga.ValidateWithPath("\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065")
}

// ValidateWithPath validates the Chart and its children, prefixing error messages with path
func (_cgca *Chart) ValidateWithPath(path string) error {
	if _aefa := _cgca.CT_RelId.ValidateWithPath(path); _aefa != nil {
		return _aefa
	}
	return nil
}

// ValidateWithPath validates the Group_DLbls and its children, prefixing error messages with path
func (_gfbdgaa *Group_DLbls) ValidateWithPath(path string) error {
	if _gfbdgaa.NumFmt != nil {
		if _ccfcb := _gfbdgaa.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _ccfcb != nil {
			return _ccfcb
		}
	}
	if _gfbdgaa.SpPr != nil {
		if _gafca := _gfbdgaa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gafca != nil {
			return _gafca
		}
	}
	if _gfbdgaa.TxPr != nil {
		if _gbcaa := _gfbdgaa.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _gbcaa != nil {
			return _gbcaa
		}
	}
	if _gfbdgaa.DLblPos != nil {
		if _fdedf := _gfbdgaa.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _fdedf != nil {
			return _fdedf
		}
	}
	if _gfbdgaa.ShowLegendKey != nil {
		if _egge := _gfbdgaa.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _egge != nil {
			return _egge
		}
	}
	if _gfbdgaa.ShowVal != nil {
		if _aaga := _gfbdgaa.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _aaga != nil {
			return _aaga
		}
	}
	if _gfbdgaa.ShowCatName != nil {
		if _gfca := _gfbdgaa.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _gfca != nil {
			return _gfca
		}
	}
	if _gfbdgaa.ShowSerName != nil {
		if _cggfgd := _gfbdgaa.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _cggfgd != nil {
			return _cggfgd
		}
	}
	if _gfbdgaa.ShowPercent != nil {
		if _bdca := _gfbdgaa.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _bdca != nil {
			return _bdca
		}
	}
	if _gfbdgaa.ShowBubbleSize != nil {
		if _efbff := _gfbdgaa.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _efbff != nil {
			return _efbff
		}
	}
	if _gfbdgaa.ShowLeaderLines != nil {
		if _geede := _gfbdgaa.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _geede != nil {
			return _geede
		}
	}
	if _gfbdgaa.LeaderLines != nil {
		if _egag := _gfbdgaa.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _egag != nil {
			return _egag
		}
	}
	return nil
}

func NewCT_Surface() *CT_Surface { _gbefb := &CT_Surface{}; return _gbefb }

type CT_DispUnitsLbl struct {
	Layout *CT_Layout
	Tx     *CT_Tx
	SpPr   *_bb.CT_ShapeProperties
	TxPr   *_bb.CT_TextBody
}

// ValidateWithPath validates the CT_HeaderFooter and its children, prefixing error messages with path
func (_eggaf *CT_HeaderFooter) ValidateWithPath(path string) error { return nil }

func (_bdgde ST_LblAlgn) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bdgde.String(), start)
}

type CT_Trendline struct {
	Name          *string
	SpPr          *_bb.CT_ShapeProperties
	TrendlineType *CT_TrendlineType
	Order         *CT_Order
	Period        *CT_Period
	Forward       *CT_Double
	Backward      *CT_Double
	Intercept     *CT_Double
	DispRSqr      *CT_Boolean
	DispEq        *CT_Boolean
	TrendlineLbl  *CT_TrendlineLbl
	ExtLst        *CT_ExtensionList
}

func (_febge *CT_NumData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _febge.FormatCode != nil {
		_cffd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}}
		_g.AddPreserveSpaceAttr(&_cffd, *_febge.FormatCode)
		e.EncodeElement(_febge.FormatCode, _cffd)
	}
	if _febge.PtCount != nil {
		_egabd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_febge.PtCount, _egabd)
	}
	if _febge.Pt != nil {
		_fadff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _gfcg := range _febge.Pt {
			e.EncodeElement(_gfcg, _fadff)
		}
	}
	if _febge.ExtLst != nil {
		_baaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_febge.ExtLst, _baaf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fedagf ST_PictureFormat) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fedagf.String(), start)
}

func (_degdf *CT_DPt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_degdf.Idx = NewCT_UnsignedInt()
_bdb:
	for {
		_add, _bfda := d.Token()
		if _bfda != nil {
			return _bfda
		}
		switch _cgfg := _add.(type) {
		case _e.StartElement:
			switch _cgfg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ccea := d.DecodeElement(_degdf.Idx, &_cgfg); _ccea != nil {
					return _ccea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_degdf.InvertIfNegative = NewCT_Boolean()
				if _bbga := d.DecodeElement(_degdf.InvertIfNegative, &_cgfg); _bbga != nil {
					return _bbga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_degdf.Marker = NewCT_Marker()
				if _fdccg := d.DecodeElement(_degdf.Marker, &_cgfg); _fdccg != nil {
					return _fdccg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_degdf.Bubble3D = NewCT_Boolean()
				if _daaa := d.DecodeElement(_degdf.Bubble3D, &_cgfg); _daaa != nil {
					return _daaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_degdf.Explosion = NewCT_UnsignedInt()
				if _ffbbb := d.DecodeElement(_degdf.Explosion, &_cgfg); _ffbbb != nil {
					return _ffbbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_degdf.SpPr = _bb.NewCT_ShapeProperties()
				if _gfgb := d.DecodeElement(_degdf.SpPr, &_cgfg); _gfgb != nil {
					return _gfgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_degdf.PictureOptions = NewCT_PictureOptions()
				if _ccaf := d.DecodeElement(_degdf.PictureOptions, &_cgfg); _ccaf != nil {
					return _ccaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_degdf.ExtLst = NewCT_ExtensionList()
				if _dbee := d.DecodeElement(_degdf.ExtLst, &_cgfg); _dbee != nil {
					return _dbee
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0050\u0074\u0020\u0025\u0076", _cgfg.Name)
				if _gaba := d.Skip(); _gaba != nil {
					return _gaba
				}
			}
		case _e.EndElement:
			break _bdb
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_AxDataSource() *CT_AxDataSource {
	_gbc := &CT_AxDataSource{}
	_gbc.Choice = NewCT_AxDataSourceChoice()
	return _gbc
}

// Validate validates the CT_Area3DChart and its children
func (_dc *CT_Area3DChart) Validate() error {
	return _dc.ValidateWithPath("\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074")
}

type CT_Surface3DChart struct {
	Wireframe *CT_Boolean
	Ser       []*CT_SurfaceSer
	BandFmts  *CT_BandFmts
	AxId      []*CT_UnsignedInt
	ExtLst    *CT_ExtensionList
}

// Validate validates the EG_SurfaceChartShared and its children
func (_adff *EG_SurfaceChartShared) Validate() error {
	return _adff.ValidateWithPath("E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064")
}

func (_gcae *CT_PieChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gcae.VaryColors != nil {
		_aeac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gcae.VaryColors, _aeac)
	}
	if _gcae.Ser != nil {
		_gfadc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cfabb := range _gcae.Ser {
			e.EncodeElement(_cfabb, _gfadc)
		}
	}
	if _gcae.DLbls != nil {
		_fafcb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gcae.DLbls, _fafcb)
	}
	if _gcae.FirstSliceAng != nil {
		_ddead := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_gcae.FirstSliceAng, _ddead)
	}
	if _gcae.ExtLst != nil {
		_adaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gcae.ExtLst, _adaa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eaeff ST_OfPieType) ValidateWithPath(path string) error {
	switch _eaeff {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eaeff))
	}
	return nil
}

// ValidateWithPath validates the CT_Overlap and its children, prefixing error messages with path
func (_dadfg *CT_Overlap) ValidateWithPath(path string) error {
	if _dadfg.ValAttr != nil {
		if _dgbg := _dadfg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _dgbg != nil {
			return _dgbg
		}
	}
	return nil
}

func (_beb *CT_AxDataSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_beb.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_TimeUnit and its children, prefixing error messages with path
func (_bgfdfb *CT_TimeUnit) ValidateWithPath(path string) error {
	if _gdgcg := _bgfdfb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gdgcg != nil {
		return _gdgcg
	}
	return nil
}

// Validate validates the CT_LayoutTarget and its children
func (_bcag *CT_LayoutTarget) Validate() error {
	return _bcag.ValidateWithPath("\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074")
}

func (_fbbc *CT_Legend) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bgfg:
	for {
		_fdfe, _dffd := d.Token()
		if _dffd != nil {
			return _dffd
		}
		switch _ecgd := _fdfe.(type) {
		case _e.StartElement:
			switch _ecgd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006ce\u0067\u0065\u006e\u0064\u0050\u006fs"}:
				_fbbc.LegendPos = NewCT_LegendPos()
				if _efag := d.DecodeElement(_fbbc.LegendPos, &_ecgd); _efag != nil {
					return _efag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}:
				_gdcda := NewCT_LegendEntry()
				if _fdfef := d.DecodeElement(_gdcda, &_ecgd); _fdfef != nil {
					return _fdfef
				}
				_fbbc.LegendEntry = append(_fbbc.LegendEntry, _gdcda)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_fbbc.Layout = NewCT_Layout()
				if _ccce := d.DecodeElement(_fbbc.Layout, &_ecgd); _ccce != nil {
					return _ccce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006fv\u0065\u0072\u006c\u0061\u0079"}:
				_fbbc.Overlay = NewCT_Boolean()
				if _gebad := d.DecodeElement(_fbbc.Overlay, &_ecgd); _gebad != nil {
					return _gebad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbbc.SpPr = _bb.NewCT_ShapeProperties()
				if _bgfd := d.DecodeElement(_fbbc.SpPr, &_ecgd); _bgfd != nil {
					return _bgfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fbbc.TxPr = _bb.NewCT_TextBody()
				if _cacd := d.DecodeElement(_fbbc.TxPr, &_ecgd); _cacd != nil {
					return _cacd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbbc.ExtLst = NewCT_ExtensionList()
				if _cdcag := d.DecodeElement(_fbbc.ExtLst, &_ecgd); _cdcag != nil {
					return _cdcag
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004c\u0065\u0067e\u006e\u0064 \u0025\u0076", _ecgd.Name)
				if _eeec := d.Skip(); _eeec != nil {
					return _eeec
				}
			}
		case _e.EndElement:
			break _bgfg
		case _e.CharData:
		}
	}
	return nil
}

func (_gdddg *CT_Scaling) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gdddg.LogBase != nil {
		_adac := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006c\u006f\u0067\u0042\u0061\u0073e"}}
		e.EncodeElement(_gdddg.LogBase, _adac)
	}
	if _gdddg.Orientation != nil {
		_gagbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006f\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_gdddg.Orientation, _gagbc)
	}
	if _gdddg.Max != nil {
		_dbdee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006da\u0078"}}
		e.EncodeElement(_gdddg.Max, _dbdee)
	}
	if _gdddg.Min != nil {
		_gffbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006di\u006e"}}
		e.EncodeElement(_gdddg.Min, _gffbb)
	}
	if _gdddg.ExtLst != nil {
		_ffbfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gdddg.ExtLst, _ffbfc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ecga ST_CrossBetween) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_deafa := _e.Attr{}
	_deafa.Name = name
	switch _ecga {
	case ST_CrossBetweenUnset:
		_deafa.Value = ""
	case ST_CrossBetweenBetween:
		_deafa.Value = "\u0062e\u0074\u0077\u0065\u0065\u006e"
	case ST_CrossBetweenMidCat:
		_deafa.Value = "\u006d\u0069\u0064\u0043\u0061\u0074"
	}
	return _deafa, nil
}

// ST_Thickness is a union type
type ST_Thickness struct {
	ST_ThicknessPercent *string
	Uint32              *uint32
}

// ValidateWithPath validates the CT_OfPieChart and its children, prefixing error messages with path
func (_afcd *CT_OfPieChart) ValidateWithPath(path string) error {
	if _aggga := _afcd.OfPieType.ValidateWithPath(path + "\u002f\u004f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"); _aggga != nil {
		return _aggga
	}
	if _afcd.VaryColors != nil {
		if _deeg := _afcd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _deeg != nil {
			return _deeg
		}
	}
	for _aefd, _gbfg := range _afcd.Ser {
		if _adgg := _gbfg.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _aefd)); _adgg != nil {
			return _adgg
		}
	}
	if _afcd.DLbls != nil {
		if _geeea := _afcd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _geeea != nil {
			return _geeea
		}
	}
	if _afcd.GapWidth != nil {
		if _bgacd := _afcd.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _bgacd != nil {
			return _bgacd
		}
	}
	if _afcd.SplitType != nil {
		if _ggddb := _afcd.SplitType.ValidateWithPath(path + "\u002f\u0053\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"); _ggddb != nil {
			return _ggddb
		}
	}
	if _afcd.SplitPos != nil {
		if _dbbb := _afcd.SplitPos.ValidateWithPath(path + "\u002fS\u0070\u006c\u0069\u0074\u0050\u006fs"); _dbbb != nil {
			return _dbbb
		}
	}
	if _afcd.CustSplit != nil {
		if _agdg := _afcd.CustSplit.ValidateWithPath(path + "\u002f\u0043\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"); _agdg != nil {
			return _agdg
		}
	}
	if _afcd.SecondPieSize != nil {
		if _aegbd := _afcd.SecondPieSize.ValidateWithPath(path + "\u002f\u0053\u0065\u0063\u006f\u006e\u0064\u0050\u0069e\u0053\u0069\u007a\u0065"); _aegbd != nil {
			return _aegbd
		}
	}
	for _cgdee, _efda := range _afcd.SerLines {
		if _aggcb := _efda.ValidateWithPath(_a.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _cgdee)); _aggcb != nil {
			return _aggcb
		}
	}
	if _afcd.ExtLst != nil {
		if _dfeda := _afcd.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dfeda != nil {
			return _dfeda
		}
	}
	return nil
}

const (
	ST_ErrValTypeUnset      ST_ErrValType = 0
	ST_ErrValTypeCust       ST_ErrValType = 1
	ST_ErrValTypeFixedVal   ST_ErrValType = 2
	ST_ErrValTypePercentage ST_ErrValType = 3
	ST_ErrValTypeStdDev     ST_ErrValType = 4
	ST_ErrValTypeStdErr     ST_ErrValType = 5
)

func (_d *CT_Area3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cf:
	for {
		_fb, _bgd := d.Token()
		if _bgd != nil {
			return _bgd
		}
		switch _aa := _fb.(type) {
		case _e.StartElement:
			switch _aa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_d.Grouping = NewCT_Grouping()
				if _bed := d.DecodeElement(_d.Grouping, &_aa); _bed != nil {
					return _bed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_d.VaryColors = NewCT_Boolean()
				if _abf := d.DecodeElement(_d.VaryColors, &_aa); _abf != nil {
					return _abf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ggd := NewCT_AreaSer()
				if _fcb := d.DecodeElement(_ggd, &_aa); _fcb != nil {
					return _fcb
				}
				_d.Ser = append(_d.Ser, _ggd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_d.DLbls = NewCT_DLbls()
				if _db := d.DecodeElement(_d.DLbls, &_aa); _db != nil {
					return _db
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_d.DropLines = NewCT_ChartLines()
				if _ff := d.DecodeElement(_d.DropLines, &_aa); _ff != nil {
					return _ff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_d.GapDepth = NewCT_GapAmount()
				if _gec := d.DecodeElement(_d.GapDepth, &_aa); _gec != nil {
					return _gec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_feb := NewCT_UnsignedInt()
				if _beg := d.DecodeElement(_feb, &_aa); _beg != nil {
					return _beg
				}
				_d.AxId = append(_d.AxId, _feb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_d.ExtLst = NewCT_ExtensionList()
				if _bde := d.DecodeElement(_d.ExtLst, &_aa); _bde != nil {
					return _bde
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044\u0043h\u0061r\u0074\u0020\u0025\u0076", _aa.Name)
				if _ffg := d.Skip(); _ffg != nil {
					return _ffg
				}
			}
		case _e.EndElement:
			break _cf
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AreaChart and its children, prefixing error messages with path
func (_ebc *CT_AreaChart) ValidateWithPath(path string) error {
	if _ebc.Grouping != nil {
		if _cab := _ebc.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _cab != nil {
			return _cab
		}
	}
	if _ebc.VaryColors != nil {
		if _bgf := _ebc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bgf != nil {
			return _bgf
		}
	}
	for _ef, _ae := range _ebc.Ser {
		if _bab := _ae.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _ef)); _bab != nil {
			return _bab
		}
	}
	if _ebc.DLbls != nil {
		if _gc := _ebc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _gc != nil {
			return _gc
		}
	}
	if _ebc.DropLines != nil {
		if _gef := _ebc.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _gef != nil {
			return _gef
		}
	}
	for _deb, _bcaa := range _ebc.AxId {
		if _gbe := _bcaa.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _deb)); _gbe != nil {
			return _gbe
		}
	}
	if _ebc.ExtLst != nil {
		if _bgdb := _ebc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bgdb != nil {
			return _bgdb
		}
	}
	return nil
}

type EG_BarChartShared struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
}

func (_dbada *CT_Extension) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _dbada.UriAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0075\u0072\u0069"}, Value: _a.Sprintf("\u0025\u0076", *_dbada.UriAttr)})
	}
	e.EncodeToken(start)
	if _dbada.Any != nil {
		_dbada.Any.MarshalXML(e, _e.StartElement{})
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_Period() *CT_Period { _bfbbe := &CT_Period{}; return _bfbbe }

func (_dgeb *CT_RadarSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dbcbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dgeb.Idx, _dbcbb)
	_fbadd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_dgeb.Order, _fbadd)
	if _dgeb.Tx != nil {
		_fgfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dgeb.Tx, _fgfc)
	}
	if _dgeb.SpPr != nil {
		_bcgge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dgeb.SpPr, _bcgge)
	}
	if _dgeb.Marker != nil {
		_bggcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_dgeb.Marker, _bggcd)
	}
	if _dgeb.DPt != nil {
		_cgaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _gbfde := range _dgeb.DPt {
			e.EncodeElement(_gbfde, _cgaf)
		}
	}
	if _dgeb.DLbls != nil {
		_dcce := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dgeb.DLbls, _dcce)
	}
	if _dgeb.Cat != nil {
		_ddbae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_dgeb.Cat, _ddbae)
	}
	if _dgeb.Val != nil {
		_dafe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_dgeb.Val, _dafe)
	}
	if _dgeb.ExtLst != nil {
		_fdafc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dgeb.ExtLst, _fdafc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_Chart and its children, prefixing error messages with path
func (_fbad *CT_Chart) ValidateWithPath(path string) error {
	if _fbad.Title != nil {
		if _bace := _fbad.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _bace != nil {
			return _bace
		}
	}
	if _fbad.AutoTitleDeleted != nil {
		if _cbgcc := _fbad.AutoTitleDeleted.ValidateWithPath(path + "\u002f\u0041\u0075\u0074\u006f\u0054\u0069\u0074\u006c\u0065\u0044\u0065l\u0065\u0074\u0065\u0064"); _cbgcc != nil {
			return _cbgcc
		}
	}
	if _fbad.PivotFmts != nil {
		if _ddbcb := _fbad.PivotFmts.ValidateWithPath(path + "\u002f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073"); _ddbcb != nil {
			return _ddbcb
		}
	}
	if _fbad.View3D != nil {
		if _feg := _fbad.View3D.ValidateWithPath(path + "\u002fV\u0069\u0065\u0077\u0033\u0044"); _feg != nil {
			return _feg
		}
	}
	if _fbad.Floor != nil {
		if _daee := _fbad.Floor.ValidateWithPath(path + "\u002f\u0046\u006c\u006f\u006f\u0072"); _daee != nil {
			return _daee
		}
	}
	if _fbad.SideWall != nil {
		if _deafd := _fbad.SideWall.ValidateWithPath(path + "\u002fS\u0069\u0064\u0065\u0057\u0061\u006cl"); _deafd != nil {
			return _deafd
		}
	}
	if _fbad.BackWall != nil {
		if _ebfg := _fbad.BackWall.ValidateWithPath(path + "\u002fB\u0061\u0063\u006b\u0057\u0061\u006cl"); _ebfg != nil {
			return _ebfg
		}
	}
	if _cedc := _fbad.PlotArea.ValidateWithPath(path + "\u002fP\u006c\u006f\u0074\u0041\u0072\u0065a"); _cedc != nil {
		return _cedc
	}
	if _fbad.Legend != nil {
		if _fbeca := _fbad.Legend.ValidateWithPath(path + "\u002fL\u0065\u0067\u0065\u006e\u0064"); _fbeca != nil {
			return _fbeca
		}
	}
	if _fbad.PlotVisOnly != nil {
		if _dccg := _fbad.PlotVisOnly.ValidateWithPath(path + "\u002f\u0050\u006co\u0074\u0056\u0069\u0073\u004f\u006e\u006c\u0079"); _dccg != nil {
			return _dccg
		}
	}
	if _fbad.DispBlanksAs != nil {
		if _cebbc := _fbad.DispBlanksAs.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073"); _cebbc != nil {
			return _cebbc
		}
	}
	if _fbad.ShowDLblsOverMax != nil {
		if _fgecd := _fbad.ShowDLblsOverMax.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0044\u004c\u0062\u006c\u0073\u004f\u0076e\u0072\u004d\u0061\u0078"); _fgecd != nil {
			return _fgecd
		}
	}
	if _fbad.ExtLst != nil {
		if _cada := _fbad.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cada != nil {
			return _cada
		}
	}
	return nil
}

func NewEG_SerShared() *EG_SerShared {
	_afgcd := &EG_SerShared{}
	_afgcd.Idx = NewCT_UnsignedInt()
	_afgcd.Order = NewCT_UnsignedInt()
	return _afgcd
}

// Validate validates the CT_LegendEntry and its children
func (_bfgf *CT_LegendEntry) Validate() error {
	return _bfgf.ValidateWithPath("\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079")
}

func (_ggcaf ST_HPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ggcaf.ST_HPercentWithSymbol != nil {
		e.EncodeToken(_e.CharData(*_ggcaf.ST_HPercentWithSymbol))
	}
	if _ggcaf.ST_HPercentUShort != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_ggcaf.ST_HPercentUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

type ST_Orientation byte

// Validate validates the CT_SerTx and its children
func (_cgae *CT_SerTx) Validate() error {
	return _cgae.ValidateWithPath("\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078")
}

func (_aefbc *CT_OfPieChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dfbf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006f\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_aefbc.OfPieType, _dfbf)
	if _aefbc.VaryColors != nil {
		_eebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_aefbc.VaryColors, _eebg)
	}
	if _aefbc.Ser != nil {
		_gdeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gabdb := range _aefbc.Ser {
			e.EncodeElement(_gabdb, _gdeb)
		}
	}
	if _aefbc.DLbls != nil {
		_bdag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_aefbc.DLbls, _bdag)
	}
	if _aefbc.GapWidth != nil {
		_gace := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_aefbc.GapWidth, _gace)
	}
	if _aefbc.SplitType != nil {
		_gccg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065"}}
		e.EncodeElement(_aefbc.SplitType, _gccg)
	}
	if _aefbc.SplitPos != nil {
		_fbcbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u006c\u0069\u0074\u0050\u006f\u0073"}}
		e.EncodeElement(_aefbc.SplitPos, _fbcbd)
	}
	if _aefbc.CustSplit != nil {
		_eeeb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074"}}
		e.EncodeElement(_aefbc.CustSplit, _eeeb)
	}
	if _aefbc.SecondPieSize != nil {
		_fagac := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073e\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_aefbc.SecondPieSize, _fagac)
	}
	if _aefbc.SerLines != nil {
		_cfdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _fbacg := range _aefbc.SerLines {
			e.EncodeElement(_fbacg, _cfdb)
		}
	}
	if _aefbc.ExtLst != nil {
		_dfaef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aefbc.ExtLst, _dfaef)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_AreaSer() *CT_AreaSer {
	_cec := &CT_AreaSer{}
	_cec.Idx = NewCT_UnsignedInt()
	_cec.Order = NewCT_UnsignedInt()
	return _cec
}

func (_gagdc ST_Shape) String() string {
	switch _gagdc {
	case 0:
		return ""
	case 1:
		return "\u0063\u006f\u006e\u0065"
	case 2:
		return "\u0063o\u006e\u0065\u0054\u006f\u004d\u0061x"
	case 3:
		return "\u0062\u006f\u0078"
	case 4:
		return "\u0063\u0079\u006c\u0069\u006e\u0064\u0065\u0072"
	case 5:
		return "\u0070y\u0072\u0061\u006d\u0069\u0064"
	case 6:
		return "\u0070\u0079\u0072a\u006d\u0069\u0064\u0054\u006f\u004d\u0061\u0078"
	}
	return ""
}

// ValidateWithPath validates the CT_DLbl and its children, prefixing error messages with path
func (_ccbag *CT_DLbl) ValidateWithPath(path string) error {
	if _cdee := _ccbag.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _cdee != nil {
		return _cdee
	}
	if _ccbag.Choice != nil {
		if _afbgf := _ccbag.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _afbgf != nil {
			return _afbgf
		}
	}
	if _ccbag.ExtLst != nil {
		if _fbfbg := _ccbag.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fbfbg != nil {
			return _fbfbg
		}
	}
	return nil
}

type CT_Chart struct {
	Title            *CT_Title
	AutoTitleDeleted *CT_Boolean
	PivotFmts        *CT_PivotFmts
	View3D           *CT_View3D
	Floor            *CT_Surface
	SideWall         *CT_Surface
	BackWall         *CT_Surface
	PlotArea         *CT_PlotArea
	Legend           *CT_Legend
	PlotVisOnly      *CT_Boolean
	DispBlanksAs     *CT_DispBlanksAs
	ShowDLblsOverMax *CT_Boolean
	ExtLst           *CT_ExtensionList
}

func NewCT_PrintSettings() *CT_PrintSettings { _ggea := &CT_PrintSettings{}; return _ggea }

func NewCT_DLblChoice() *CT_DLblChoice { _bfff := &CT_DLblChoice{}; return _bfff }

func (_acfg ST_ErrValType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ababe := _e.Attr{}
	_ababe.Name = name
	switch _acfg {
	case ST_ErrValTypeUnset:
		_ababe.Value = ""
	case ST_ErrValTypeCust:
		_ababe.Value = "\u0063\u0075\u0073\u0074"
	case ST_ErrValTypeFixedVal:
		_ababe.Value = "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case ST_ErrValTypePercentage:
		_ababe.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case ST_ErrValTypeStdDev:
		_ababe.Value = "\u0073\u0074\u0064\u0044\u0065\u0076"
	case ST_ErrValTypeStdErr:
		_ababe.Value = "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return _ababe, nil
}

func (_gaefa ST_DLblPos) Validate() error { return _gaefa.ValidateWithPath("") }

// ValidateWithPath validates the CT_Perspective and its children, prefixing error messages with path
func (_dagg *CT_Perspective) ValidateWithPath(path string) error {
	if _dagg.ValAttr != nil {
		if *_dagg.ValAttr < 0 {
			return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, *_dagg.ValAttr)
		}
		if *_dagg.ValAttr > 240 {
			return _a.Errorf("\u0025\u0073/\u006d\u002e\u0056\u0061l\u0041\u0074t\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u003c\u003d\u0020\u0032\u0034\u0030\u0020\u0028\u0068\u0061\u0076e\u0020\u0025\u0076\u0029", path, *_dagg.ValAttr)
		}
	}
	return nil
}

// Validate validates the CT_PlotAreaChoice and its children
func (_fcbfc *CT_PlotAreaChoice) Validate() error {
	return _fcbfc.ValidateWithPath("\u0043\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061\u0043h\u006f\u0069\u0063\u0065")
}

func (_ebcae *CT_NumData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fbcb:
	for {
		_gfcdc, _cfff := d.Token()
		if _cfff != nil {
			return _cfff
		}
		switch _bedb := _gfcdc.(type) {
		case _e.StartElement:
			switch _bedb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}:
				_ebcae.FormatCode = new(string)
				if _bgccc := d.DecodeElement(_ebcae.FormatCode, &_bedb); _bgccc != nil {
					return _bgccc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070t\u0043\u006f\u0075\u006e\u0074"}:
				_ebcae.PtCount = NewCT_UnsignedInt()
				if _egde := d.DecodeElement(_ebcae.PtCount, &_bedb); _egde != nil {
					return _egde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0074"}:
				_gebd := NewCT_NumVal()
				if _gbff := d.DecodeElement(_gebd, &_bedb); _gbff != nil {
					return _gbff
				}
				_ebcae.Pt = append(_ebcae.Pt, _gebd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebcae.ExtLst = NewCT_ExtensionList()
				if _ffae := d.DecodeElement(_ebcae.ExtLst, &_bedb); _ffae != nil {
					return _ffae
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fN\u0075\u006d\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _bedb.Name)
				if _fcag := d.Skip(); _fcag != nil {
					return _fcag
				}
			}
		case _e.EndElement:
			break _fbcb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ScatterStyle and its children, prefixing error messages with path
func (_ffeeg *CT_ScatterStyle) ValidateWithPath(path string) error {
	if _gfbbc := _ffeeg.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gfbbc != nil {
		return _gfbbc
	}
	return nil
}

const (
	ST_LayoutTargetUnset ST_LayoutTarget = 0
	ST_LayoutTargetInner ST_LayoutTarget = 1
	ST_LayoutTargetOuter ST_LayoutTarget = 2
)

func (_adbgd ST_GapAmount) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _adbgd.ST_GapAmountPercent != nil {
		e.EncodeToken(_e.CharData(*_adbgd.ST_GapAmountPercent))
	}
	if _adbgd.ST_GapAmountUShort != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_adbgd.ST_GapAmountUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

// ValidateWithPath validates the CT_DoughnutChart and its children, prefixing error messages with path
func (_cbef *CT_DoughnutChart) ValidateWithPath(path string) error {
	if _cbef.VaryColors != nil {
		if _gbfag := _cbef.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gbfag != nil {
			return _gbfag
		}
	}
	for _baee, _gedc := range _cbef.Ser {
		if _bbfba := _gedc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _baee)); _bbfba != nil {
			return _bbfba
		}
	}
	if _cbef.DLbls != nil {
		if _dffe := _cbef.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dffe != nil {
			return _dffe
		}
	}
	if _cbef.FirstSliceAng != nil {
		if _eece := _cbef.FirstSliceAng.ValidateWithPath(path + "\u002f\u0046\u0069\u0072\u0073\u0074\u0053\u006c\u0069c\u0065\u0041\u006e\u0067"); _eece != nil {
			return _eece
		}
	}
	if _cbef.HoleSize != nil {
		if _ceg := _cbef.HoleSize.ValidateWithPath(path + "\u002fH\u006f\u006c\u0065\u0053\u0069\u007ae"); _ceg != nil {
			return _ceg
		}
	}
	if _cbef.ExtLst != nil {
		if _dacd := _cbef.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dacd != nil {
			return _dacd
		}
	}
	return nil
}

func (_fefaec ST_AxPos) String() string {
	switch _fefaec {
	case 0:
		return ""
	case 1:
		return "\u0062"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	case 4:
		return "\u0074"
	}
	return ""
}

type ST_Shape byte

// ValidateWithPath validates the EG_SerShared and its children, prefixing error messages with path
func (_aegbc *EG_SerShared) ValidateWithPath(path string) error {
	if _fbaab := _aegbc.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fbaab != nil {
		return _fbaab
	}
	if _dggd := _aegbc.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _dggd != nil {
		return _dggd
	}
	if _aegbc.Tx != nil {
		if _babcc := _aegbc.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _babcc != nil {
			return _babcc
		}
	}
	if _aegbc.SpPr != nil {
		if _ffgaaa := _aegbc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ffgaaa != nil {
			return _ffgaaa
		}
	}
	return nil
}

func (_bgeg ST_LegendPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gaffe := _e.Attr{}
	_gaffe.Name = name
	switch _bgeg {
	case ST_LegendPosUnset:
		_gaffe.Value = ""
	case ST_LegendPosB:
		_gaffe.Value = "\u0062"
	case ST_LegendPosTr:
		_gaffe.Value = "\u0074\u0072"
	case ST_LegendPosL:
		_gaffe.Value = "\u006c"
	case ST_LegendPosR:
		_gaffe.Value = "\u0072"
	case ST_LegendPosT:
		_gaffe.Value = "\u0074"
	}
	return _gaffe, nil
}

// Validate validates the EG_AxShared and its children
func (_fadgd *EG_AxShared) Validate() error {
	return _fadgd.ValidateWithPath("E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064")
}

func (_ccbad *CT_Line3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_aaba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
	e.EncodeElement(_ccbad.Grouping, _aaba)
	if _ccbad.VaryColors != nil {
		_cbad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_ccbad.VaryColors, _cbad)
	}
	if _ccbad.Ser != nil {
		_cdba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _eddf := range _ccbad.Ser {
			e.EncodeElement(_eddf, _cdba)
		}
	}
	if _ccbad.DLbls != nil {
		_fadd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_ccbad.DLbls, _fadd)
	}
	if _ccbad.DropLines != nil {
		_agda := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_ccbad.DropLines, _agda)
	}
	if _ccbad.GapDepth != nil {
		_eacc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_ccbad.GapDepth, _eacc)
	}
	_aeea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _agead := range _ccbad.AxId {
		e.EncodeElement(_agead, _aeea)
	}
	if _ccbad.ExtLst != nil {
		_fbeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_ccbad.ExtLst, _fbeg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_LineChart and its children
func (_ffdd *CT_LineChart) Validate() error {
	return _ffdd.ValidateWithPath("\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074")
}

func (_ffbbba ST_ErrValType) ValidateWithPath(path string) error {
	switch _ffbbba {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ffbbba))
	}
	return nil
}

func (_gdcde *ST_RadarStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gdcde = 0
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_gdcde = 1
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_gdcde = 2
	case "\u0066\u0069\u006c\u006c\u0065\u0064":
		*_gdcde = 3
	}
	return nil
}

func (_dadab ST_RadarStyle) String() string {
	switch _dadab {
	case 0:
		return ""
	case 1:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 2:
		return "\u006d\u0061\u0072\u006b\u0065\u0072"
	case 3:
		return "\u0066\u0069\u006c\u006c\u0065\u0064"
	}
	return ""
}

// Validate validates the CT_StrRef and its children
func (_debff *CT_StrRef) Validate() error {
	return _debff.ValidateWithPath("\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f")
}

func NewCT_NumVal() *CT_NumVal { _cfbe := &CT_NumVal{}; return _cfbe }

// Validate validates the CT_UpDownBars and its children
func (_bcabb *CT_UpDownBars) Validate() error {
	return _bcabb.ValidateWithPath("\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073")
}

func (_cedfg ST_DispBlanksAs) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_aacde := _e.Attr{}
	_aacde.Name = name
	switch _cedfg {
	case ST_DispBlanksAsUnset:
		_aacde.Value = ""
	case ST_DispBlanksAsSpan:
		_aacde.Value = "\u0073\u0070\u0061\u006e"
	case ST_DispBlanksAsGap:
		_aacde.Value = "\u0067\u0061\u0070"
	case ST_DispBlanksAsZero:
		_aacde.Value = "\u007a\u0065\u0072\u006f"
	}
	return _aacde, nil
}

func NewCT_HPercent() *CT_HPercent { _bgggb := &CT_HPercent{}; return _bgggb }

func NewCT_BandFmts() *CT_BandFmts { _bdf := &CT_BandFmts{}; return _bdf }

func ParseUnionST_HoleSize(s string) (ST_HoleSize, error) {
	if ST_HoleSizePercentPatternRe.MatchString(s) {
		return ST_HoleSize{ST_HoleSizePercent: &s}, nil
	}
	_cccfe, _adbfb := _bg.ParseUint(s, 10, 8)
	if _adbfb != nil {
		return ST_HoleSize{}, _adbfb
	}
	_gccaa := uint8(_cccfe)
	return ST_HoleSize{ST_HoleSizeUByte: &_gccaa}, nil
}

type ST_Grouping byte

type ST_BarGrouping byte

func (_edfd ST_TrendlineType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_edfd.String(), start)
}

func (_aecbc *ST_Overlap) Validate() error { return _aecbc.ValidateWithPath("") }

func (_gdgb *CT_Thickness) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _gdgb.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DLblChoice and its children
func (_aefb *CT_DLblChoice) Validate() error {
	return _aefb.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0043\u0068\u006f\u0069\u0063\u0065")
}

// Validate validates the CT_DPt and its children
func (_eagf *CT_DPt) Validate() error {
	return _eagf.ValidateWithPath("\u0043\u0054\u005f\u0044\u0050\u0074")
}

func (_agggd ST_HoleSize) String() string {
	if _agggd.ST_HoleSizePercent != nil {
		return _a.Sprintf("\u0025\u0076", *_agggd.ST_HoleSizePercent)
	}
	if _agggd.ST_HoleSizeUByte != nil {
		return _a.Sprintf("\u0025\u0076", *_agggd.ST_HoleSizeUByte)
	}
	return ""
}

type CT_AreaSer struct {
	Idx            *CT_UnsignedInt
	Order          *CT_UnsignedInt
	Tx             *CT_SerTx
	SpPr           *_bb.CT_ShapeProperties
	PictureOptions *CT_PictureOptions
	DPt            []*CT_DPt
	DLbls          *CT_DLbls
	Trendline      []*CT_Trendline
	ErrBars        []*CT_ErrBars
	Cat            *CT_AxDataSource
	Val            *CT_NumDataSource
	ExtLst         *CT_ExtensionList
}

func (_bgcfg *ST_LblAlgn) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bgcfg = 0
	case "\u0063\u0074\u0072":
		*_bgcfg = 1
	case "\u006c":
		*_bgcfg = 2
	case "\u0072":
		*_bgcfg = 3
	}
	return nil
}

func NewCT_ChartLines() *CT_ChartLines { _bcbb := &CT_ChartLines{}; return _bcbb }

func (_cabcg ST_TimeUnit) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_dddea := _e.Attr{}
	_dddea.Name = name
	switch _cabcg {
	case ST_TimeUnitUnset:
		_dddea.Value = ""
	case ST_TimeUnitDays:
		_dddea.Value = "\u0064\u0061\u0079\u0073"
	case ST_TimeUnitMonths:
		_dddea.Value = "\u006d\u006f\u006e\u0074\u0068\u0073"
	case ST_TimeUnitYears:
		_dddea.Value = "\u0079\u0065\u0061r\u0073"
	}
	return _dddea, nil
}

func (_cafga *EG_PieChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cafga.VaryColors != nil {
		_eegd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cafga.VaryColors, _eegd)
	}
	if _cafga.Ser != nil {
		_eggff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _acbd := range _cafga.Ser {
			e.EncodeElement(_acbd, _eggff)
		}
	}
	if _cafga.DLbls != nil {
		_gcdag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cafga.DLbls, _gcdag)
	}
	return nil
}

// Validate validates the CT_PictureStackUnit and its children
func (_ecge *CT_PictureStackUnit) Validate() error {
	return _ecge.ValidateWithPath("\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074")
}

func (_dagec *ST_DLblPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_dagec = 0
	case "\u0062e\u0073\u0074\u0046\u0069\u0074":
		*_dagec = 1
	case "\u0062":
		*_dagec = 2
	case "\u0063\u0074\u0072":
		*_dagec = 3
	case "\u0069\u006e\u0042\u0061\u0073\u0065":
		*_dagec = 4
	case "\u0069\u006e\u0045n\u0064":
		*_dagec = 5
	case "\u006c":
		*_dagec = 6
	case "\u006f\u0075\u0074\u0045\u006e\u0064":
		*_dagec = 7
	case "\u0072":
		*_dagec = 8
	case "\u0074":
		*_dagec = 9
	}
	return nil
}

func (_cafbe *ST_HPercent) ValidateWithPath(path string) error {
	_gcgde := []string{}
	if _cafbe.ST_HPercentWithSymbol != nil {
		_gcgde = append(_gcgde, "S\u0054\u005f\u0048\u0050er\u0063e\u006e\u0074\u0057\u0069\u0074h\u0053\u0079\u006d\u0062\u006f\u006c")
	}
	if _cafbe.ST_HPercentUShort != nil {
		_gcgde = append(_gcgde, "\u0053\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074\u0055S\u0068\u006f\u0072\u0074")
	}
	if len(_gcgde) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _gcgde)
	}
	return nil
}

// Validate validates the CT_Tx and its children
func (_gacd *CT_Tx) Validate() error { return _gacd.ValidateWithPath("\u0043\u0054\u005fT\u0078") }

// Validate validates the CT_ErrDir and its children
func (_ggcd *CT_ErrDir) Validate() error {
	return _ggcd.ValidateWithPath("\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r")
}

func (_gdee *ST_Grouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_aegab, _eggde := d.Token()
	if _eggde != nil {
		return _eggde
	}
	if _eeafd, _gdbd := _aegab.(_e.EndElement); _gdbd && _eeafd.Name == start.Name {
		*_gdee = 1
		return nil
	}
	if _ffegg, _caagg := _aegab.(_e.CharData); !_caagg {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _aegab)
	} else {
		switch string(_ffegg) {
		case "":
			*_gdee = 0
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
			*_gdee = 1
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_gdee = 2
		case "\u0073t\u0061\u0063\u006b\u0065\u0064":
			*_gdee = 3
		}
	}
	_aegab, _eggde = d.Token()
	if _eggde != nil {
		return _eggde
	}
	if _addga, _gbace := _aegab.(_e.EndElement); _gbace && _addga.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _aegab)
}

type CT_View3D struct {
	RotX         *CT_RotX
	HPercent     *CT_HPercent
	RotY         *CT_RotY
	DepthPercent *CT_DepthPercent
	RAngAx       *CT_Boolean
	Perspective  *CT_Perspective
	ExtLst       *CT_ExtensionList
}

type CT_DateAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	Auto           *CT_Boolean
	LblOffset      *CT_LblOffset
	BaseTimeUnit   *CT_TimeUnit
	MajorUnit      *CT_AxisUnit
	MajorTimeUnit  *CT_TimeUnit
	MinorUnit      *CT_AxisUnit
	MinorTimeUnit  *CT_TimeUnit
	ExtLst         *CT_ExtensionList
}

func (_cfebac ST_LegendPos) ValidateWithPath(path string) error {
	switch _cfebac {
	case 0, 1, 2, 3, 4, 5:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cfebac))
	}
	return nil
}

type CT_LayoutTarget struct{ ValAttr ST_LayoutTarget }

// Validate validates the EG_AxSharedChoice and its children
func (_cccdg *EG_AxSharedChoice) Validate() error {
	return _cccdg.ValidateWithPath("\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043h\u006f\u0069\u0063\u0065")
}

// ValidateWithPath validates the CT_NumDataSourceChoice and its children, prefixing error messages with path
func (_cegd *CT_NumDataSourceChoice) ValidateWithPath(path string) error {
	if _cegd.NumRef != nil {
		if _ddded := _cegd.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _ddded != nil {
			return _ddded
		}
	}
	if _cegd.NumLit != nil {
		if _dcaec := _cegd.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _dcaec != nil {
			return _dcaec
		}
	}
	return nil
}

// ValidateWithPath validates the CT_NumDataSource and its children, prefixing error messages with path
func (_fcbbf *CT_NumDataSource) ValidateWithPath(path string) error {
	if _eegc := _fcbbf.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _eegc != nil {
		return _eegc
	}
	return nil
}

func NewCT_NumData() *CT_NumData { _gcba := &CT_NumData{}; return _gcba }

func (_ccecg ST_ErrValType) String() string {
	switch _ccecg {
	case 0:
		return ""
	case 1:
		return "\u0063\u0075\u0073\u0074"
	case 2:
		return "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c"
	case 3:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065"
	case 4:
		return "\u0073\u0074\u0064\u0044\u0065\u0076"
	case 5:
		return "\u0073\u0074\u0064\u0045\u0072\u0072"
	}
	return ""
}

func (_gfe *CT_BubbleSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gcce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_gfe.Idx, _gcce)
	_ebab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_gfe.Order, _ebab)
	if _gfe.Tx != nil {
		_ffac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gfe.Tx, _ffac)
	}
	if _gfe.SpPr != nil {
		_acab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gfe.SpPr, _acab)
	}
	if _gfe.InvertIfNegative != nil {
		_cdd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_gfe.InvertIfNegative, _cdd)
	}
	if _gfe.DPt != nil {
		_gcgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _fbbe := range _gfe.DPt {
			e.EncodeElement(_fbbe, _gcgf)
		}
	}
	if _gfe.DLbls != nil {
		_acfe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gfe.DLbls, _acfe)
	}
	if _gfe.Trendline != nil {
		_fgcb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _gdff := range _gfe.Trendline {
			e.EncodeElement(_gdff, _fgcb)
		}
	}
	if _gfe.ErrBars != nil {
		_fcge := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _bdgf := range _gfe.ErrBars {
			e.EncodeElement(_bdgf, _fcge)
		}
	}
	if _gfe.XVal != nil {
		_bggc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_gfe.XVal, _bggc)
	}
	if _gfe.YVal != nil {
		_feca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_gfe.YVal, _feca)
	}
	if _gfe.BubbleSize != nil {
		_dfce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062u\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_gfe.BubbleSize, _dfce)
	}
	if _gfe.Bubble3D != nil {
		_gbgcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_gfe.Bubble3D, _gbgcg)
	}
	if _gfe.ExtLst != nil {
		_efbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gfe.ExtLst, _efbf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type Group_DLbl struct {
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func NewCT_PlotAreaChoice1() *CT_PlotAreaChoice1 { _ccdc := &CT_PlotAreaChoice1{}; return _ccdc }

func (_baced ST_BubbleScale) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _baced.ST_BubbleScalePercent != nil {
		e.EncodeToken(_e.CharData(*_baced.ST_BubbleScalePercent))
	}
	if _baced.ST_BubbleScaleUInt != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_baced.ST_BubbleScaleUInt)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_bacacd ST_BarDir) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_abdda := _e.Attr{}
	_abdda.Name = name
	switch _bacacd {
	case ST_BarDirUnset:
		_abdda.Value = ""
	case ST_BarDirBar:
		_abdda.Value = "\u0062\u0061\u0072"
	case ST_BarDirCol:
		_abdda.Value = "\u0063\u006f\u006c"
	}
	return _abdda, nil
}

// ValidateWithPath validates the ChartSpace and its children, prefixing error messages with path
func (_abaff *ChartSpace) ValidateWithPath(path string) error {
	if _ddeabg := _abaff.CT_ChartSpace.ValidateWithPath(path); _ddeabg != nil {
		return _ddeabg
	}
	return nil
}

// Validate validates the CT_Overlap and its children
func (_efdaa *CT_Overlap) Validate() error {
	return _efdaa.ValidateWithPath("\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070")
}

// Validate validates the CT_StockChart and its children
func (_ecddc *CT_StockChart) Validate() error {
	return _ecddc.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074")
}

func (_gebb *CT_PivotFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gebb.Idx = NewCT_UnsignedInt()
_eccc:
	for {
		_fbdb, _adbf := d.Token()
		if _adbf != nil {
			return _adbf
		}
		switch _cgdb := _fbdb.(type) {
		case _e.StartElement:
			switch _cgdb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _bcde := d.DecodeElement(_gebb.Idx, &_cgdb); _bcde != nil {
					return _bcde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gebb.SpPr = _bb.NewCT_ShapeProperties()
				if _fdafd := d.DecodeElement(_gebb.SpPr, &_cgdb); _fdafd != nil {
					return _fdafd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gebb.TxPr = _bb.NewCT_TextBody()
				if _agcda := d.DecodeElement(_gebb.TxPr, &_cgdb); _agcda != nil {
					return _agcda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_gebb.Marker = NewCT_Marker()
				if _dfge := d.DecodeElement(_gebb.Marker, &_cgdb); _dfge != nil {
					return _dfge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062\u006c"}:
				_gebb.DLbl = NewCT_DLbl()
				if _bcgc := d.DecodeElement(_gebb.DLbl, &_cgdb); _bcgc != nil {
					return _bcgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gebb.ExtLst = NewCT_ExtensionList()
				if _afgbc := d.DecodeElement(_gebb.ExtLst, &_cgdb); _afgbc != nil {
					return _afgbc
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0020\u0025\u0076", _cgdb.Name)
				if _cefg := d.Skip(); _cefg != nil {
					return _cefg
				}
			}
		case _e.EndElement:
			break _eccc
		case _e.CharData:
		}
	}
	return nil
}

func (_adaca ST_SizeRepresents) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_efdcf := _e.Attr{}
	_efdcf.Name = name
	switch _adaca {
	case ST_SizeRepresentsUnset:
		_efdcf.Value = ""
	case ST_SizeRepresentsArea:
		_efdcf.Value = "\u0061\u0072\u0065\u0061"
	case ST_SizeRepresentsW:
		_efdcf.Value = "\u0077"
	}
	return _efdcf, nil
}

var ST_ThicknessPercentPatternRe = _b.MustCompile(ST_ThicknessPercentPattern)

// Validate validates the Chart and its children
func (_ggca *Chart) Validate() error { return _ggca.ValidateWithPath("\u0043\u0068\u0061r\u0074") }

func NewCT_RelId() *CT_RelId { _ggfc := &CT_RelId{}; return _ggfc }

func (_dddgb *ST_ErrDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cacb, _ccebc := d.Token()
	if _ccebc != nil {
		return _ccebc
	}
	if _ggge, _aebeg := _cacb.(_e.EndElement); _aebeg && _ggge.Name == start.Name {
		*_dddgb = 1
		return nil
	}
	if _gfge, _ebccgd := _cacb.(_e.CharData); !_ebccgd {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cacb)
	} else {
		switch string(_gfge) {
		case "":
			*_dddgb = 0
		case "\u0078":
			*_dddgb = 1
		case "\u0079":
			*_dddgb = 2
		}
	}
	_cacb, _ccebc = d.Token()
	if _ccebc != nil {
		return _ccebc
	}
	if _fbdf, _gbbgg := _cacb.(_e.EndElement); _gbbgg && _fbdf.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cacb)
}

// Validate validates the CT_GapAmount and its children
func (_afee *CT_GapAmount) Validate() error {
	return _afee.ValidateWithPath("\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074")
}

type CT_MultiLvlStrRef struct {
	F                string
	MultiLvlStrCache *CT_MultiLvlStrData
	ExtLst           *CT_ExtensionList
}

func NewGroup_DLbls() *Group_DLbls { _defbg := &Group_DLbls{}; return _defbg }

func NewCT_UpDownBars() *CT_UpDownBars { _abfef := &CT_UpDownBars{}; return _abfef }

var ST_HPercentWithSymbolPatternRe = _b.MustCompile(ST_HPercentWithSymbolPattern)

// Validate validates the CT_FirstSliceAng and its children
func (_ebce *CT_FirstSliceAng) Validate() error {
	return _ebce.ValidateWithPath("\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067")
}

func (_cacf *CT_Legend) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cacf.LegendPos != nil {
		_bcfea := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073"}}
		e.EncodeElement(_cacf.LegendPos, _bcfea)
	}
	if _cacf.LegendEntry != nil {
		_bgbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0065\u0067\u0065\u006e\u0064\u0045\u006e\u0074\u0072\u0079"}}
		for _, _edgbc := range _cacf.LegendEntry {
			e.EncodeElement(_edgbc, _bgbc)
		}
	}
	if _cacf.Layout != nil {
		_cebeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_cacf.Layout, _cebeb)
	}
	if _cacf.Overlay != nil {
		_dfda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061y"}}
		e.EncodeElement(_cacf.Overlay, _dfda)
	}
	if _cacf.SpPr != nil {
		_afdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cacf.SpPr, _afdf)
	}
	if _cacf.TxPr != nil {
		_eace := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cacf.TxPr, _eace)
	}
	if _cacf.ExtLst != nil {
		_gded := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cacf.ExtLst, _gded)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fdefd *ST_LegendPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dagfd, _dcceb := d.Token()
	if _dcceb != nil {
		return _dcceb
	}
	if _bccaad, _eeefff := _dagfd.(_e.EndElement); _eeefff && _bccaad.Name == start.Name {
		*_fdefd = 1
		return nil
	}
	if _gafbgd, _afcdfe := _dagfd.(_e.CharData); !_afcdfe {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dagfd)
	} else {
		switch string(_gafbgd) {
		case "":
			*_fdefd = 0
		case "\u0062":
			*_fdefd = 1
		case "\u0074\u0072":
			*_fdefd = 2
		case "\u006c":
			*_fdefd = 3
		case "\u0072":
			*_fdefd = 4
		case "\u0074":
			*_fdefd = 5
		}
	}
	_dagfd, _dcceb = d.Token()
	if _dcceb != nil {
		return _dcceb
	}
	if _fdfgd, _cbfag := _dagfd.(_e.EndElement); _cbfag && _fdfgd.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dagfd)
}

func (_gfgbd *CT_ErrBarType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfgbd.ValAttr != ST_ErrBarTypeUnset {
		_fcee, _afbfc := _gfgbd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _afbfc != nil {
			return _afbfc
		}
		start.Attr = append(start.Attr, _fcee)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eaga *CT_DispUnitsLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eaga.Layout != nil {
		_gabb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_eaga.Layout, _gabb)
	}
	if _eaga.Tx != nil {
		_edeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_eaga.Tx, _edeb)
	}
	if _eaga.SpPr != nil {
		_abfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_eaga.SpPr, _abfd)
	}
	if _eaga.TxPr != nil {
		_bbfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_eaga.TxPr, _bbfb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bbbacb ST_CrossBetween) ValidateWithPath(path string) error {
	switch _bbbacb {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bbbacb))
	}
	return nil
}

type CT_AxDataSourceChoice struct {
	MultiLvlStrRef *CT_MultiLvlStrRef
	NumRef         *CT_NumRef
	NumLit         *CT_NumData
	StrRef         *CT_StrRef
	StrLit         *CT_StrData
}

func NewCT_TimeUnit() *CT_TimeUnit { _dbdgg := &CT_TimeUnit{}; return _dbdgg }

func (_fcdcc *CT_Order) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dcbea := range start.Attr {
		if _dcbea.Name.Local == "\u0076\u0061\u006c" {
			_cbefb, _ebcf := _bg.ParseUint(_dcbea.Value, 10, 8)
			if _ebcf != nil {
				return _ebcf
			}
			_ggfd := uint8(_cbefb)
			_fcdcc.ValAttr = &_ggfd
			continue
		}
	}
	for {
		_fagf, _dgdbd := d.Token()
		if _dgdbd != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0064\u0065\u0072: \u0025\u0073", _dgdbd)
		}
		if _decg, _edbdc := _fagf.(_e.EndElement); _edbdc && _decg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bggb *CT_LayoutTarget) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cfcf := range start.Attr {
		if _cfcf.Name.Local == "\u0076\u0061\u006c" {
			_bggb.ValAttr.UnmarshalXMLAttr(_cfcf)
			continue
		}
	}
	for {
		_gegc, _fcfcb := d.Token()
		if _fcfcb != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074T\u0061\u0072\u0067e\u0074:\u0020\u0025\u0073", _fcfcb)
		}
		if _gede, _fbdee := _gegc.(_e.EndElement); _fbdee && _gede.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LegendPos and its children, prefixing error messages with path
func (_ccaee *CT_LegendPos) ValidateWithPath(path string) error {
	if _aggg := _ccaee.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aggg != nil {
		return _aggg
	}
	return nil
}

type ST_SplitType byte

func (_gdccg *ST_LayoutTarget) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gdccg = 0
	case "\u0069\u006e\u006ee\u0072":
		*_gdccg = 1
	case "\u006f\u0075\u0074e\u0072":
		*_gdccg = 2
	}
	return nil
}

type CT_ErrValType struct{ ValAttr ST_ErrValType }

func (_edbb *CT_DateAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_aae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_edbb.AxId, _aae)
	_abbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_edbb.Scaling, _abbe)
	if _edbb.Delete != nil {
		_fcac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_edbb.Delete, _fcac)
	}
	_dadf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_edbb.AxPos, _dadf)
	if _edbb.MajorGridlines != nil {
		_ddgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_edbb.MajorGridlines, _ddgg)
	}
	if _edbb.MinorGridlines != nil {
		_fdaad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_edbb.MinorGridlines, _fdaad)
	}
	if _edbb.Title != nil {
		_dgcee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_edbb.Title, _dgcee)
	}
	if _edbb.NumFmt != nil {
		_adfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_edbb.NumFmt, _adfg)
	}
	if _edbb.MajorTickMark != nil {
		_bdbb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_edbb.MajorTickMark, _bdbb)
	}
	if _edbb.MinorTickMark != nil {
		_cdf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_edbb.MinorTickMark, _cdf)
	}
	if _edbb.TickLblPos != nil {
		_dga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_edbb.TickLblPos, _dga)
	}
	if _edbb.SpPr != nil {
		_cbaab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_edbb.SpPr, _cbaab)
	}
	if _edbb.TxPr != nil {
		_bfbd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_edbb.TxPr, _bfbd)
	}
	_dbegg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_edbb.CrossAx, _dbegg)
	if _edbb.Choice != nil {
		_edbb.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _edbb.Auto != nil {
		_dgad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_edbb.Auto, _dgad)
	}
	if _edbb.LblOffset != nil {
		_bedf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_edbb.LblOffset, _bedf)
	}
	if _edbb.BaseTimeUnit != nil {
		_gbeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0073\u0065\u0054\u0069\u006de\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edbb.BaseTimeUnit, _gbeg)
	}
	if _edbb.MajorUnit != nil {
		_dfbb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edbb.MajorUnit, _dfbb)
	}
	if _edbb.MajorTimeUnit != nil {
		_dcec := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edbb.MajorTimeUnit, _dcec)
	}
	if _edbb.MinorUnit != nil {
		_cggdfa := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edbb.MinorUnit, _cggdfa)
	}
	if _edbb.MinorTimeUnit != nil {
		_bbef := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074"}}
		e.EncodeElement(_edbb.MinorTimeUnit, _bbef)
	}
	if _edbb.ExtLst != nil {
		_efga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_edbb.ExtLst, _efga)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

var ST_GapAmountPercentPatternRe = _b.MustCompile(ST_GapAmountPercentPattern)

// ValidateWithPath validates the CT_DLbls and its children, prefixing error messages with path
func (_fgdff *CT_DLbls) ValidateWithPath(path string) error {
	for _abec, _dfdg := range _fgdff.DLbl {
		if _gfcd := _dfdg.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0044\u004c\u0062\u006c\u005b\u0025\u0064\u005d", path, _abec)); _gfcd != nil {
			return _gfcd
		}
	}
	if _fgdff.Choice != nil {
		if _aebd := _fgdff.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _aebd != nil {
			return _aebd
		}
	}
	if _fgdff.ExtLst != nil {
		if _cbfg := _fgdff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cbfg != nil {
			return _cbfg
		}
	}
	return nil
}

func (_cabda ST_BarGrouping) Validate() error { return _cabda.ValidateWithPath("") }

type ST_BarDir byte

func NewChart() *Chart { _dafc := &Chart{}; _dafc.CT_RelId = *NewCT_RelId(); return _dafc }

func NewGroup_DLbl() *Group_DLbl { _gadeg := &Group_DLbl{}; return _gadeg }

type CT_TxChoice struct {
	StrRef *CT_StrRef
	Rich   *_bb.CT_TextBody
}

func (_gffgb *CT_ScatterSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dgbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_gffgb.Idx, _dgbf)
	_gdaa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_gffgb.Order, _gdaa)
	if _gffgb.Tx != nil {
		_abee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_gffgb.Tx, _abee)
	}
	if _gffgb.SpPr != nil {
		_egcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gffgb.SpPr, _egcg)
	}
	if _gffgb.Marker != nil {
		_beefa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_gffgb.Marker, _beefa)
	}
	if _gffgb.DPt != nil {
		_bfec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dbdff := range _gffgb.DPt {
			e.EncodeElement(_dbdff, _bfec)
		}
	}
	if _gffgb.DLbls != nil {
		_ebaffb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gffgb.DLbls, _ebaffb)
	}
	if _gffgb.Trendline != nil {
		_fgeab := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _bfcg := range _gffgb.Trendline {
			e.EncodeElement(_bfcg, _fgeab)
		}
	}
	if _gffgb.ErrBars != nil {
		_dbaeg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _abdab := range _gffgb.ErrBars {
			e.EncodeElement(_abdab, _dbaeg)
		}
	}
	if _gffgb.XVal != nil {
		_faef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078\u0056\u0061\u006c"}}
		e.EncodeElement(_gffgb.XVal, _faef)
	}
	if _gffgb.YVal != nil {
		_dceeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079\u0056\u0061\u006c"}}
		e.EncodeElement(_gffgb.YVal, _dceeb)
	}
	if _gffgb.Smooth != nil {
		_eabgaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u006d\u006f\u006f\u0074\u0068"}}
		e.EncodeElement(_gffgb.Smooth, _eabgaf)
	}
	if _gffgb.ExtLst != nil {
		_aeffe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gffgb.ExtLst, _aeffe)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_ScatterSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_bb.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   []*CT_ErrBars
	XVal      *CT_AxDataSource
	YVal      *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}

func (_abad ST_BarGrouping) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bcgd := _e.Attr{}
	_bcgd.Name = name
	switch _abad {
	case ST_BarGroupingUnset:
		_bcgd.Value = ""
	case ST_BarGroupingPercentStacked:
		_bcgd.Value = "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case ST_BarGroupingClustered:
		_bcgd.Value = "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case ST_BarGroupingStandard:
		_bcgd.Value = "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case ST_BarGroupingStacked:
		_bcgd.Value = "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return _bcgd, nil
}

type CT_DLblChoice struct {
	Delete         *CT_Boolean
	Layout         *CT_Layout
	Tx             *CT_Tx
	NumFmt         *CT_NumFmt
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func NewCT_Extension() *CT_Extension { _gged := &CT_Extension{}; return _gged }

func (_ceac ST_Shape) ValidateWithPath(path string) error {
	switch _ceac {
	case 0, 1, 2, 3, 4, 5, 6:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ceac))
	}
	return nil
}

func (_gceff *CT_ExtensionList) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_deeb:
	for {
		_ddba, _ddgc := d.Token()
		if _ddgc != nil {
			return _ddgc
		}
		switch _ddaef := _ddba.(type) {
		case _e.StartElement:
			switch _ddaef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074"}:
				_bcfaa := NewCT_Extension()
				if _agcec := d.DecodeElement(_bcfaa, &_ddaef); _agcec != nil {
					return _agcec
				}
				_gceff.Ext = append(_gceff.Ext, _bcfaa)
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074\u0020\u0025v", _ddaef.Name)
				if _cfca := d.Skip(); _cfca != nil {
					return _cfca
				}
			}
		case _e.EndElement:
			break _deeb
		case _e.CharData:
		}
	}
	return nil
}

func (_ebcge ST_BarGrouping) String() string {
	switch _ebcge {
	case 0:
		return ""
	case 1:
		return "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064"
	case 2:
		return "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d"
	case 3:
		return "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064"
	case 4:
		return "\u0073t\u0061\u0063\u006b\u0065\u0064"
	}
	return ""
}

func NewCT_SecondPieSize() *CT_SecondPieSize { _agcae := &CT_SecondPieSize{}; return _agcae }

func ParseUnionST_LblOffset(s string) (ST_LblOffset, error) {
	if ST_LblOffsetPercentPatternRe.MatchString(s) {
		return ST_LblOffset{ST_LblOffsetPercent: &s}, nil
	}
	_fdccac, _bbcff := _bg.ParseUint(s, 10, 16)
	if _bbcff != nil {
		return ST_LblOffset{}, _bbcff
	}
	_edadf := uint16(_fdccac)
	return ST_LblOffset{ST_LblOffsetUShort: &_edadf}, nil
}

func NewEG_PieChartShared() *EG_PieChartShared { _dbffe := &EG_PieChartShared{}; return _dbffe }

func (_gbefg ST_BarGrouping) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gbefg.String(), start)
}

// ValidateWithPath validates the CT_ErrBarType and its children, prefixing error messages with path
func (_cceb *CT_ErrBarType) ValidateWithPath(path string) error {
	if _eabd := _cceb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eabd != nil {
		return _eabd
	}
	return nil
}

func (_gadf *CT_LegendPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gadf.ValAttr != ST_LegendPosUnset {
		_ecae, _bbeg := _gadf.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _bbeg != nil {
			return _bbeg
		}
		start.Attr = append(start.Attr, _ecae)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_feff *CT_TickLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _feff.ValAttr != ST_TickLblPosUnset {
		_aaade, _gbagf := _feff.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gbagf != nil {
			return _gbagf
		}
		start.Attr = append(start.Attr, _aaade)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fcff *CT_TextLanguageID) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _abafb := range start.Attr {
		if _abafb.Name.Local == "\u0076\u0061\u006c" {
			_eeabf, _bdccc := _abafb.Value, error(nil)
			if _bdccc != nil {
				return _bdccc
			}
			_fcff.ValAttr = _eeabf
			continue
		}
	}
	for {
		_aecbd, _cffa := d.Token()
		if _cffa != nil {
			return _a.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075\u0061\u0067\u0065\u0049\u0044: \u0025\u0073", _cffa)
		}
		if _gggd, _dbfee := _aecbd.(_e.EndElement); _dbfee && _gggd.Name == start.Name {
			break
		}
	}
	return nil
}

func (_defgf *ST_TrendlineType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_beac, _eccad := d.Token()
	if _eccad != nil {
		return _eccad
	}
	if _bbbcg, _faea := _beac.(_e.EndElement); _faea && _bbbcg.Name == start.Name {
		*_defgf = 1
		return nil
	}
	if _efbgb, _beffe := _beac.(_e.CharData); !_beffe {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _beac)
	} else {
		switch string(_efbgb) {
		case "":
			*_defgf = 0
		case "\u0065\u0078\u0070":
			*_defgf = 1
		case "\u006c\u0069\u006e\u0065\u0061\u0072":
			*_defgf = 2
		case "\u006c\u006f\u0067":
			*_defgf = 3
		case "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g":
			*_defgf = 4
		case "\u0070\u006f\u006c\u0079":
			*_defgf = 5
		case "\u0070\u006f\u0077e\u0072":
			*_defgf = 6
		}
	}
	_beac, _eccad = d.Token()
	if _eccad != nil {
		return _eccad
	}
	if _cbbade, _beffb := _beac.(_e.EndElement); _beffb && _cbbade.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _beac)
}

func (_bbada ST_RadarStyle) Validate() error { return _bbada.ValidateWithPath("") }

func (_gaada *CT_ExternalData) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fggfg := range start.Attr {
		if _fggfg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _fggfg.Name.Local == "\u0069\u0064" || _fggfg.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _fggfg.Name.Local == "\u0069\u0064" {
			_ddab, _aabc := _fggfg.Value, error(nil)
			if _aabc != nil {
				return _aabc
			}
			_gaada.IdAttr = _ddab
			continue
		}
	}
_bacd:
	for {
		_dfbde, _aecfg := d.Token()
		if _aecfg != nil {
			return _aecfg
		}
		switch _ecf := _dfbde.(type) {
		case _e.StartElement:
			switch _ecf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}:
				_gaada.AutoUpdate = NewCT_Boolean()
				if _dbfb := d.DecodeElement(_gaada.AutoUpdate, &_ecf); _dbfb != nil {
					return _dbfb
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0045\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061\u0020\u0025\u0076", _ecf.Name)
				if _debcb := d.Skip(); _debcb != nil {
					return _debcb
				}
			}
		case _e.EndElement:
			break _bacd
		case _e.CharData:
		}
	}
	return nil
}

func (_afcbd *ST_RadarStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gdcb, _fbdfd := d.Token()
	if _fbdfd != nil {
		return _fbdfd
	}
	if _badbg, _ceffa := _gdcb.(_e.EndElement); _ceffa && _badbg.Name == start.Name {
		*_afcbd = 1
		return nil
	}
	if _bddeb, _dedfb := _gdcb.(_e.CharData); !_dedfb {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gdcb)
	} else {
		switch string(_bddeb) {
		case "":
			*_afcbd = 0
		case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
			*_afcbd = 1
		case "\u006d\u0061\u0072\u006b\u0065\u0072":
			*_afcbd = 2
		case "\u0066\u0069\u006c\u006c\u0065\u0064":
			*_afcbd = 3
		}
	}
	_gdcb, _fbdfd = d.Token()
	if _fbdfd != nil {
		return _fbdfd
	}
	if _fddae, _ccgfa := _gdcb.(_e.EndElement); _ccgfa && _fddae.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gdcb)
}

func (_cefdb ST_ErrDir) ValidateWithPath(path string) error {
	switch _cefdb {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_cefdb))
	}
	return nil
}

var ST_BubbleScalePercentPatternRe = _b.MustCompile(ST_BubbleScalePercentPattern)

const (
	ST_PageSetupOrientationUnset     ST_PageSetupOrientation = 0
	ST_PageSetupOrientationDefault   ST_PageSetupOrientation = 1
	ST_PageSetupOrientationPortrait  ST_PageSetupOrientation = 2
	ST_PageSetupOrientationLandscape ST_PageSetupOrientation = 3
)

type CT_DLbl struct {
	Idx    *CT_UnsignedInt
	Choice *CT_DLblChoice
	ExtLst *CT_ExtensionList
}

// ValidateWithPath validates the CT_Lvl and its children, prefixing error messages with path
func (_gccfe *CT_Lvl) ValidateWithPath(path string) error {
	for _ededc, _ccfc := range _gccfe.Pt {
		if _aaabd := _ccfc.ValidateWithPath(_a.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _ededc)); _aaabd != nil {
			return _aaabd
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LineSer and its children, prefixing error messages with path
func (_cggf *CT_LineSer) ValidateWithPath(path string) error {
	if _aegb := _cggf.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _aegb != nil {
		return _aegb
	}
	if _bbfg := _cggf.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _bbfg != nil {
		return _bbfg
	}
	if _cggf.Tx != nil {
		if _cfebd := _cggf.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _cfebd != nil {
			return _cfebd
		}
	}
	if _cggf.SpPr != nil {
		if _gfec := _cggf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gfec != nil {
			return _gfec
		}
	}
	if _cggf.Marker != nil {
		if _edef := _cggf.Marker.ValidateWithPath(path + "\u002fM\u0061\u0072\u006b\u0065\u0072"); _edef != nil {
			return _edef
		}
	}
	for _gccag, _dgcg := range _cggf.DPt {
		if _ecee := _dgcg.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _gccag)); _ecee != nil {
			return _ecee
		}
	}
	if _cggf.DLbls != nil {
		if _fefae := _cggf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fefae != nil {
			return _fefae
		}
	}
	for _fgggda, _baggf := range _cggf.Trendline {
		if _gdaeg := _baggf.ValidateWithPath(_a.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _fgggda)); _gdaeg != nil {
			return _gdaeg
		}
	}
	if _cggf.ErrBars != nil {
		if _acae := _cggf.ErrBars.ValidateWithPath(path + "\u002f\u0045\u0072\u0072\u0042\u0061\u0072\u0073"); _acae != nil {
			return _acae
		}
	}
	if _cggf.Cat != nil {
		if _cedd := _cggf.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _cedd != nil {
			return _cedd
		}
	}
	if _cggf.Val != nil {
		if _gcff := _cggf.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _gcff != nil {
			return _gcff
		}
	}
	if _cggf.Smooth != nil {
		if _dbgcc := _cggf.Smooth.ValidateWithPath(path + "\u002fS\u006d\u006f\u006f\u0074\u0068"); _dbgcc != nil {
			return _dbgcc
		}
	}
	if _cggf.ExtLst != nil {
		if _fdbdg := _cggf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fdbdg != nil {
			return _fdbdg
		}
	}
	return nil
}

// Validate validates the CT_Title and its children
func (_gfbdga *CT_Title) Validate() error {
	return _gfbdga.ValidateWithPath("\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065")
}

// Validate validates the CT_DateAx and its children
func (_cdbf *CT_DateAx) Validate() error {
	return _cdbf.ValidateWithPath("\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x")
}

// Validate validates the CT_ExtensionList and its children
func (_fabec *CT_ExtensionList) Validate() error {
	return _fabec.ValidateWithPath("\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074")
}

func NewCT_Thickness() *CT_Thickness { _agcfe := &CT_Thickness{}; return _agcfe }

type EG_LineChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

func NewUserShapes() *UserShapes {
	_edffd := &UserShapes{}
	_edffd.CT_Drawing = *_eb.NewCT_Drawing()
	return _edffd
}

func (_bfdb *CT_UpDownBars) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gcfce:
	for {
		_ddca, _eabaf := d.Token()
		if _eabaf != nil {
			return _eabaf
		}
		switch _dagb := _ddca.(type) {
		case _e.StartElement:
			switch _dagb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_bfdb.GapWidth = NewCT_GapAmount()
				if _fcdg := d.DecodeElement(_bfdb.GapWidth, &_dagb); _fcdg != nil {
					return _fcdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0042\u0061\u0072\u0073"}:
				_bfdb.UpBars = NewCT_UpDownBar()
				if _ageec := d.DecodeElement(_bfdb.UpBars, &_dagb); _ageec != nil {
					return _ageec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_bfdb.DownBars = NewCT_UpDownBar()
				if _aeab := d.DecodeElement(_bfdb.DownBars, &_dagb); _aeab != nil {
					return _aeab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bfdb.ExtLst = NewCT_ExtensionList()
				if _eacf := d.DecodeElement(_bfdb.ExtLst, &_dagb); _eacf != nil {
					return _eacf
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0055p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073 \u0025\u0076", _dagb.Name)
				if _dfdfe := d.Skip(); _dfdfe != nil {
					return _dfdfe
				}
			}
		case _e.EndElement:
			break _gcfce
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_AreaChart and its children
func (_agd *CT_AreaChart) Validate() error {
	return _agd.ValidateWithPath("\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074")
}

func NewCT_BarSer() *CT_BarSer {
	_dgf := &CT_BarSer{}
	_dgf.Idx = NewCT_UnsignedInt()
	_dgf.Order = NewCT_UnsignedInt()
	return _dgf
}

func (_ecdb *CT_PictureOptions) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fagb:
	for {
		_gecda, _dfgb := d.Token()
		if _dfgb != nil {
			return _dfgb
		}
		switch _afddg := _gecda.(type) {
		case _e.StartElement:
			switch _afddg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0046\u0072\u006f\u006e\u0074"}:
				_ecdb.ApplyToFront = NewCT_Boolean()
				if _deaeb := d.DecodeElement(_ecdb.ApplyToFront, &_afddg); _deaeb != nil {
					return _deaeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070l\u0079\u0054\u006f\u0053\u0069\u0064\u0065\u0073"}:
				_ecdb.ApplyToSides = NewCT_Boolean()
				if _afdfc := d.DecodeElement(_ecdb.ApplyToSides, &_afddg); _afdfc != nil {
					return _afdfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0070\u0070\u006c\u0079\u0054\u006f\u0045\u006e\u0064"}:
				_ecdb.ApplyToEnd = NewCT_Boolean()
				if _bedfdd := d.DecodeElement(_ecdb.ApplyToEnd, &_afddg); _bedfdd != nil {
					return _bedfdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074"}:
				_ecdb.PictureFormat = NewCT_PictureFormat()
				if _ecff := d.DecodeElement(_ecdb.PictureFormat, &_afddg); _ecff != nil {
					return _ecff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069c\u0074\u0075\u0072e\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074"}:
				_ecdb.PictureStackUnit = NewCT_PictureStackUnit()
				if _aded := d.DecodeElement(_ecdb.PictureStackUnit, &_afddg); _aded != nil {
					return _aded
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073\u0020\u0025\u0076", _afddg.Name)
				if _ggcb := d.Skip(); _ggcb != nil {
					return _ggcb
				}
			}
		case _e.EndElement:
			break _fagb
		case _e.CharData:
		}
	}
	return nil
}

func (_gffac *ST_Thickness) ValidateWithPath(path string) error {
	_fggbc := []string{}
	if _gffac.ST_ThicknessPercent != nil {
		_fggbc = append(_fggbc, "\u0053\u0054\u005f\u0054hi\u0063\u006b\u006e\u0065\u0073\u0073\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _gffac.Uint32 != nil {
		_fggbc = append(_fggbc, "\u0055\u0069\u006e\u0074\u0033\u0032")
	}
	if len(_fggbc) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fggbc)
	}
	return nil
}

// ValidateWithPath validates the EG_LineChartShared and its children, prefixing error messages with path
func (_fcbdc *EG_LineChartShared) ValidateWithPath(path string) error {
	if _cegcf := _fcbdc.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _cegcf != nil {
		return _cegcf
	}
	if _fcbdc.VaryColors != nil {
		if _dbag := _fcbdc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _dbag != nil {
			return _dbag
		}
	}
	for _bddga, _cccdf := range _fcbdc.Ser {
		if _dddb := _cccdf.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _bddga)); _dddb != nil {
			return _dddb
		}
	}
	if _fcbdc.DLbls != nil {
		if _fcbag := _fcbdc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fcbag != nil {
			return _fcbag
		}
	}
	if _fcbdc.DropLines != nil {
		if _daaeb := _fcbdc.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _daaeb != nil {
			return _daaeb
		}
	}
	return nil
}

const ST_HPercentWithSymbolPattern = "0\u002a\u0028\u0028\u005b\u0035\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

func (_deg *CT_BandFmt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_deg.Idx = NewCT_UnsignedInt()
_ccae:
	for {
		_agb, _bbe := d.Token()
		if _bbe != nil {
			return _bbe
		}
		switch _bef := _agb.(type) {
		case _e.StartElement:
			switch _bef.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _cfd := d.DecodeElement(_deg.Idx, &_bef); _cfd != nil {
					return _cfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_deg.SpPr = _bb.NewCT_ShapeProperties()
				if _dca := d.DecodeElement(_deg.SpPr, &_bef); _dca != nil {
					return _dca
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fB\u0061\u006e\u0064\u0046\u006d\u0074\u0020\u0025\u0076", _bef.Name)
				if _bge := d.Skip(); _bge != nil {
					return _bge
				}
			}
		case _e.EndElement:
			break _ccae
		case _e.CharData:
		}
	}
	return nil
}

type UserShapes struct{ _eb.CT_Drawing }

func (_egggf *CT_Marker) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _egggf.Symbol != nil {
		_bdbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0079\u006d\u0062\u006f\u006c"}}
		e.EncodeElement(_egggf.Symbol, _bdbe)
	}
	if _egggf.Size != nil {
		_caae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0069\u007a\u0065"}}
		e.EncodeElement(_egggf.Size, _caae)
	}
	if _egggf.SpPr != nil {
		_bbbac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_egggf.SpPr, _bbbac)
	}
	if _egggf.ExtLst != nil {
		_gcggc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_egggf.ExtLst, _gcggc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_LineSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_bb.CT_ShapeProperties
	Marker    *CT_Marker
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Trendline []*CT_Trendline
	ErrBars   *CT_ErrBars
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	Smooth    *CT_Boolean
	ExtLst    *CT_ExtensionList
}

// Validate validates the CT_Period and its children
func (_dbgcf *CT_Period) Validate() error {
	return _dbgcf.ValidateWithPath("\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd")
}

func (_bdbf *CT_RadarSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bdbf.Idx = NewCT_UnsignedInt()
	_bdbf.Order = NewCT_UnsignedInt()
_dfafc:
	for {
		_adce, _edcbf := d.Token()
		if _edcbf != nil {
			return _edcbf
		}
		switch _fceea := _adce.(type) {
		case _e.StartElement:
			switch _fceea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _gebdb := d.DecodeElement(_bdbf.Idx, &_fceea); _gebdb != nil {
					return _gebdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _cefac := d.DecodeElement(_bdbf.Order, &_fceea); _cefac != nil {
					return _cefac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_bdbf.Tx = NewCT_SerTx()
				if _fdbca := d.DecodeElement(_bdbf.Tx, &_fceea); _fdbca != nil {
					return _fdbca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_bdbf.SpPr = _bb.NewCT_ShapeProperties()
				if _defce := d.DecodeElement(_bdbf.SpPr, &_fceea); _defce != nil {
					return _defce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_bdbf.Marker = NewCT_Marker()
				if _geddd := d.DecodeElement(_bdbf.Marker, &_fceea); _geddd != nil {
					return _geddd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_gaeae := NewCT_DPt()
				if _fbcf := d.DecodeElement(_gaeae, &_fceea); _fbcf != nil {
					return _fbcf
				}
				_bdbf.DPt = append(_bdbf.DPt, _gaeae)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bdbf.DLbls = NewCT_DLbls()
				if _cbdge := d.DecodeElement(_bdbf.DLbls, &_fceea); _cbdge != nil {
					return _cbdge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_bdbf.Cat = NewCT_AxDataSource()
				if _dgcbd := d.DecodeElement(_bdbf.Cat, &_fceea); _dgcbd != nil {
					return _dgcbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_bdbf.Val = NewCT_NumDataSource()
				if _fccga := d.DecodeElement(_bdbf.Val, &_fceea); _fccga != nil {
					return _fccga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_bdbf.ExtLst = NewCT_ExtensionList()
				if _gcefa := d.DecodeElement(_bdbf.ExtLst, &_fceea); _gcefa != nil {
					return _gcefa
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072\u0020\u0025\u0076", _fceea.Name)
				if _cfbcc := d.Skip(); _cfbcc != nil {
					return _cfbcc
				}
			}
		case _e.EndElement:
			break _dfafc
		case _e.CharData:
		}
	}
	return nil
}

func (_ebfb *CT_BarSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ebfb.Idx = NewCT_UnsignedInt()
	_ebfb.Order = NewCT_UnsignedInt()
_gcca:
	for {
		_fba, _daea := d.Token()
		if _daea != nil {
			return _daea
		}
		switch _agce := _fba.(type) {
		case _e.StartElement:
			switch _agce.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _aaaf := d.DecodeElement(_ebfb.Idx, &_agce); _aaaf != nil {
					return _aaaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _eega := d.DecodeElement(_ebfb.Order, &_agce); _eega != nil {
					return _eega
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ebfb.Tx = NewCT_SerTx()
				if _gecb := d.DecodeElement(_ebfb.Tx, &_agce); _gecb != nil {
					return _gecb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ebfb.SpPr = _bb.NewCT_ShapeProperties()
				if _ffcd := d.DecodeElement(_ebfb.SpPr, &_agce); _ffcd != nil {
					return _ffcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u006ev\u0065\u0072\u0074I\u0066\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065"}:
				_ebfb.InvertIfNegative = NewCT_Boolean()
				if _deab := d.DecodeElement(_ebfb.InvertIfNegative, &_agce); _deab != nil {
					return _deab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073"}:
				_ebfb.PictureOptions = NewCT_PictureOptions()
				if _bad := d.DecodeElement(_ebfb.PictureOptions, &_agce); _bad != nil {
					return _bad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_ccfa := NewCT_DPt()
				if _gda := d.DecodeElement(_ccfa, &_agce); _gda != nil {
					return _gda
				}
				_ebfb.DPt = append(_ebfb.DPt, _ccfa)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_ebfb.DLbls = NewCT_DLbls()
				if _dfcfd := d.DecodeElement(_ebfb.DLbls, &_agce); _dfcfd != nil {
					return _dfcfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074r\u0065\u006e\u0064\u006c\u0069\u006ee"}:
				_fbd := NewCT_Trendline()
				if _edgg := d.DecodeElement(_fbd, &_agce); _edgg != nil {
					return _edgg
				}
				_ebfb.Trendline = append(_ebfb.Trendline, _fbd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065r\u0072\u0042\u0061\u0072\u0073"}:
				_ebfb.ErrBars = NewCT_ErrBars()
				if _gbbg := d.DecodeElement(_ebfb.ErrBars, &_agce); _gbbg != nil {
					return _gbbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_ebfb.Cat = NewCT_AxDataSource()
				if _eefe := d.DecodeElement(_ebfb.Cat, &_agce); _eefe != nil {
					return _eefe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_ebfb.Val = NewCT_NumDataSource()
				if _feee := d.DecodeElement(_ebfb.Val, &_agce); _feee != nil {
					return _feee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_ebfb.Shape = NewCT_Shape()
				if _cfee := d.DecodeElement(_ebfb.Shape, &_agce); _cfee != nil {
					return _cfee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ebfb.ExtLst = NewCT_ExtensionList()
				if _abg := d.DecodeElement(_ebfb.ExtLst, &_agce); _abg != nil {
					return _abg
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0042\u0061\u0072S\u0065\u0072 \u0025\u0076", _agce.Name)
				if _efb := d.Skip(); _efb != nil {
					return _efb
				}
			}
		case _e.EndElement:
			break _gcca
		case _e.CharData:
		}
	}
	return nil
}

func (_fbefg ST_TickLblPos) Validate() error { return _fbefg.ValidateWithPath("") }

func NewCT_RotX() *CT_RotX { _bedaeb := &CT_RotX{}; return _bedaeb }

// Validate validates the CT_Chart and its children
func (_cdaa *CT_Chart) Validate() error {
	return _cdaa.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074")
}

// Validate validates the CT_Crosses and its children
func (_gafb *CT_Crosses) Validate() error {
	return _gafb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073")
}

func NewCT_DLbl() *CT_DLbl { _bcfb := &CT_DLbl{}; _bcfb.Idx = NewCT_UnsignedInt(); return _bcfb }

func (_gbcgf *CT_DispUnitsLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bgcd:
	for {
		_abfde, _bcbcd := d.Token()
		if _bcbcd != nil {
			return _bcbcd
		}
		switch _gacg := _abfde.(type) {
		case _e.StartElement:
			switch _gacg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_gbcgf.Layout = NewCT_Layout()
				if _bfe := d.DecodeElement(_gbcgf.Layout, &_gacg); _bfe != nil {
					return _bfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_gbcgf.Tx = NewCT_Tx()
				if _gbea := d.DecodeElement(_gbcgf.Tx, &_gacg); _gbea != nil {
					return _gbea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gbcgf.SpPr = _bb.NewCT_ShapeProperties()
				if _gbcae := d.DecodeElement(_gbcgf.SpPr, &_gacg); _gbcae != nil {
					return _gbcae
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gbcgf.TxPr = _bb.NewCT_TextBody()
				if _ccab := d.DecodeElement(_gbcgf.TxPr, &_gacg); _ccab != nil {
					return _ccab
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0044\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c\u0020\u0025\u0076", _gacg.Name)
				if _bggff := d.Skip(); _bggff != nil {
					return _bggff
				}
			}
		case _e.EndElement:
			break _bgcd
		case _e.CharData:
		}
	}
	return nil
}

func (_ggda ST_SizeRepresents) ValidateWithPath(path string) error {
	switch _ggda {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ggda))
	}
	return nil
}

// ValidateWithPath validates the EG_SurfaceChartShared and its children, prefixing error messages with path
func (_ccgagg *EG_SurfaceChartShared) ValidateWithPath(path string) error {
	if _ccgagg.Wireframe != nil {
		if _caaa := _ccgagg.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _caaa != nil {
			return _caaa
		}
	}
	for _dgedb, _ecacb := range _ccgagg.Ser {
		if _fabdd := _ecacb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dgedb)); _fabdd != nil {
			return _fabdd
		}
	}
	if _ccgagg.BandFmts != nil {
		if _cdef := _ccgagg.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _cdef != nil {
			return _cdef
		}
	}
	return nil
}

func (_cdfb *CT_ExternalData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072\u003a\u0069\u0064"}, Value: _a.Sprintf("\u0025\u0076", _cdfb.IdAttr)})
	e.EncodeToken(start)
	if _cdfb.AutoUpdate != nil {
		_cddbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061u\u0074\u006f\u0055\u0070\u0064\u0061\u0074\u0065"}}
		e.EncodeElement(_cdfb.AutoUpdate, _cddbg)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_NumRef and its children, prefixing error messages with path
func (_gfecg *CT_NumRef) ValidateWithPath(path string) error {
	if _gfecg.NumCache != nil {
		if _eedbe := _gfecg.NumCache.ValidateWithPath(path + "\u002fN\u0075\u006d\u0043\u0061\u0063\u0068e"); _eedbe != nil {
			return _eedbe
		}
	}
	if _gfecg.ExtLst != nil {
		if _geee := _gfecg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _geee != nil {
			return _geee
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Surface and its children, prefixing error messages with path
func (_febda *CT_Surface) ValidateWithPath(path string) error {
	if _febda.Thickness != nil {
		if _dbcf := _febda.Thickness.ValidateWithPath(path + "\u002f\u0054\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073"); _dbcf != nil {
			return _dbcf
		}
	}
	if _febda.SpPr != nil {
		if _ffbfg := _febda.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ffbfg != nil {
			return _ffbfg
		}
	}
	if _febda.PictureOptions != nil {
		if _eeaac := _febda.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _eeaac != nil {
			return _eeaac
		}
	}
	if _febda.ExtLst != nil {
		if _gffef := _febda.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gffef != nil {
			return _gffef
		}
	}
	return nil
}

const (
	ST_PictureFormatUnset      ST_PictureFormat = 0
	ST_PictureFormatStretch    ST_PictureFormat = 1
	ST_PictureFormatStack      ST_PictureFormat = 2
	ST_PictureFormatStackScale ST_PictureFormat = 3
)

func NewCT_RadarChart() *CT_RadarChart {
	_fadcc := &CT_RadarChart{}
	_fadcc.RadarStyle = NewCT_RadarStyle()
	return _fadcc
}

type CT_Crosses struct{ ValAttr ST_Crosses }

func (_dge *CT_BarSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ecaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_dge.Idx, _ecaa)
	_beee := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_dge.Order, _beee)
	if _dge.Tx != nil {
		_gcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_dge.Tx, _gcg)
	}
	if _dge.SpPr != nil {
		_beae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_dge.SpPr, _beae)
	}
	if _dge.InvertIfNegative != nil {
		_fde := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0069n\u0076\u0065\u0072\u0074\u0049f\u004e\u0065g\u0061\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_dge.InvertIfNegative, _fde)
	}
	if _dge.PictureOptions != nil {
		_feeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_dge.PictureOptions, _feeb)
	}
	if _dge.DPt != nil {
		_gcc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _dfcf := range _dge.DPt {
			e.EncodeElement(_dfcf, _gcc)
		}
	}
	if _dge.DLbls != nil {
		_aeb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dge.DLbls, _aeb)
	}
	if _dge.Trendline != nil {
		_ddea := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _egdg := range _dge.Trendline {
			e.EncodeElement(_egdg, _ddea)
		}
	}
	if _dge.ErrBars != nil {
		_ccf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		e.EncodeElement(_dge.ErrBars, _ccf)
	}
	if _dge.Cat != nil {
		_befd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_dge.Cat, _befd)
	}
	if _dge.Val != nil {
		_cfga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_dge.Val, _cfga)
	}
	if _dge.Shape != nil {
		_ecad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_dge.Shape, _ecad)
	}
	if _dge.ExtLst != nil {
		_bggge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dge.ExtLst, _bggge)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dbgg ST_BuiltInUnit) ValidateWithPath(path string) error {
	switch _dbgg {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbgg))
	}
	return nil
}

func (_geffe *Chart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063:\u0063\u0068\u0061\u0072\u0074"
	return _geffe.CT_RelId.MarshalXML(e, start)
}

// ValidateWithPath validates the CT_SizeRepresents and its children, prefixing error messages with path
func (_bgfa *CT_SizeRepresents) ValidateWithPath(path string) error {
	if _adegd := _bgfa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _adegd != nil {
		return _adegd
	}
	return nil
}

// Validate validates the CT_NumVal and its children
func (_fgdc *CT_NumVal) Validate() error {
	return _fgdc.ValidateWithPath("\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l")
}

// Validate validates the CT_CustSplit and its children
func (_defg *CT_CustSplit) Validate() error {
	return _defg.ValidateWithPath("\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074")
}

func (_bebdg ST_MarkerStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bebdg.String(), start)
}

func (_caga *CT_AxisUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_caga.ValAttr = 0 + 1
	for _, _bcg := range start.Attr {
		if _bcg.Name.Local == "\u0076\u0061\u006c" {
			_gaa, _cgg := _bg.ParseFloat(_bcg.Value, 64)
			if _cgg != nil {
				return _cgg
			}
			_caga.ValAttr = _gaa
			continue
		}
	}
	for {
		_fdb, _fge := d.Token()
		if _fge != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074\u003a\u0020\u0025\u0073", _fge)
		}
		if _fedg, _bfbf := _fdb.(_e.EndElement); _bfbf && _fedg.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_ExternalData() *CT_ExternalData { _eeafb := &CT_ExternalData{}; return _eeafb }

// Validate validates the CT_StrData and its children
func (_bcbcc *CT_StrData) Validate() error {
	return _bcbcc.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061")
}

func (_cgce *CT_SerTx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cgce.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_egeb ST_BarDir) Validate() error { return _egeb.ValidateWithPath("") }

func (_egcca *CT_PlotArea) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _egcca.Layout != nil {
		_ddedd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_egcca.Layout, _ddedd)
	}
	for _, _eefbc := range _egcca.Choice {
		_eefbc.MarshalXML(e, _e.StartElement{})
	}
	if _egcca.CChoice != nil {
		_egcca.CChoice.MarshalXML(e, _e.StartElement{})
	}
	if _egcca.DTable != nil {
		_dabcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0054\u0061\u0062\u006c\u0065"}}
		e.EncodeElement(_egcca.DTable, _dabcg)
	}
	if _egcca.SpPr != nil {
		_bffge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_egcca.SpPr, _bffge)
	}
	if _egcca.ExtLst != nil {
		_cdcaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_egcca.ExtLst, _cdcaf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_Surface3DChart() *CT_Surface3DChart { _geaed := &CT_Surface3DChart{}; return _geaed }

func (_gcd *CT_Boolean) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dfbd := range start.Attr {
		if _dfbd.Name.Local == "\u0076\u0061\u006c" {
			_dagda, _ageg := _bg.ParseBool(_dfbd.Value)
			if _ageg != nil {
				return _ageg
			}
			_gcd.ValAttr = &_dagda
			continue
		}
	}
	for {
		_gbf, _ged := d.Token()
		if _ged != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e\u003a\u0020%\u0073", _ged)
		}
		if _cge, _ffcba := _gbf.(_e.EndElement); _ffcba && _cge.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_HoleSize and its children, prefixing error messages with path
func (_gbag *CT_HoleSize) ValidateWithPath(path string) error {
	if _gbag.ValAttr != nil {
		if _eaff := _gbag.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _eaff != nil {
			return _eaff
		}
	}
	return nil
}

func ParseUnionST_BubbleScale(s string) (ST_BubbleScale, error) {
	if ST_BubbleScalePercentPatternRe.MatchString(s) {
		return ST_BubbleScale{ST_BubbleScalePercent: &s}, nil
	}
	_aabf, _caca := _bg.ParseUint(s, 10, 32)
	if _caca != nil {
		return ST_BubbleScale{}, _caca
	}
	_bdcgd := uint32(_aabf)
	return ST_BubbleScale{ST_BubbleScaleUInt: &_bdcgd}, nil
}

type ChartSpace struct{ CT_ChartSpace }

func NewCT_ChartSpace() *CT_ChartSpace {
	_ffcg := &CT_ChartSpace{}
	_ffcg.Chart = NewCT_Chart()
	return _ffcg
}

func NewCT_ValAx() *CT_ValAx {
	_aggfe := &CT_ValAx{}
	_aggfe.AxId = NewCT_UnsignedInt()
	_aggfe.Scaling = NewCT_Scaling()
	_aggfe.AxPos = NewCT_AxPos()
	_aggfe.CrossAx = NewCT_UnsignedInt()
	return _aggfe
}

func (_gegag *CT_Double) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _gegag.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fbgae *CT_Style) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_fbgae.ValAttr = 1
	for _, _eeab := range start.Attr {
		if _eeab.Name.Local == "\u0076\u0061\u006c" {
			_abcc, _egbec := _bg.ParseUint(_eeab.Value, 10, 8)
			if _egbec != nil {
				return _egbec
			}
			_fbgae.ValAttr = uint8(_abcc)
			continue
		}
	}
	for {
		_ceff, _fegfd := d.Token()
		if _fegfd != nil {
			return _a.Errorf("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fS\u0074\u0079\u006c\u0065: \u0025\u0073", _fegfd)
		}
		if _gfdfe, _bdef := _ceff.(_e.EndElement); _bdef && _gfdfe.Name == start.Name {
			break
		}
	}
	return nil
}

func (_gbcdd *ST_AxPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcbdc, _gbcdc := d.Token()
	if _gbcdc != nil {
		return _gbcdc
	}
	if _ffaef, _dgdcd := _dcbdc.(_e.EndElement); _dgdcd && _ffaef.Name == start.Name {
		*_gbcdd = 1
		return nil
	}
	if _ceccd, _cbff := _dcbdc.(_e.CharData); !_cbff {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcbdc)
	} else {
		switch string(_ceccd) {
		case "":
			*_gbcdd = 0
		case "\u0062":
			*_gbcdd = 1
		case "\u006c":
			*_gbcdd = 2
		case "\u0072":
			*_gbcdd = 3
		case "\u0074":
			*_gbcdd = 4
		}
	}
	_dcbdc, _gbcdc = d.Token()
	if _gbcdc != nil {
		return _gbcdc
	}
	if _ggcba, _bdfbf := _dcbdc.(_e.EndElement); _bdfbf && _ggcba.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcbdc)
}

func (_eegce ST_DepthPercent) String() string {
	if _eegce.ST_DepthPercentWithSymbol != nil {
		return _a.Sprintf("\u0025\u0076", *_eegce.ST_DepthPercentWithSymbol)
	}
	if _eegce.ST_DepthPercentUShort != nil {
		return _a.Sprintf("\u0025\u0076", *_eegce.ST_DepthPercentUShort)
	}
	return ""
}

func (_ggfgb ST_DepthPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ggfgb.ST_DepthPercentWithSymbol != nil {
		e.EncodeToken(_e.CharData(*_ggfgb.ST_DepthPercentWithSymbol))
	}
	if _ggfgb.ST_DepthPercentUShort != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_ggfgb.ST_DepthPercentUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

type CT_Line3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

// Validate validates the CT_SurfaceSer and its children
func (_bdgce *CT_SurfaceSer) Validate() error {
	return _bdgce.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072")
}

func (_aag *CT_BandFmts) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aag.BandFmt != nil {
		_bcfa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0062\u0061\u006e\u0064\u0046\u006dt"}}
		for _, _eab := range _aag.BandFmt {
			e.EncodeElement(_eab, _bcfa)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_ebcce *ST_DispBlanksAs) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ebcce = 0
	case "\u0073\u0070\u0061\u006e":
		*_ebcce = 1
	case "\u0067\u0061\u0070":
		*_ebcce = 2
	case "\u007a\u0065\u0072\u006f":
		*_ebcce = 3
	}
	return nil
}

const (
	ST_LayoutModeUnset  ST_LayoutMode = 0
	ST_LayoutModeEdge   ST_LayoutMode = 1
	ST_LayoutModeFactor ST_LayoutMode = 2
)

type CT_Style struct{ ValAttr uint8 }

func (_acacg *CT_Grouping) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ebef := range start.Attr {
		if _ebef.Name.Local == "\u0076\u0061\u006c" {
			_acacg.ValAttr.UnmarshalXMLAttr(_ebef)
			continue
		}
	}
	for {
		_geae, _cege := d.Token()
		if _cege != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0073", _cege)
		}
		if _bagfe, _eggf := _geae.(_e.EndElement); _eggf && _bagfe.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Protection and its children, prefixing error messages with path
func (_eaeb *CT_Protection) ValidateWithPath(path string) error {
	if _eaeb.ChartObject != nil {
		if _bagd := _eaeb.ChartObject.ValidateWithPath(path + "\u002f\u0043\u0068a\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"); _bagd != nil {
			return _bagd
		}
	}
	if _eaeb.Data != nil {
		if _cebbb := _eaeb.Data.ValidateWithPath(path + "\u002f\u0044\u0061t\u0061"); _cebbb != nil {
			return _cebbb
		}
	}
	if _eaeb.Formatting != nil {
		if _gbaf := _eaeb.Formatting.ValidateWithPath(path + "/\u0046\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"); _gbaf != nil {
			return _gbaf
		}
	}
	if _eaeb.Selection != nil {
		if _cedde := _eaeb.Selection.ValidateWithPath(path + "\u002f\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"); _cedde != nil {
			return _cedde
		}
	}
	if _eaeb.UserInterface != nil {
		if _cbefbe := _eaeb.UserInterface.ValidateWithPath(path + "\u002f\u0055\u0073\u0065\u0072\u0049\u006e\u0074\u0065r\u0066\u0061\u0063\u0065"); _cbefbe != nil {
			return _cbefbe
		}
	}
	return nil
}

func (_fcbb *CT_FirstSliceAng) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ccdf := range start.Attr {
		if _ccdf.Name.Local == "\u0076\u0061\u006c" {
			_dgffg, _defbd := _bg.ParseUint(_ccdf.Value, 10, 16)
			if _defbd != nil {
				return _defbd
			}
			_bbcgb := uint16(_dgffg)
			_fcbb.ValAttr = &_bbcgb
			continue
		}
	}
	for {
		_efbdf, _bgage := d.Token()
		if _bgage != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0046\u0069\u0072\u0073t\u0053l\u0069\u0063\u0065\u0041\u006e\u0067\u003a \u0025\u0073", _bgage)
		}
		if _fcce, _eaddd := _efbdf.(_e.EndElement); _eaddd && _fcce.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_ScatterStyle and its children
func (_efaac *CT_ScatterStyle) Validate() error {
	return _efaac.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065")
}

func NewCT_Perspective() *CT_Perspective { _cdec := &CT_Perspective{}; return _cdec }

func (_bfgac ST_SizeRepresents) String() string {
	switch _bfgac {
	case 0:
		return ""
	case 1:
		return "\u0061\u0072\u0065\u0061"
	case 2:
		return "\u0077"
	}
	return ""
}

func (_cfbg *CT_NumDataSource) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_cfbg.Choice.MarshalXML(e, _e.StartElement{})
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type Group_DLbls struct {
	NumFmt          *CT_NumFmt
	SpPr            *_bb.CT_ShapeProperties
	TxPr            *_bb.CT_TextBody
	DLblPos         *CT_DLblPos
	ShowLegendKey   *CT_Boolean
	ShowVal         *CT_Boolean
	ShowCatName     *CT_Boolean
	ShowSerName     *CT_Boolean
	ShowPercent     *CT_Boolean
	ShowBubbleSize  *CT_Boolean
	Separator       *string
	ShowLeaderLines *CT_Boolean
	LeaderLines     *CT_ChartLines
}

// Validate validates the CT_PivotFmt and its children
func (_cebae *CT_PivotFmt) Validate() error {
	return _cebae.ValidateWithPath("C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074")
}

// ValidateWithPath validates the CT_AreaSer and its children, prefixing error messages with path
func (_ffe *CT_AreaSer) ValidateWithPath(path string) error {
	if _baaa := _ffe.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _baaa != nil {
		return _baaa
	}
	if _feeg := _ffe.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _feeg != nil {
		return _feeg
	}
	if _ffe.Tx != nil {
		if _dbec := _ffe.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _dbec != nil {
			return _dbec
		}
	}
	if _ffe.SpPr != nil {
		if _fbe := _ffe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _fbe != nil {
			return _fbe
		}
	}
	if _ffe.PictureOptions != nil {
		if _ad := _ffe.PictureOptions.ValidateWithPath(path + "\u002fP\u0069c\u0074\u0075\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"); _ad != nil {
			return _ad
		}
	}
	for _dfb, _gfb := range _ffe.DPt {
		if _debf := _gfb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _dfb)); _debf != nil {
			return _debf
		}
	}
	if _ffe.DLbls != nil {
		if _dae := _ffe.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dae != nil {
			return _dae
		}
	}
	for _adg, _gca := range _ffe.Trendline {
		if _ebb := _gca.ValidateWithPath(_a.Sprintf("\u0025\u0073/\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u005b\u0025\u0064\u005d", path, _adg)); _ebb != nil {
			return _ebb
		}
	}
	for _ebe, _fed := range _ffe.ErrBars {
		if _ebae := _fed.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0045\u0072\u0072\u0042\u0061\u0072s\u005b\u0025\u0064\u005d", path, _ebe)); _ebae != nil {
			return _ebae
		}
	}
	if _ffe.Cat != nil {
		if _dfe := _ffe.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _dfe != nil {
			return _dfe
		}
	}
	if _ffe.Val != nil {
		if _bfb := _ffe.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _bfb != nil {
			return _bfb
		}
	}
	if _ffe.ExtLst != nil {
		if _bff := _ffe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _bff != nil {
			return _bff
		}
	}
	return nil
}

func (_baaef *CT_View3D) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _baaef.RotX != nil {
		_dgbdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0058"}}
		e.EncodeElement(_baaef.RotX, _dgbdb)
	}
	if _baaef.HPercent != nil {
		_efdgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_baaef.HPercent, _efdgd)
	}
	if _baaef.RotY != nil {
		_fadgg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u006f\u0074\u0059"}}
		e.EncodeElement(_baaef.RotY, _fadgg)
	}
	if _baaef.DepthPercent != nil {
		_adbadd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u0070\u0074\u0068\u0050\u0065r\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_baaef.DepthPercent, _adbadd)
	}
	if _baaef.RAngAx != nil {
		_dfbga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u0041\u006e\u0067\u0041\u0078"}}
		e.EncodeElement(_baaef.RAngAx, _dfbga)
	}
	if _baaef.Perspective != nil {
		_bedfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}}
		e.EncodeElement(_baaef.Perspective, _bedfb)
	}
	if _baaef.ExtLst != nil {
		_ebadgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_baaef.ExtLst, _ebadgc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_PlotAreaChoice1 and its children, prefixing error messages with path
func (_bfee *CT_PlotAreaChoice1) ValidateWithPath(path string) error {
	for _ddcgg, _gdfcb := range _bfee.ValAx {
		if _gbbeg := _gdfcb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0078\u005b\u0025\u0064\u005d", path, _ddcgg)); _gbbeg != nil {
			return _gbbeg
		}
	}
	for _cdgfg, _beeee := range _bfee.CatAx {
		if _cbab := _beeee.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002fC\u0061\u0074\u0041\u0078\u005b\u0025\u0064\u005d", path, _cdgfg)); _cbab != nil {
			return _cbab
		}
	}
	for _daac, _defc := range _bfee.DateAx {
		if _agec := _defc.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0061\u0074\u0065\u0041\u0078\u005b\u0025\u0064\u005d", path, _daac)); _agec != nil {
			return _agec
		}
	}
	for _acbec, _abge := range _bfee.SerAx {
		if _ggddf := _abge.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002fS\u0065\u0072\u0041\u0078\u005b\u0025\u0064\u005d", path, _acbec)); _ggddf != nil {
			return _ggddf
		}
	}
	return nil
}

type CT_TextLanguageID struct{ ValAttr string }

func (_bcecf *ST_CrossBetween) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gefaa, _gddgd := d.Token()
	if _gddgd != nil {
		return _gddgd
	}
	if _bccag, _eagg := _gefaa.(_e.EndElement); _eagg && _bccag.Name == start.Name {
		*_bcecf = 1
		return nil
	}
	if _dfbdb, _abecdf := _gefaa.(_e.CharData); !_abecdf {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _gefaa)
	} else {
		switch string(_dfbdb) {
		case "":
			*_bcecf = 0
		case "\u0062e\u0074\u0077\u0065\u0065\u006e":
			*_bcecf = 1
		case "\u006d\u0069\u0064\u0043\u0061\u0074":
			*_bcecf = 2
		}
	}
	_gefaa, _gddgd = d.Token()
	if _gddgd != nil {
		return _gddgd
	}
	if _gcfgc, _ecdbd := _gefaa.(_e.EndElement); _ecdbd && _gcfgc.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _gefaa)
}

func (_acdg *CT_NumDataSourceChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ebebg:
	for {
		_bddg, _ggac := d.Token()
		if _ggac != nil {
			return _ggac
		}
		switch _ecbg := _bddg.(type) {
		case _e.StartElement:
			switch _ecbg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0052\u0065\u0066"}:
				_acdg.NumRef = NewCT_NumRef()
				if _aedf := d.DecodeElement(_acdg.NumRef, &_ecbg); _aedf != nil {
					return _aedf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u004c\u0069\u0074"}:
				_acdg.NumLit = NewCT_NumData()
				if _fbff := d.DecodeElement(_acdg.NumLit, &_ecbg); _fbff != nil {
					return _fbff
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070p\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u004e\u0075\u006d\u0044a\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _ecbg.Name)
				if _cffee := d.Skip(); _cffee != nil {
					return _cffee
				}
			}
		case _e.EndElement:
			break _ebebg
		case _e.CharData:
		}
	}
	return nil
}

func (_ccfge ST_LblOffset) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ccfge.ST_LblOffsetPercent != nil {
		e.EncodeToken(_e.CharData(*_ccfge.ST_LblOffsetPercent))
	}
	if _ccfge.ST_LblOffsetUShort != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_ccfge.ST_LblOffsetUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_eaacf ST_ErrDir) Validate() error { return _eaacf.ValidateWithPath("") }

func (_edded *CT_Trendline) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_edded.TrendlineType = NewCT_TrendlineType()
_bbcba:
	for {
		_ddfcc, _bbge := d.Token()
		if _bbge != nil {
			return _bbge
		}
		switch _ccgdf := _ddfcc.(type) {
		case _e.StartElement:
			switch _ccgdf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				_edded.Name = new(string)
				if _eaced := d.DecodeElement(_edded.Name, &_ccgdf); _eaced != nil {
					return _eaced
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_edded.SpPr = _bb.NewCT_ShapeProperties()
				if _ffeebe := d.DecodeElement(_edded.SpPr, &_ccgdf); _ffeebe != nil {
					return _ffeebe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065"}:
				if _fbgee := d.DecodeElement(_edded.TrendlineType, &_ccgdf); _fbgee != nil {
					return _fbgee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				_edded.Order = NewCT_Order()
				if _cbde := d.DecodeElement(_edded.Order, &_ccgdf); _cbde != nil {
					return _cbde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0065\u0072\u0069\u006f\u0064"}:
				_edded.Period = NewCT_Period()
				if _dfeee := d.DecodeElement(_edded.Period, &_ccgdf); _dfeee != nil {
					return _dfeee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066o\u0072\u0077\u0061\u0072\u0064"}:
				_edded.Forward = NewCT_Double()
				if _abeec := d.DecodeElement(_edded.Forward, &_ccgdf); _abeec != nil {
					return _abeec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0063\u006b\u0077\u0061\u0072\u0064"}:
				_edded.Backward = NewCT_Double()
				if _defdc := d.DecodeElement(_edded.Backward, &_ccgdf); _defdc != nil {
					return _defdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069n\u0074\u0065\u0072\u0063\u0065\u0070t"}:
				_edded.Intercept = NewCT_Double()
				if _ggacb := d.DecodeElement(_edded.Intercept, &_ccgdf); _ggacb != nil {
					return _ggacb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0052\u0053\u0071\u0072"}:
				_edded.DispRSqr = NewCT_Boolean()
				if _gcgb := d.DecodeElement(_edded.DispRSqr, &_ccgdf); _gcgb != nil {
					return _gcgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073\u0070\u0045\u0071"}:
				_edded.DispEq = NewCT_Boolean()
				if _ddgcf := d.DecodeElement(_edded.DispEq, &_ccgdf); _ddgcf != nil {
					return _ddgcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c"}:
				_edded.TrendlineLbl = NewCT_TrendlineLbl()
				if _dedde := d.DecodeElement(_edded.TrendlineLbl, &_ccgdf); _dedde != nil {
					return _dedde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_edded.ExtLst = NewCT_ExtensionList()
				if _bgccg := d.DecodeElement(_edded.ExtLst, &_ccgdf); _bgccg != nil {
					return _bgccg
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_T\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0020\u0025\u0076", _ccgdf.Name)
				if _egcd := d.Skip(); _egcd != nil {
					return _egcd
				}
			}
		case _e.EndElement:
			break _bbcba
		case _e.CharData:
		}
	}
	return nil
}

func (_ccecd *CT_OfPieType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ccecd.ValAttr != ST_OfPieTypeUnset {
		_bccaa, _gdddd := _ccecd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gdddd != nil {
			return _gdddd
		}
		start.Attr = append(start.Attr, _bccaa)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_Lvl struct{ Pt []*CT_StrVal }

func NewCT_SerTxChoice() *CT_SerTxChoice { _eadg := &CT_SerTxChoice{}; return _eadg }

func (_ebabg ST_Crosses) ValidateWithPath(path string) error {
	switch _ebabg {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_ebabg))
	}
	return nil
}

type CT_NumData struct {
	FormatCode *string
	PtCount    *CT_UnsignedInt
	Pt         []*CT_NumVal
	ExtLst     *CT_ExtensionList
}

type CT_ValAx struct {
	AxId           *CT_UnsignedInt
	Scaling        *CT_Scaling
	Delete         *CT_Boolean
	AxPos          *CT_AxPos
	MajorGridlines *CT_ChartLines
	MinorGridlines *CT_ChartLines
	Title          *CT_Title
	NumFmt         *CT_NumFmt
	MajorTickMark  *CT_TickMark
	MinorTickMark  *CT_TickMark
	TickLblPos     *CT_TickLblPos
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	CrossAx        *CT_UnsignedInt
	Choice         *EG_AxSharedChoice
	CrossBetween   *CT_CrossBetween
	MajorUnit      *CT_AxisUnit
	MinorUnit      *CT_AxisUnit
	DispUnits      *CT_DispUnits
	ExtLst         *CT_ExtensionList
}

func (_debgd *EG_SurfaceChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cbdfb:
	for {
		_affd, _aaega := d.Token()
		if _aaega != nil {
			return _aaega
		}
		switch _cedfe := _affd.(type) {
		case _e.StartElement:
			switch _cedfe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077i\u0072\u0065\u0066\u0072\u0061\u006de"}:
				_debgd.Wireframe = NewCT_Boolean()
				if _ccgage := d.DecodeElement(_debgd.Wireframe, &_cedfe); _ccgage != nil {
					return _ccgage
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aedbd := NewCT_SurfaceSer()
				if _fcbcg := d.DecodeElement(_aedbd, &_cedfe); _fcbcg != nil {
					return _fcbcg
				}
				_debgd.Ser = append(_debgd.Ser, _aedbd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}:
				_debgd.BandFmts = NewCT_BandFmts()
				if _deaga := d.DecodeElement(_debgd.BandFmts, &_cedfe); _deaga != nil {
					return _deaga
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075n\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u006f\u006e E\u0047\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cedfe.Name)
				if _gdcgf := d.Skip(); _gdcgf != nil {
					return _gdcgf
				}
			}
		case _e.EndElement:
			break _cbdfb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PageMargins and its children, prefixing error messages with path
func (_daeg *CT_PageMargins) ValidateWithPath(path string) error { return nil }

func (_adfbd ST_LayoutTarget) ValidateWithPath(path string) error {
	switch _adfbd {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_adfbd))
	}
	return nil
}

func (_gcgcd ST_TrendlineType) String() string {
	switch _gcgcd {
	case 0:
		return ""
	case 1:
		return "\u0065\u0078\u0070"
	case 2:
		return "\u006c\u0069\u006e\u0065\u0061\u0072"
	case 3:
		return "\u006c\u006f\u0067"
	case 4:
		return "\u006do\u0076\u0069\u006e\u0067\u0041\u0076g"
	case 5:
		return "\u0070\u006f\u006c\u0079"
	case 6:
		return "\u0070\u006f\u0077e\u0072"
	}
	return ""
}

func (_agbde *CT_UnsignedInt) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fbcdd := range start.Attr {
		if _fbcdd.Name.Local == "\u0076\u0061\u006c" {
			_gaaf, _bgcec := _bg.ParseUint(_fbcdd.Value, 10, 32)
			if _bgcec != nil {
				return _bgcec
			}
			_agbde.ValAttr = uint32(_gaaf)
			continue
		}
	}
	for {
		_cfdc, _cbbdf := d.Token()
		if _cbbdf != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fU\u006e\u0073\u0069\u0067\u006e\u0065\u0064\u0049\u006e\u0074:\u0020\u0025\u0073", _cbbdf)
		}
		if _dgddf, _ebegb := _cfdc.(_e.EndElement); _ebegb && _dgddf.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_LogBase() *CT_LogBase { _gdfda := &CT_LogBase{}; _gdfda.ValAttr = 2; return _gdfda }

func (_cgda *CT_PivotSource) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cgda.FmtId = NewCT_UnsignedInt()
_agcad:
	for {
		_eegf, _edec := d.Token()
		if _edec != nil {
			return _edec
		}
		switch _bfgfe := _eegf.(type) {
		case _e.StartElement:
			switch _bfgfe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0061\u006d\u0065"}:
				if _bcgga := d.DecodeElement(&_cgda.Name, &_bfgfe); _bcgga != nil {
					return _bcgga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006d\u0074I\u0064"}:
				if _bgada := d.DecodeElement(_cgda.FmtId, &_bfgfe); _bgada != nil {
					return _bgada
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_begcb := NewCT_ExtensionList()
				if _abace := d.DecodeElement(_begcb, &_bfgfe); _abace != nil {
					return _abace
				}
				_cgda.ExtLst = append(_cgda.ExtLst, _begcb)
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053\u006fu\u0072c\u0065\u0020\u0025\u0076", _bfgfe.Name)
				if _bbdac := d.Skip(); _bbdac != nil {
					return _bbdac
				}
			}
		case _e.EndElement:
			break _agcad
		case _e.CharData:
		}
	}
	return nil
}

const (
	ST_ErrDirUnset ST_ErrDir = 0
	ST_ErrDirX     ST_ErrDir = 1
	ST_ErrDirY     ST_ErrDir = 2
)

func (_accga ST_TickMark) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ebcbc := _e.Attr{}
	_ebcbc.Name = name
	switch _accga {
	case ST_TickMarkUnset:
		_ebcbc.Value = ""
	case ST_TickMarkCross:
		_ebcbc.Value = "\u0063\u0072\u006fs\u0073"
	case ST_TickMarkIn:
		_ebcbc.Value = "\u0069\u006e"
	case ST_TickMarkNone:
		_ebcbc.Value = "\u006e\u006f\u006e\u0065"
	case ST_TickMarkOut:
		_ebcbc.Value = "\u006f\u0075\u0074"
	}
	return _ebcbc, nil
}

func (_ceggf *ChartSpace) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0063h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065"
	return _ceggf.CT_ChartSpace.MarshalXML(e, start)
}

func (_caecd *ST_ErrValType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bfdea, _aceg := d.Token()
	if _aceg != nil {
		return _aceg
	}
	if _ggbg, _bdbff := _bfdea.(_e.EndElement); _bdbff && _ggbg.Name == start.Name {
		*_caecd = 1
		return nil
	}
	if _fgcc, _dbcbbg := _bfdea.(_e.CharData); !_dbcbbg {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _bfdea)
	} else {
		switch string(_fgcc) {
		case "":
			*_caecd = 0
		case "\u0063\u0075\u0073\u0074":
			*_caecd = 1
		case "\u0066\u0069\u0078\u0065\u0064\u0056\u0061\u006c":
			*_caecd = 2
		case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0061\u0067\u0065":
			*_caecd = 3
		case "\u0073\u0074\u0064\u0044\u0065\u0076":
			*_caecd = 4
		case "\u0073\u0074\u0064\u0045\u0072\u0072":
			*_caecd = 5
		}
	}
	_bfdea, _aceg = d.Token()
	if _aceg != nil {
		return _aceg
	}
	if _bcfddc, _gcdf := _bfdea.(_e.EndElement); _gcdf && _bcfddc.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _bfdea)
}

// ST_Overlap is a union type
type ST_Overlap struct {
	ST_OverlapPercent *string
	ST_OverlapByte    *int8
}

func (_ggaag *CT_Orientation) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gbfgf := range start.Attr {
		if _gbfgf.Name.Local == "\u0076\u0061\u006c" {
			_ggaag.ValAttr.UnmarshalXMLAttr(_gbfgf)
			continue
		}
	}
	for {
		_ffce, _bdde := d.Token()
		if _bdde != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fO\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0020\u0025\u0073", _bdde)
		}
		if _dbfc, _beeg := _ffce.(_e.EndElement); _beeg && _dbfc.Name == start.Name {
			break
		}
	}
	return nil
}

func (_dcba *CT_DLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcba.ValAttr = ST_DLblPos(1)
	for _, _fega := range start.Attr {
		if _fega.Name.Local == "\u0076\u0061\u006c" {
			_dcba.ValAttr.UnmarshalXMLAttr(_fega)
			continue
		}
	}
	for {
		_dafd, _babd := d.Token()
		if _babd != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073\u003a\u0020%\u0073", _babd)
		}
		if _ebgf, _cdgdc := _dafd.(_e.EndElement); _cdgdc && _ebgf.Name == start.Name {
			break
		}
	}
	return nil
}

// ValidateWithPath validates the EG_PieChartShared and its children, prefixing error messages with path
func (_egcec *EG_PieChartShared) ValidateWithPath(path string) error {
	if _egcec.VaryColors != nil {
		if _aacfaag := _egcec.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _aacfaag != nil {
			return _aacfaag
		}
	}
	for _abdeg, _bcgee := range _egcec.Ser {
		if _ddgag := _bcgee.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _abdeg)); _ddgag != nil {
			return _ddgag
		}
	}
	if _egcec.DLbls != nil {
		if _eabec := _egcec.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _eabec != nil {
			return _eabec
		}
	}
	return nil
}

const (
	ST_BarGroupingUnset          ST_BarGrouping = 0
	ST_BarGroupingPercentStacked ST_BarGrouping = 1
	ST_BarGroupingClustered      ST_BarGrouping = 2
	ST_BarGroupingStandard       ST_BarGrouping = 3
	ST_BarGroupingStacked        ST_BarGrouping = 4
)

func (_gagge ST_ErrBarType) Validate() error { return _gagge.ValidateWithPath("") }

func (_eadfg *ST_BarDir) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_efegf, _fgcbg := d.Token()
	if _fgcbg != nil {
		return _fgcbg
	}
	if _fadac, _abbfa := _efegf.(_e.EndElement); _abbfa && _fadac.Name == start.Name {
		*_eadfg = 1
		return nil
	}
	if _fdbfe, _fbedb := _efegf.(_e.CharData); !_fbedb {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _efegf)
	} else {
		switch string(_fdbfe) {
		case "":
			*_eadfg = 0
		case "\u0062\u0061\u0072":
			*_eadfg = 1
		case "\u0063\u006f\u006c":
			*_eadfg = 2
		}
	}
	_efegf, _fgcbg = d.Token()
	if _fgcbg != nil {
		return _fgcbg
	}
	if _fdbee, _bdfe := _efegf.(_e.EndElement); _bdfe && _fdbee.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _efegf)
}

func (_fgbca *CT_SecondPieSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fgbgg := range start.Attr {
		if _fgbgg.Name.Local == "\u0076\u0061\u006c" {
			_gfgag, _ebed := ParseUnionST_SecondPieSize(_fgbgg.Value)
			if _ebed != nil {
				return _ebed
			}
			_fgbca.ValAttr = &_gfgag
			continue
		}
	}
	for {
		_ebgfa, _agdcb := d.Token()
		if _agdcb != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0065\u0063\u006fn\u0064P\u0069\u0065\u0053\u0069\u007a\u0065\u003a \u0025\u0073", _agdcb)
		}
		if _aaegg, _acgcg := _ebgfa.(_e.EndElement); _acgcg && _aaegg.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cbgb *CT_ChartSpace) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cbgb.Date1904 != nil {
		_eebd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}}
		e.EncodeElement(_cbgb.Date1904, _eebd)
	}
	if _cbgb.Lang != nil {
		_gcec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u006e\u0067"}}
		e.EncodeElement(_cbgb.Lang, _gcec)
	}
	if _cbgb.RoundedCorners != nil {
		_gde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ar\u006f\u0075\u006ed\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"}}
		e.EncodeElement(_cbgb.RoundedCorners, _gde)
	}
	if _cbgb.Style != nil {
		_bgff := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0074\u0079\u006c\u0065"}}
		e.EncodeElement(_cbgb.Style, _bgff)
	}
	if _cbgb.ClrMapOvr != nil {
		_bbee := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0063\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"}}
		e.EncodeElement(_cbgb.ClrMapOvr, _bbee)
	}
	if _cbgb.PivotSource != nil {
		_fadc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}}
		e.EncodeElement(_cbgb.PivotSource, _fadc)
	}
	if _cbgb.Protection != nil {
		_cgba := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_cbgb.Protection, _cgba)
	}
	_gbeb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0068\u0061\u0072\u0074"}}
	e.EncodeElement(_cbgb.Chart, _gbeb)
	if _cbgb.SpPr != nil {
		_caad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cbgb.SpPr, _caad)
	}
	if _cbgb.TxPr != nil {
		_edbe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cbgb.TxPr, _edbe)
	}
	if _cbgb.ExternalData != nil {
		_ccgb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u0065\u0072\u006e\u0061l\u0044\u0061\u0074\u0061"}}
		e.EncodeElement(_cbgb.ExternalData, _ccgb)
	}
	if _cbgb.PrintSettings != nil {
		_gdag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070r\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}}
		e.EncodeElement(_cbgb.PrintSettings, _gdag)
	}
	if _cbgb.UserShapes != nil {
		_fedgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}}
		e.EncodeElement(_cbgb.UserShapes, _fedgf)
	}
	if _cbgb.ExtLst != nil {
		_ebdac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cbgb.ExtLst, _ebdac)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gefdf ST_TimeUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gefdf.String(), start)
}

type CT_SplitType struct{ ValAttr ST_SplitType }

func (_bfbag *ST_Grouping) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bfbag = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_bfbag = 1
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_bfbag = 2
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_bfbag = 3
	}
	return nil
}

func (_gdcaf ST_SecondPieSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gdcaf.ST_SecondPieSizePercent != nil {
		e.EncodeToken(_e.CharData(*_gdcaf.ST_SecondPieSizePercent))
	}
	if _gdcaf.ST_SecondPieSizeUShort != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_gdcaf.ST_SecondPieSizeUShort)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

// Validate validates the ChartSpace and its children
func (_ccfd *ChartSpace) Validate() error {
	return _ccfd.ValidateWithPath("\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

func (_gacbd ST_SizeRepresents) Validate() error { return _gacbd.ValidateWithPath("") }

// Validate validates the CT_BubbleSer and its children
func (_egfe *CT_BubbleSer) Validate() error {
	return _egfe.ValidateWithPath("\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072")
}

func (_ecdc *ST_LayoutMode) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eebca, _cfefa := d.Token()
	if _cfefa != nil {
		return _cfefa
	}
	if _deaag, _gcee := _eebca.(_e.EndElement); _gcee && _deaag.Name == start.Name {
		*_ecdc = 1
		return nil
	}
	if _aefdcc, _fgffd := _eebca.(_e.CharData); !_fgffd {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eebca)
	} else {
		switch string(_aefdcc) {
		case "":
			*_ecdc = 0
		case "\u0065\u0064\u0067\u0065":
			*_ecdc = 1
		case "\u0066\u0061\u0063\u0074\u006f\u0072":
			*_ecdc = 2
		}
	}
	_eebca, _cfefa = d.Token()
	if _cfefa != nil {
		return _cfefa
	}
	if _dgab, _cebaaa := _eebca.(_e.EndElement); _cebaaa && _dgab.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eebca)
}

func (_fbbff *CT_SurfaceChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _fbbff.Wireframe != nil {
		_fggfa := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_fbbff.Wireframe, _fggfa)
	}
	if _fbbff.Ser != nil {
		_cfgcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bgbcg := range _fbbff.Ser {
			e.EncodeElement(_bgbcg, _cfgcg)
		}
	}
	if _fbbff.BandFmts != nil {
		_dcggg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_fbbff.BandFmts, _dcggg)
	}
	_gcedd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _dfbff := range _fbbff.AxId {
		e.EncodeElement(_dfbff, _gcedd)
	}
	if _fbbff.ExtLst != nil {
		_efdca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_fbbff.ExtLst, _efdca)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_afgf ST_GapAmount) String() string {
	if _afgf.ST_GapAmountPercent != nil {
		return _a.Sprintf("\u0025\u0076", *_afgf.ST_GapAmountPercent)
	}
	if _afgf.ST_GapAmountUShort != nil {
		return _a.Sprintf("\u0025\u0076", *_afgf.ST_GapAmountUShort)
	}
	return ""
}

func (_gcecgf *Group_DLbls) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_aaef:
	for {
		_feba, _cggeb := d.Token()
		if _cggeb != nil {
			return _cggeb
		}
		switch _faaeb := _feba.(type) {
		case _e.StartElement:
			switch _faaeb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_gcecgf.NumFmt = NewCT_NumFmt()
				if _ceefef := d.DecodeElement(_gcecgf.NumFmt, &_faaeb); _ceefef != nil {
					return _ceefef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_gcecgf.SpPr = _bb.NewCT_ShapeProperties()
				if _fdggg := d.DecodeElement(_gcecgf.SpPr, &_faaeb); _fdggg != nil {
					return _fdggg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_gcecgf.TxPr = _bb.NewCT_TextBody()
				if _gccfd := d.DecodeElement(_gcecgf.TxPr, &_faaeb); _gccfd != nil {
					return _gccfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_gcecgf.DLblPos = NewCT_DLblPos()
				if _ebfga := d.DecodeElement(_gcecgf.DLblPos, &_faaeb); _ebfga != nil {
					return _ebfga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_gcecgf.ShowLegendKey = NewCT_Boolean()
				if _bbbfg := d.DecodeElement(_gcecgf.ShowLegendKey, &_faaeb); _bbbfg != nil {
					return _bbbfg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_gcecgf.ShowVal = NewCT_Boolean()
				if _bebag := d.DecodeElement(_gcecgf.ShowVal, &_faaeb); _bebag != nil {
					return _bebag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_gcecgf.ShowCatName = NewCT_Boolean()
				if _cbfgg := d.DecodeElement(_gcecgf.ShowCatName, &_faaeb); _cbfgg != nil {
					return _cbfgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_gcecgf.ShowSerName = NewCT_Boolean()
				if _bcfac := d.DecodeElement(_gcecgf.ShowSerName, &_faaeb); _bcfac != nil {
					return _bcfac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_gcecgf.ShowPercent = NewCT_Boolean()
				if _ebdd := d.DecodeElement(_gcecgf.ShowPercent, &_faaeb); _ebdd != nil {
					return _ebdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_gcecgf.ShowBubbleSize = NewCT_Boolean()
				if _gbegb := d.DecodeElement(_gcecgf.ShowBubbleSize, &_faaeb); _gbegb != nil {
					return _gbegb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_gcecgf.Separator = new(string)
				if _dccgg := d.DecodeElement(_gcecgf.Separator, &_faaeb); _dccgg != nil {
					return _dccgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006fw\u004c\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_gcecgf.ShowLeaderLines = NewCT_Boolean()
				if _egadf := d.DecodeElement(_gcecgf.ShowLeaderLines, &_faaeb); _egadf != nil {
					return _egadf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "l\u0065\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}:
				_gcecgf.LeaderLines = NewCT_ChartLines()
				if _bcdbb := d.DecodeElement(_gcecgf.LeaderLines, &_faaeb); _bcdbb != nil {
					return _bcdbb
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073\u0020\u0025\u0076", _faaeb.Name)
				if _faffa := d.Skip(); _faffa != nil {
					return _faffa
				}
			}
		case _e.EndElement:
			break _aaef
		case _e.CharData:
		}
	}
	return nil
}

func (_ffddf *EG_SurfaceChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ffddf.Wireframe != nil {
		_cedad := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0077\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"}}
		e.EncodeElement(_ffddf.Wireframe, _cedad)
	}
	if _ffddf.Ser != nil {
		_beada := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _bfef := range _ffddf.Ser {
			e.EncodeElement(_bfef, _beada)
		}
	}
	if _ffddf.BandFmts != nil {
		_gcgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u006e\u0064\u0046\u006d\u0074\u0073"}}
		e.EncodeElement(_ffddf.BandFmts, _gcgc)
	}
	return nil
}

// Validate validates the CT_ChartSpace and its children
func (_fedfb *CT_ChartSpace) Validate() error {
	return _fedfb.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065")
}

func NewCT_StrVal() *CT_StrVal { _badfg := &CT_StrVal{}; return _badfg }

func (_edcd *CT_Skip) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _edcd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_adcc *CT_DLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_adcc.Idx = NewCT_UnsignedInt()
_adgfb:
	for {
		_ddf, _bcge := d.Token()
		if _bcge != nil {
			return _bcge
		}
		switch _eefb := _ddf.(type) {
		case _e.StartElement:
			switch _eefb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _cfecb := d.DecodeElement(_adcc.Idx, &_eefb); _cfecb != nil {
					return _cfecb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _bfdg := d.DecodeElement(&_adcc.Choice.Delete, &_eefb); _bfdg != nil {
					return _bfdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _eefbb := d.DecodeElement(&_adcc.Choice.Layout, &_eefb); _eefbb != nil {
					return _eefbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _fgab := d.DecodeElement(&_adcc.Choice.Tx, &_eefb); _fgab != nil {
					return _fgab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _bedc := d.DecodeElement(&_adcc.Choice.NumFmt, &_eefb); _bedc != nil {
					return _bedc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _gfag := d.DecodeElement(&_adcc.Choice.SpPr, &_eefb); _gfag != nil {
					return _gfag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _ccfe := d.DecodeElement(&_adcc.Choice.TxPr, &_eefb); _ccfe != nil {
					return _ccfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _bbbbg := d.DecodeElement(&_adcc.Choice.DLblPos, &_eefb); _bbbbg != nil {
					return _bbbbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _cbaa := d.DecodeElement(&_adcc.Choice.ShowLegendKey, &_eefb); _cbaa != nil {
					return _cbaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _edaa := d.DecodeElement(&_adcc.Choice.ShowVal, &_eefb); _edaa != nil {
					return _edaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _gecc := d.DecodeElement(&_adcc.Choice.ShowCatName, &_eefb); _gecc != nil {
					return _gecc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _dbdg := d.DecodeElement(&_adcc.Choice.ShowSerName, &_eefb); _dbdg != nil {
					return _dbdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _agee := d.DecodeElement(&_adcc.Choice.ShowPercent, &_eefb); _agee != nil {
					return _agee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _egdd := d.DecodeElement(&_adcc.Choice.ShowBubbleSize, &_eefb); _egdd != nil {
					return _egdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				if _adcc.Choice == nil {
					_adcc.Choice = NewCT_DLblChoice()
				}
				if _agfdc := d.DecodeElement(&_adcc.Choice.Separator, &_eefb); _agfdc != nil {
					return _agfdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_adcc.ExtLst = NewCT_ExtensionList()
				if _gdgc := d.DecodeElement(_adcc.ExtLst, &_eefb); _gdgc != nil {
					return _gdgc
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069p\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043T\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _eefb.Name)
				if _feac := d.Skip(); _feac != nil {
					return _feac
				}
			}
		case _e.EndElement:
			break _adgfb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_PlotAreaChoice and its children, prefixing error messages with path
func (_cfeed *CT_PlotAreaChoice) ValidateWithPath(path string) error {
	if _cfeed.AreaChart != nil {
		if _feec := _cfeed.AreaChart.ValidateWithPath(path + "\u002f\u0041\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074"); _feec != nil {
			return _feec
		}
	}
	if _cfeed.Area3DChart != nil {
		if _efea := _cfeed.Area3DChart.ValidateWithPath(path + "\u002f\u0041\u0072e\u0061\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _efea != nil {
			return _efea
		}
	}
	if _cfeed.LineChart != nil {
		if _gdcec := _cfeed.LineChart.ValidateWithPath(path + "\u002f\u004c\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074"); _gdcec != nil {
			return _gdcec
		}
	}
	if _cfeed.Line3DChart != nil {
		if _fadafd := _cfeed.Line3DChart.ValidateWithPath(path + "\u002f\u004c\u0069n\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _fadafd != nil {
			return _fadafd
		}
	}
	if _cfeed.StockChart != nil {
		if _ccbb := _cfeed.StockChart.ValidateWithPath(path + "/\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074"); _ccbb != nil {
			return _ccbb
		}
	}
	if _cfeed.RadarChart != nil {
		if _bdaca := _cfeed.RadarChart.ValidateWithPath(path + "/\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074"); _bdaca != nil {
			return _bdaca
		}
	}
	if _cfeed.ScatterChart != nil {
		if _acgg := _cfeed.ScatterChart.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074"); _acgg != nil {
			return _acgg
		}
	}
	if _cfeed.PieChart != nil {
		if _fdbc := _cfeed.PieChart.ValidateWithPath(path + "\u002fP\u0069\u0065\u0043\u0068\u0061\u0072t"); _fdbc != nil {
			return _fdbc
		}
	}
	if _cfeed.Pie3DChart != nil {
		if _dddcba := _cfeed.Pie3DChart.ValidateWithPath(path + "/\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _dddcba != nil {
			return _dddcba
		}
	}
	if _cfeed.DoughnutChart != nil {
		if _gbgb := _cfeed.DoughnutChart.ValidateWithPath(path + "\u002f\u0044\u006f\u0075\u0067\u0068\u006e\u0075\u0074C\u0068\u0061\u0072\u0074"); _gbgb != nil {
			return _gbgb
		}
	}
	if _cfeed.BarChart != nil {
		if _becb := _cfeed.BarChart.ValidateWithPath(path + "\u002fB\u0061\u0072\u0043\u0068\u0061\u0072t"); _becb != nil {
			return _becb
		}
	}
	if _cfeed.Bar3DChart != nil {
		if _aegbb := _cfeed.Bar3DChart.ValidateWithPath(path + "/\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _aegbb != nil {
			return _aegbb
		}
	}
	if _cfeed.OfPieChart != nil {
		if _cdbae := _cfeed.OfPieChart.ValidateWithPath(path + "/\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074"); _cdbae != nil {
			return _cdbae
		}
	}
	if _cfeed.SurfaceChart != nil {
		if _gddcd := _cfeed.SurfaceChart.ValidateWithPath(path + "\u002f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074"); _gddcd != nil {
			return _gddcd
		}
	}
	if _cfeed.Surface3DChart != nil {
		if _begbe := _cfeed.Surface3DChart.ValidateWithPath(path + "\u002fS\u0075r\u0066\u0061\u0063\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074"); _begbe != nil {
			return _begbe
		}
	}
	if _cfeed.BubbleChart != nil {
		if _gfacg := _cfeed.BubbleChart.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0043\u0068\u0061\u0072\u0074"); _gfacg != nil {
			return _gfacg
		}
	}
	return nil
}

func (_egae *CT_Orientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _egae.ValAttr != ST_OrientationUnset {
		_bacac, _gefb := _egae.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gefb != nil {
			return _gefb
		}
		start.Attr = append(start.Attr, _bacac)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_gbcd *CT_BuiltInUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gbcd.ValAttr != ST_BuiltInUnitUnset {
		_gcef, _ebaef := _gbcd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ebaef != nil {
			return _ebaef
		}
		start.Attr = append(start.Attr, _gcef)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_PictureOptions() *CT_PictureOptions { _bfbfg := &CT_PictureOptions{}; return _bfbfg }

func (_ceed *CT_ChartSpace) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ceed.Chart = NewCT_Chart()
_fefc:
	for {
		_fedfd, _ebge := d.Token()
		if _ebge != nil {
			return _ebge
		}
		switch _aaff := _fedfd.(type) {
		case _e.StartElement:
			switch _aaff.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0065\u0031\u0039\u0030\u0034"}:
				_ceed.Date1904 = NewCT_Boolean()
				if _fga := d.DecodeElement(_ceed.Date1904, &_aaff); _fga != nil {
					return _fga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u006e\u0067"}:
				_ceed.Lang = NewCT_TextLanguageID()
				if _bgac := d.DecodeElement(_ceed.Lang, &_aaff); _bgac != nil {
					return _bgac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0075\u006e\u0064\u0065\u0064\u0043\u006fr\u006e\u0065\u0072\u0073"}:
				_ceed.RoundedCorners = NewCT_Boolean()
				if _gddf := d.DecodeElement(_ceed.RoundedCorners, &_aaff); _gddf != nil {
					return _gddf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0079l\u0065"}:
				_ceed.Style = NewCT_Style()
				if _agfd := d.DecodeElement(_ceed.Style, &_aaff); _agfd != nil {
					return _agfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063l\u0072\u004d\u0061\u0070\u004f\u0076r"}:
				_ceed.ClrMapOvr = _bb.NewCT_ColorMapping()
				if _ddeb := d.DecodeElement(_ceed.ClrMapOvr, &_aaff); _ddeb != nil {
					return _ddeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0069\u0076\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"}:
				_ceed.PivotSource = NewCT_PivotSource()
				if _bagb := d.DecodeElement(_ceed.PivotSource, &_aaff); _bagb != nil {
					return _bagb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"}:
				_ceed.Protection = NewCT_Protection()
				if _efc := d.DecodeElement(_ceed.Protection, &_aaff); _efc != nil {
					return _efc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0068\u0061r\u0074"}:
				if _cba := d.DecodeElement(_ceed.Chart, &_aaff); _cba != nil {
					return _cba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ceed.SpPr = _bb.NewCT_ShapeProperties()
				if _cfb := d.DecodeElement(_ceed.SpPr, &_aaff); _cfb != nil {
					return _cfb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_ceed.TxPr = _bb.NewCT_TextBody()
				if _gbef := d.DecodeElement(_ceed.TxPr, &_aaff); _gbef != nil {
					return _gbef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074e\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"}:
				_ceed.ExternalData = NewCT_ExternalData()
				if _fdce := d.DecodeElement(_ceed.ExternalData, &_aaff); _fdce != nil {
					return _fdce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u0072\u0069\u006e\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073"}:
				_ceed.PrintSettings = NewCT_PrintSettings()
				if _ebca := d.DecodeElement(_ceed.PrintSettings, &_aaff); _ebca != nil {
					return _ebca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"}:
				_ceed.UserShapes = NewCT_RelId()
				if _abgb := d.DecodeElement(_ceed.UserShapes, &_aaff); _abgb != nil {
					return _abgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ceed.ExtLst = NewCT_ExtensionList()
				if _bbcg := d.DecodeElement(_ceed.ExtLst, &_aaff); _bbcg != nil {
					return _bbcg
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043h\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065 \u0025\u0076", _aaff.Name)
				if _dfcg := d.Skip(); _dfcg != nil {
					return _dfcg
				}
			}
		case _e.EndElement:
			break _fefc
		case _e.CharData:
		}
	}
	return nil
}

type EG_AreaChartShared struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
}

func (_acdd ST_LblAlgn) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_baaeb := _e.Attr{}
	_baaeb.Name = name
	switch _acdd {
	case ST_LblAlgnUnset:
		_baaeb.Value = ""
	case ST_LblAlgnCtr:
		_baaeb.Value = "\u0063\u0074\u0072"
	case ST_LblAlgnL:
		_baaeb.Value = "\u006c"
	case ST_LblAlgnR:
		_baaeb.Value = "\u0072"
	}
	return _baaeb, nil
}

// ValidateWithPath validates the CT_CustSplit and its children, prefixing error messages with path
func (_gceb *CT_CustSplit) ValidateWithPath(path string) error {
	for _cgdf, _bebbd := range _gceb.SecondPiePt {
		if _edcb := _bebbd.ValidateWithPath(_a.Sprintf("\u0025s\u002fS\u0065\u0063\u006f\u006e\u0064P\u0069\u0065P\u0074\u005b\u0025\u0064\u005d", path, _cgdf)); _edcb != nil {
			return _edcb
		}
	}
	return nil
}

func (_bcga *CT_Bar3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_egg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_bcga.BarDir, _egg)
	if _bcga.Grouping != nil {
		_gfcef := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_bcga.Grouping, _gfcef)
	}
	if _bcga.VaryColors != nil {
		_bdec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_bcga.VaryColors, _bdec)
	}
	if _bcga.Ser != nil {
		_bgdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gcb := range _bcga.Ser {
			e.EncodeElement(_gcb, _bgdd)
		}
	}
	if _bcga.DLbls != nil {
		_fgd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bcga.DLbls, _fgd)
	}
	if _bcga.GapWidth != nil {
		_deafg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_bcga.GapWidth, _deafg)
	}
	if _bcga.GapDepth != nil {
		_fddd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}}
		e.EncodeElement(_bcga.GapDepth, _fddd)
	}
	if _bcga.Shape != nil {
		_ebcd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u0061\u0070\u0065"}}
		e.EncodeElement(_bcga.Shape, _ebcd)
	}
	_ebbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _eca := range _bcga.AxId {
		e.EncodeElement(_eca, _ebbc)
	}
	if _bcga.ExtLst != nil {
		_beec := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bcga.ExtLst, _beec)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_LegendPos() *CT_LegendPos { _acaa := &CT_LegendPos{}; return _acaa }

func (_eeedg *CT_SerAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eeedg.AxId = NewCT_UnsignedInt()
	_eeedg.Scaling = NewCT_Scaling()
	_eeedg.AxPos = NewCT_AxPos()
	_eeedg.CrossAx = NewCT_UnsignedInt()
_fdege:
	for {
		_fggabe, _afdgf := d.Token()
		if _afdgf != nil {
			return _afdgf
		}
		switch _cdad := _fggabe.(type) {
		case _e.StartElement:
			switch _cdad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _degda := d.DecodeElement(_eeedg.AxId, &_cdad); _degda != nil {
					return _degda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _dfgba := d.DecodeElement(_eeedg.Scaling, &_cdad); _dfgba != nil {
					return _dfgba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_eeedg.Delete = NewCT_Boolean()
				if _gcgdc := d.DecodeElement(_eeedg.Delete, &_cdad); _gcgdc != nil {
					return _gcgdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _egba := d.DecodeElement(_eeedg.AxPos, &_cdad); _egba != nil {
					return _egba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_eeedg.MajorGridlines = NewCT_ChartLines()
				if _gabfd := d.DecodeElement(_eeedg.MajorGridlines, &_cdad); _gabfd != nil {
					return _gabfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_eeedg.MinorGridlines = NewCT_ChartLines()
				if _ddbb := d.DecodeElement(_eeedg.MinorGridlines, &_cdad); _ddbb != nil {
					return _ddbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_eeedg.Title = NewCT_Title()
				if _bgagf := d.DecodeElement(_eeedg.Title, &_cdad); _bgagf != nil {
					return _bgagf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_eeedg.NumFmt = NewCT_NumFmt()
				if _fdacc := d.DecodeElement(_eeedg.NumFmt, &_cdad); _fdacc != nil {
					return _fdacc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_eeedg.MajorTickMark = NewCT_TickMark()
				if _gacgdg := d.DecodeElement(_eeedg.MajorTickMark, &_cdad); _gacgdg != nil {
					return _gacgdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_eeedg.MinorTickMark = NewCT_TickMark()
				if _gbbga := d.DecodeElement(_eeedg.MinorTickMark, &_cdad); _gbbga != nil {
					return _gbbga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_eeedg.TickLblPos = NewCT_TickLblPos()
				if _ggdb := d.DecodeElement(_eeedg.TickLblPos, &_cdad); _ggdb != nil {
					return _ggdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_eeedg.SpPr = _bb.NewCT_ShapeProperties()
				if _ccfba := d.DecodeElement(_eeedg.SpPr, &_cdad); _ccfba != nil {
					return _ccfba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_eeedg.TxPr = _bb.NewCT_TextBody()
				if _cbba := d.DecodeElement(_eeedg.TxPr, &_cdad); _cbba != nil {
					return _cbba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _agbf := d.DecodeElement(_eeedg.CrossAx, &_cdad); _agbf != nil {
					return _agbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_eeedg.Choice = NewEG_AxSharedChoice()
				if _egeg := d.DecodeElement(&_eeedg.Choice.Crosses, &_cdad); _egeg != nil {
					return _egeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_eeedg.Choice = NewEG_AxSharedChoice()
				if _ebec := d.DecodeElement(&_eeedg.Choice.CrossesAt, &_cdad); _ebec != nil {
					return _ebec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_eeedg.TickLblSkip = NewCT_Skip()
				if _cffec := d.DecodeElement(_eeedg.TickLblSkip, &_cdad); _cffec != nil {
					return _cffec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_eeedg.TickMarkSkip = NewCT_Skip()
				if _cgdbe := d.DecodeElement(_eeedg.TickMarkSkip, &_cdad); _cgdbe != nil {
					return _cgdbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eeedg.ExtLst = NewCT_ExtensionList()
				if _edcba := d.DecodeElement(_eeedg.ExtLst, &_cdad); _edcba != nil {
					return _edcba
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078\u0020\u0025\u0076", _cdad.Name)
				if _cafb := d.Skip(); _cafb != nil {
					return _cafb
				}
			}
		case _e.EndElement:
			break _fdege
		case _e.CharData:
		}
	}
	return nil
}

func (_cagfd ST_ErrDir) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ebaega := _e.Attr{}
	_ebaega.Name = name
	switch _cagfd {
	case ST_ErrDirUnset:
		_ebaega.Value = ""
	case ST_ErrDirX:
		_ebaega.Value = "\u0078"
	case ST_ErrDirY:
		_ebaega.Value = "\u0079"
	}
	return _ebaega, nil
}

func (_fgbfb *ST_MarkerStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fgbfb = 0
	case "\u0063\u0069\u0072\u0063\u006c\u0065":
		*_fgbfb = 1
	case "\u0064\u0061\u0073\u0068":
		*_fgbfb = 2
	case "\u0064i\u0061\u006d\u006f\u006e\u0064":
		*_fgbfb = 3
	case "\u0064\u006f\u0074":
		*_fgbfb = 4
	case "\u006e\u006f\u006e\u0065":
		*_fgbfb = 5
	case "\u0070i\u0063\u0074\u0075\u0072\u0065":
		*_fgbfb = 6
	case "\u0070\u006c\u0075\u0073":
		*_fgbfb = 7
	case "\u0073\u0071\u0075\u0061\u0072\u0065":
		*_fgbfb = 8
	case "\u0073\u0074\u0061\u0072":
		*_fgbfb = 9
	case "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065":
		*_fgbfb = 10
	case "\u0078":
		*_fgbfb = 11
	case "\u0061\u0075\u0074\u006f":
		*_fgbfb = 12
	}
	return nil
}

func (_cbbgc *CT_StrVal) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cacfg := range start.Attr {
		if _cacfg.Name.Local == "\u0069\u0064\u0078" {
			_cbdcg, _caee := _bg.ParseUint(_cacfg.Value, 10, 32)
			if _caee != nil {
				return _caee
			}
			_cbbgc.IdxAttr = uint32(_cbdcg)
			continue
		}
	}
_bddec:
	for {
		_egdb, _bggfe := d.Token()
		if _bggfe != nil {
			return _bggfe
		}
		switch _ceca := _egdb.(type) {
		case _e.StartElement:
			switch _ceca.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				if _ebff := d.DecodeElement(&_cbbgc.V, &_ceca); _ebff != nil {
					return _ebff
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0053\u0074\u0072V\u0061\u006c \u0025\u0076", _ceca.Name)
				if _dcffc := d.Skip(); _dcffc != nil {
					return _dcffc
				}
			}
		case _e.EndElement:
			break _bddec
		case _e.CharData:
		}
	}
	return nil
}

type CT_MarkerStyle struct{ ValAttr ST_MarkerStyle }

type CT_SizeRepresents struct{ ValAttr ST_SizeRepresents }

func (_cgccg ST_ErrBarType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_agece := _e.Attr{}
	_agece.Name = name
	switch _cgccg {
	case ST_ErrBarTypeUnset:
		_agece.Value = ""
	case ST_ErrBarTypeBoth:
		_agece.Value = "\u0062\u006f\u0074\u0068"
	case ST_ErrBarTypeMinus:
		_agece.Value = "\u006d\u0069\u006eu\u0073"
	case ST_ErrBarTypePlus:
		_agece.Value = "\u0070\u006c\u0075\u0073"
	}
	return _agece, nil
}

// Validate validates the CT_CrossBetween and its children
func (_gfdba *CT_CrossBetween) Validate() error {
	return _gfdba.ValidateWithPath("\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e")
}

func (_bdbeb ST_TimeUnit) Validate() error { return _bdbeb.ValidateWithPath("") }

// Validate validates the CT_ScatterSer and its children
func (_fefb *CT_ScatterSer) Validate() error {
	return _fefb.ValidateWithPath("\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072")
}

func (_gaafa ST_MarkerStyle) Validate() error { return _gaafa.ValidateWithPath("") }

func (_cefgg *ST_BarGrouping) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cefgg = 0
	case "\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u0053\u0074a\u0063\u006b\u0065\u0064":
		*_cefgg = 1
	case "\u0063l\u0075\u0073\u0074\u0065\u0072\u0065d":
		*_cefgg = 2
	case "\u0073\u0074\u0061\u006e\u0064\u0061\u0072\u0064":
		*_cefgg = 3
	case "\u0073t\u0061\u0063\u006b\u0065\u0064":
		*_cefgg = 4
	}
	return nil
}

func (_fedaf *CT_RotY) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fedaf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_fedaf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_DispUnits and its children
func (_fgabg *CT_DispUnits) Validate() error {
	return _fgabg.ValidateWithPath("\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073")
}

func (_gbecd *CT_Pie3DChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _gbecd.VaryColors != nil {
		_ebefb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_gbecd.VaryColors, _ebefb)
	}
	if _gbecd.Ser != nil {
		_fbfcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _edgcc := range _gbecd.Ser {
			e.EncodeElement(_edgcc, _fbfcg)
		}
	}
	if _gbecd.DLbls != nil {
		_gedba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_gbecd.DLbls, _gedba)
	}
	if _gbecd.ExtLst != nil {
		_egbee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbecd.ExtLst, _egbee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_BarDir() *CT_BarDir { _dgg := &CT_BarDir{}; return _dgg }

func (_baeg ST_ScatterStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_bebfg := _e.Attr{}
	_bebfg.Name = name
	switch _baeg {
	case ST_ScatterStyleUnset:
		_bebfg.Value = ""
	case ST_ScatterStyleNone:
		_bebfg.Value = "\u006e\u006f\u006e\u0065"
	case ST_ScatterStyleLine:
		_bebfg.Value = "\u006c\u0069\u006e\u0065"
	case ST_ScatterStyleLineMarker:
		_bebfg.Value = "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleMarker:
		_bebfg.Value = "\u006d\u0061\u0072\u006b\u0065\u0072"
	case ST_ScatterStyleSmooth:
		_bebfg.Value = "\u0073\u006d\u006f\u006f\u0074\u0068"
	case ST_ScatterStyleSmoothMarker:
		_bebfg.Value = "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072"
	}
	return _bebfg, nil
}

// Validate validates the CT_BubbleChart and its children
func (_fedf *CT_BubbleChart) Validate() error {
	return _fedf.ValidateWithPath("\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074")
}

func (_baefd *ST_ScatterStyle) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_baefd = 0
	case "\u006e\u006f\u006e\u0065":
		*_baefd = 1
	case "\u006c\u0069\u006e\u0065":
		*_baefd = 2
	case "\u006c\u0069\u006e\u0065\u004d\u0061\u0072\u006b\u0065\u0072":
		*_baefd = 3
	case "\u006d\u0061\u0072\u006b\u0065\u0072":
		*_baefd = 4
	case "\u0073\u006d\u006f\u006f\u0074\u0068":
		*_baefd = 5
	case "\u0073\u006d\u006fo\u0074\u0068\u004d\u0061\u0072\u006b\u0065\u0072":
		*_baefd = 6
	}
	return nil
}

// Validate validates the EG_PieChartShared and its children
func (_fdfbe *EG_PieChartShared) Validate() error {
	return _fdfbe.ValidateWithPath("\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

const ST_DepthPercentWithSymbolPattern = "\u0030\u002a\u0028\u0028\u005b\u0032\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u005b\u0031\u002d9\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d)\u007c\u0032\u0030\u0030\u0030)\u0025"

const ST_GapAmountPercentPattern = "0\u002a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029|\u0028\u005b\u0031\u002d\u0039\u005d\u005b0-\u0039\u005d\u0029\u007c(\u005b\u0031\u002d\u0034\u005d\u005b\u0030\u002d\u0039][\u0030\u002d9\u005d\u0029\u007c\u0035\u0030\u0030\u0029\u0025"

func NewCT_TickMark() *CT_TickMark { _dgdee := &CT_TickMark{}; return _dgdee }

func (_fafgg ST_BuiltInUnit) String() string {
	switch _fafgg {
	case 0:
		return ""
	case 1:
		return "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073"
	case 2:
		return "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s"
	case 3:
		return "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 4:
		return "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073"
	case 5:
		return "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 6:
		return "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 7:
		return "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 8:
		return "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073"
	case 9:
		return "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es"
	}
	return ""
}

// Validate validates the CT_UpDownBar and its children
func (_dfba *CT_UpDownBar) Validate() error {
	return _dfba.ValidateWithPath("\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072")
}

type CT_StrRef struct {
	F        string
	StrCache *CT_StrData
	ExtLst   *CT_ExtensionList
}

type CT_DispBlanksAs struct{ ValAttr ST_DispBlanksAs }

// ValidateWithPath validates the CT_TickMark and its children, prefixing error messages with path
func (_gfagc *CT_TickMark) ValidateWithPath(path string) error {
	if _gggbe := _gfagc.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gggbe != nil {
		return _gggbe
	}
	return nil
}

func (_bcfedc ST_ErrBarType) ValidateWithPath(path string) error {
	switch _bcfedc {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bcfedc))
	}
	return nil
}

func (_cdfgb *ST_OfPieType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cacfgg, _adbe := d.Token()
	if _adbe != nil {
		return _adbe
	}
	if _dgffgd, _gdegff := _cacfgg.(_e.EndElement); _gdegff && _dgffgd.Name == start.Name {
		*_cdfgb = 1
		return nil
	}
	if _egefa, _gbdce := _cacfgg.(_e.CharData); !_gbdce {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _cacfgg)
	} else {
		switch string(_egefa) {
		case "":
			*_cdfgb = 0
		case "\u0070\u0069\u0065":
			*_cdfgb = 1
		case "\u0062\u0061\u0072":
			*_cdfgb = 2
		}
	}
	_cacfgg, _adbe = d.Token()
	if _adbe != nil {
		return _adbe
	}
	if _bfgec, _dfacd := _cacfgg.(_e.EndElement); _dfacd && _bfgec.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _cacfgg)
}

const (
	ST_ShapeUnset        ST_Shape = 0
	ST_ShapeCone         ST_Shape = 1
	ST_ShapeConeToMax    ST_Shape = 2
	ST_ShapeBox          ST_Shape = 3
	ST_ShapeCylinder     ST_Shape = 4
	ST_ShapePyramid      ST_Shape = 5
	ST_ShapePyramidToMax ST_Shape = 6
)

type CT_FirstSliceAng struct{ ValAttr *uint16 }

type CT_Area3DChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_AreaSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	GapDepth   *CT_GapAmount
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_bfac *ST_SizeRepresents) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_bfac = 0
	case "\u0061\u0072\u0065\u0061":
		*_bfac = 1
	case "\u0077":
		*_bfac = 2
	}
	return nil
}

// Validate validates the CT_ErrBarType and its children
func (_gfbb *CT_ErrBarType) Validate() error {
	return _gfbb.ValidateWithPath("\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065")
}

// ValidateWithPath validates the CT_GapAmount and its children, prefixing error messages with path
func (_dfeb *CT_GapAmount) ValidateWithPath(path string) error {
	if _dfeb.ValAttr != nil {
		if _cffc := _dfeb.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cffc != nil {
			return _cffc
		}
	}
	return nil
}

func (_ffcga *ST_LayoutTarget) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_badfe, _bbbfba := d.Token()
	if _bbbfba != nil {
		return _bbbfba
	}
	if _cfdga, _gbcbd := _badfe.(_e.EndElement); _gbcbd && _cfdga.Name == start.Name {
		*_ffcga = 1
		return nil
	}
	if _ddcac, _bdaed := _badfe.(_e.CharData); !_bdaed {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _badfe)
	} else {
		switch string(_ddcac) {
		case "":
			*_ffcga = 0
		case "\u0069\u006e\u006ee\u0072":
			*_ffcga = 1
		case "\u006f\u0075\u0074e\u0072":
			*_ffcga = 2
		}
	}
	_badfe, _bbbfba = d.Token()
	if _bbbfba != nil {
		return _bbbfba
	}
	if _ecbf, _gfdfd := _badfe.(_e.EndElement); _gfdfd && _ecbf.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _badfe)
}

// Validate validates the CT_OfPieChart and its children
func (_eafbc *CT_OfPieChart) Validate() error {
	return _eafbc.ValidateWithPath("\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_PivotFmts and its children, prefixing error messages with path
func (_bgfdf *CT_PivotFmts) ValidateWithPath(path string) error {
	for _eecec, _feeee := range _bgfdf.PivotFmt {
		if _gcffe := _feeee.ValidateWithPath(_a.Sprintf("\u0025s\u002fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u005b\u0025\u0064\u005d", path, _eecec)); _gcffe != nil {
			return _gcffe
		}
	}
	return nil
}

func (_acgbb *CT_SplitType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _cabad := range start.Attr {
		if _cabad.Name.Local == "\u0076\u0061\u006c" {
			_acgbb.ValAttr.UnmarshalXMLAttr(_cabad)
			continue
		}
	}
	for {
		_beegf, _dgea := d.Token()
		if _dgea != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0070l\u0069\u0074\u0054\u0079\u0070\u0065\u003a\u0020\u0025\u0073", _dgea)
		}
		if _gagc, _bggdf := _beegf.(_e.EndElement); _bggdf && _gagc.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_LineChart struct {
	Grouping   *CT_Grouping
	VaryColors *CT_Boolean
	Ser        []*CT_LineSer
	DLbls      *CT_DLbls
	DropLines  *CT_ChartLines
	HiLowLines *CT_ChartLines
	UpDownBars *CT_UpDownBars
	Marker     *CT_Boolean
	Smooth     *CT_Boolean
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_fdfff *CT_LblOffset) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _acgb := range start.Attr {
		if _acgb.Name.Local == "\u0076\u0061\u006c" {
			_efbc, _ebfcd := ParseUnionST_LblOffset(_acgb.Value)
			if _ebfcd != nil {
				return _ebfcd
			}
			_fdfff.ValAttr = &_efbc
			continue
		}
	}
	for {
		_gfade, _cebbcc := d.Token()
		if _cebbcc != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u004c\u0062l\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0073", _cebbcc)
		}
		if _agcee, _bccd := _gfade.(_e.EndElement); _bccd && _agcee.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_BubbleChart() *CT_BubbleChart { _afe := &CT_BubbleChart{}; return _afe }

// ValidateWithPath validates the CT_LblOffset and its children, prefixing error messages with path
func (_ffdbd *CT_LblOffset) ValidateWithPath(path string) error {
	if _ffdbd.ValAttr != nil {
		if _aaac := _ffdbd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _aaac != nil {
			return _aaac
		}
	}
	return nil
}

type CT_PivotFmts struct{ PivotFmt []*CT_PivotFmt }

type Any interface {
	MarshalXML(_gcabae *_e.Encoder, _eafad _e.StartElement) error
	UnmarshalXML(_cfdg *_e.Decoder, _eecbd _e.StartElement) error
}

func (_bbfd *CT_HPercent) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _bbfd.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_bbfd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ST_BubbleScale is a union type
type ST_BubbleScale struct {
	ST_BubbleScalePercent *string
	ST_BubbleScaleUInt    *uint32
}

func (_eddc *CT_SplitType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _eddc.ValAttr != ST_SplitTypeUnset {
		_efcf, _edcda := _eddc.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _edcda != nil {
			return _edcda
		}
		start.Attr = append(start.Attr, _efcf)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SerAx and its children, prefixing error messages with path
func (_dgfbed *CT_SerAx) ValidateWithPath(path string) error {
	if _dbaeb := _dgfbed.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _dbaeb != nil {
		return _dbaeb
	}
	if _aeccf := _dgfbed.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _aeccf != nil {
		return _aeccf
	}
	if _dgfbed.Delete != nil {
		if _bbbfc := _dgfbed.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _bbbfc != nil {
			return _bbbfc
		}
	}
	if _cagfc := _dgfbed.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _cagfc != nil {
		return _cagfc
	}
	if _dgfbed.MajorGridlines != nil {
		if _efdae := _dgfbed.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _efdae != nil {
			return _efdae
		}
	}
	if _dgfbed.MinorGridlines != nil {
		if _dced := _dgfbed.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _dced != nil {
			return _dced
		}
	}
	if _dgfbed.Title != nil {
		if _ffcbf := _dgfbed.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _ffcbf != nil {
			return _ffcbf
		}
	}
	if _dgfbed.NumFmt != nil {
		if _cddc := _dgfbed.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cddc != nil {
			return _cddc
		}
	}
	if _dgfbed.MajorTickMark != nil {
		if _fcga := _dgfbed.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _fcga != nil {
			return _fcga
		}
	}
	if _dgfbed.MinorTickMark != nil {
		if _befdf := _dgfbed.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _befdf != nil {
			return _befdf
		}
	}
	if _dgfbed.TickLblPos != nil {
		if _dfaed := _dgfbed.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _dfaed != nil {
			return _dfaed
		}
	}
	if _dgfbed.SpPr != nil {
		if _gbfgg := _dgfbed.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gbfgg != nil {
			return _gbfgg
		}
	}
	if _dgfbed.TxPr != nil {
		if _edfb := _dgfbed.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _edfb != nil {
			return _edfb
		}
	}
	if _bfad := _dgfbed.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _bfad != nil {
		return _bfad
	}
	if _dgfbed.Choice != nil {
		if _beca := _dgfbed.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _beca != nil {
			return _beca
		}
	}
	if _dgfbed.TickLblSkip != nil {
		if _bacgb := _dgfbed.TickLblSkip.ValidateWithPath(path + "\u002f\u0054\u0069c\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"); _bacgb != nil {
			return _bacgb
		}
	}
	if _dgfbed.TickMarkSkip != nil {
		if _edba := _dgfbed.TickMarkSkip.ValidateWithPath(path + "\u002f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"); _edba != nil {
			return _edba
		}
	}
	if _dgfbed.ExtLst != nil {
		if _dgced := _dgfbed.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgced != nil {
			return _dgced
		}
	}
	return nil
}

func (_eefc *CT_Bar3DChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eefc.BarDir = NewCT_BarDir()
_cfe:
	for {
		_bgga, _feef := d.Token()
		if _feef != nil {
			return _feef
		}
		switch _fda := _bgga.(type) {
		case _e.StartElement:
			switch _fda.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _fgcf := d.DecodeElement(_eefc.BarDir, &_fda); _fgcf != nil {
					return _fgcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_eefc.Grouping = NewCT_BarGrouping()
				if _dcc := d.DecodeElement(_eefc.Grouping, &_fda); _dcc != nil {
					return _dcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_eefc.VaryColors = NewCT_Boolean()
				if _cggb := d.DecodeElement(_eefc.VaryColors, &_fda); _cggb != nil {
					return _cggb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_cggc := NewCT_BarSer()
				if _fgdf := d.DecodeElement(_cggc, &_fda); _fgdf != nil {
					return _fgdf
				}
				_eefc.Ser = append(_eefc.Ser, _cggc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_eefc.DLbls = NewCT_DLbls()
				if _aecf := d.DecodeElement(_eefc.DLbls, &_fda); _aecf != nil {
					return _aecf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}:
				_eefc.GapWidth = NewCT_GapAmount()
				if _aaca := d.DecodeElement(_eefc.GapWidth, &_fda); _aaca != nil {
					return _aaca
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0061\u0070\u0044\u0065\u0070\u0074\u0068"}:
				_eefc.GapDepth = NewCT_GapAmount()
				if _cbg := d.DecodeElement(_eefc.GapDepth, &_fda); _cbg != nil {
					return _cbg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u0061p\u0065"}:
				_eefc.Shape = NewCT_Shape()
				if _fcg := d.DecodeElement(_eefc.Shape, &_fda); _fcg != nil {
					return _fcg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_bcb := NewCT_UnsignedInt()
				if _eag := d.DecodeElement(_bcb, &_fda); _eag != nil {
					return _eag
				}
				_eefc.AxId = append(_eefc.AxId, _bcb)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eefc.ExtLst = NewCT_ExtensionList()
				if _fedc := d.DecodeElement(_eefc.ExtLst, &_fda); _fedc != nil {
					return _fedc
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042a\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _fda.Name)
				if _degg := d.Skip(); _degg != nil {
					return _degg
				}
			}
		case _e.EndElement:
			break _cfe
		case _e.CharData:
		}
	}
	return nil
}

type CT_PictureOptions struct {
	ApplyToFront     *CT_Boolean
	ApplyToSides     *CT_Boolean
	ApplyToEnd       *CT_Boolean
	PictureFormat    *CT_PictureFormat
	PictureStackUnit *CT_PictureStackUnit
}

func NewCT_AreaChart() *CT_AreaChart { _df := &CT_AreaChart{}; return _df }

func (_ffec *CT_DispUnits) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_cdcf:
	for {
		_gafd, _eddb := d.Token()
		if _eddb != nil {
			return _eddb
		}
		switch _gcgfd := _gafd.(type) {
		case _e.StartElement:
			switch _gcgfd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0075\u0073\u0074\u0055\u006e\u0069\u0074"}:
				_ffec.Choice = NewCT_DispUnitsChoice()
				if _bgda := d.DecodeElement(&_ffec.Choice.CustUnit, &_gcgfd); _bgda != nil {
					return _bgda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0069\u006c\u0074\u0049\u006e\u0055\u006e\u0069\u0074"}:
				_ffec.Choice = NewCT_DispUnitsChoice()
				if _abecd := d.DecodeElement(&_ffec.Choice.BuiltInUnit, &_gcgfd); _abecd != nil {
					return _abecd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c"}:
				_ffec.DispUnitsLbl = NewCT_DispUnitsLbl()
				if _eedad := d.DecodeElement(_ffec.DispUnitsLbl, &_gcgfd); _eedad != nil {
					return _eedad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_ffec.ExtLst = NewCT_ExtensionList()
				if _dafg := d.DecodeElement(_ffec.ExtLst, &_gcgfd); _dafg != nil {
					return _dafg
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_D\u0069\u0073p\u0055\u006e\u0069\u0074\u0073\u0020\u0025\u0076", _gcgfd.Name)
				if _dgfb := d.Skip(); _dgfb != nil {
					return _dgfb
				}
			}
		case _e.EndElement:
			break _cdcf
		case _e.CharData:
		}
	}
	return nil
}

func (_gcfb ST_LblAlgn) Validate() error { return _gcfb.ValidateWithPath("") }

func (_ddfb *CT_Protection) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_fgaaae:
	for {
		_cgeea, _efdad := d.Token()
		if _efdad != nil {
			return _efdad
		}
		switch _dbce := _cgeea.(type) {
		case _e.StartElement:
			switch _dbce.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "c\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}:
				_ddfb.ChartObject = NewCT_Boolean()
				if _dbeda := d.DecodeElement(_ddfb.ChartObject, &_dbce); _dbeda != nil {
					return _dbeda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0061\u0074\u0061"}:
				_ddfb.Data = NewCT_Boolean()
				if _cgbbb := d.DecodeElement(_ddfb.Data, &_dbce); _cgbbb != nil {
					return _cgbbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}:
				_ddfb.Formatting = NewCT_Boolean()
				if _cdbc := d.DecodeElement(_ddfb.Formatting, &_dbce); _cdbc != nil {
					return _cdbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u006c\u0065\u0063\u0074\u0069\u006fn"}:
				_ddfb.Selection = NewCT_Boolean()
				if _feefg := d.DecodeElement(_ddfb.Selection, &_dbce); _feefg != nil {
					return _feefg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0073\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}:
				_ddfb.UserInterface = NewCT_Boolean()
				if _cgga := d.DecodeElement(_ddfb.UserInterface, &_dbce); _cgga != nil {
					return _cgga
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050r\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e \u0025\u0076", _dbce.Name)
				if _eabag := d.Skip(); _eabag != nil {
					return _eabag
				}
			}
		case _e.EndElement:
			break _fgaaae
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_Bar3DChart() *CT_Bar3DChart {
	_adgc := &CT_Bar3DChart{}
	_adgc.BarDir = NewCT_BarDir()
	return _adgc
}

func (_dadc *CT_Style) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _dadc.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fgcgc ST_DLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_fgcgc.String(), start)
}

// ValidateWithPath validates the CT_UpDownBars and its children, prefixing error messages with path
func (_efbbb *CT_UpDownBars) ValidateWithPath(path string) error {
	if _efbbb.GapWidth != nil {
		if _eadcc := _efbbb.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _eadcc != nil {
			return _eadcc
		}
	}
	if _efbbb.UpBars != nil {
		if _ddeef := _efbbb.UpBars.ValidateWithPath(path + "\u002fU\u0070\u0042\u0061\u0072\u0073"); _ddeef != nil {
			return _ddeef
		}
	}
	if _efbbb.DownBars != nil {
		if _ddefa := _efbbb.DownBars.ValidateWithPath(path + "\u002fD\u006f\u0077\u006e\u0042\u0061\u0072s"); _ddefa != nil {
			return _ddefa
		}
	}
	if _efbbb.ExtLst != nil {
		if _cgdac := _efbbb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cgdac != nil {
			return _cgdac
		}
	}
	return nil
}

func NewCT_Area3DChart() *CT_Area3DChart { _f := &CT_Area3DChart{}; return _f }

func (_bgdad ST_LblAlgn) String() string {
	switch _bgdad {
	case 0:
		return ""
	case 1:
		return "\u0063\u0074\u0072"
	case 2:
		return "\u006c"
	case 3:
		return "\u0072"
	}
	return ""
}

type CT_Shape struct{ ValAttr ST_Shape }

func NewCT_BarGrouping() *CT_BarGrouping { _ffaaa := &CT_BarGrouping{}; return _ffaaa }

func (_cdgf *CT_CatAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_cdgf.AxId = NewCT_UnsignedInt()
	_cdgf.Scaling = NewCT_Scaling()
	_cdgf.AxPos = NewCT_AxPos()
	_cdgf.CrossAx = NewCT_UnsignedInt()
_fdbd:
	for {
		_dcaa, _dcbe := d.Token()
		if _dcbe != nil {
			return _dcbe
		}
		switch _eegb := _dcaa.(type) {
		case _e.StartElement:
			switch _eegb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _fdda := d.DecodeElement(_cdgf.AxId, &_eegb); _fdda != nil {
					return _fdda
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _eedd := d.DecodeElement(_cdgf.Scaling, &_eegb); _eedd != nil {
					return _eedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_cdgf.Delete = NewCT_Boolean()
				if _ebaec := d.DecodeElement(_cdgf.Delete, &_eegb); _ebaec != nil {
					return _ebaec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _eeag := d.DecodeElement(_cdgf.AxPos, &_eegb); _eeag != nil {
					return _eeag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cdgf.MajorGridlines = NewCT_ChartLines()
				if _caecg := d.DecodeElement(_cdgf.MajorGridlines, &_eegb); _caecg != nil {
					return _caecg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_cdgf.MinorGridlines = NewCT_ChartLines()
				if _gaff := d.DecodeElement(_cdgf.MinorGridlines, &_eegb); _gaff != nil {
					return _gaff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_cdgf.Title = NewCT_Title()
				if _egaf := d.DecodeElement(_cdgf.Title, &_eegb); _egaf != nil {
					return _egaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_cdgf.NumFmt = NewCT_NumFmt()
				if _bccac := d.DecodeElement(_cdgf.NumFmt, &_eegb); _bccac != nil {
					return _bccac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cdgf.MajorTickMark = NewCT_TickMark()
				if _gcbe := d.DecodeElement(_cdgf.MajorTickMark, &_eegb); _gcbe != nil {
					return _gcbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_cdgf.MinorTickMark = NewCT_TickMark()
				if _edde := d.DecodeElement(_cdgf.MinorTickMark, &_eegb); _edde != nil {
					return _edde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_cdgf.TickLblPos = NewCT_TickLblPos()
				if _ece := d.DecodeElement(_cdgf.TickLblPos, &_eegb); _ece != nil {
					return _ece
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_cdgf.SpPr = _bb.NewCT_ShapeProperties()
				if _eabe := d.DecodeElement(_cdgf.SpPr, &_eegb); _eabe != nil {
					return _eabe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_cdgf.TxPr = _bb.NewCT_TextBody()
				if _dcbeg := d.DecodeElement(_cdgf.TxPr, &_eegb); _dcbeg != nil {
					return _dcbeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _cef := d.DecodeElement(_cdgf.CrossAx, &_eegb); _cef != nil {
					return _cef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_cdgf.Choice = NewEG_AxSharedChoice()
				if _bba := d.DecodeElement(&_cdgf.Choice.Crosses, &_eegb); _bba != nil {
					return _bba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_cdgf.Choice = NewEG_AxSharedChoice()
				if _ddb := d.DecodeElement(&_cdgf.Choice.CrossesAt, &_eegb); _ddb != nil {
					return _ddb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0075\u0074\u006f"}:
				_cdgf.Auto = NewCT_Boolean()
				if _cfedf := d.DecodeElement(_cdgf.Auto, &_eegb); _cfedf != nil {
					return _cfedf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u0041\u006c\u0067\u006e"}:
				_cdgf.LblAlgn = NewCT_LblAlgn()
				if _bbcf := d.DecodeElement(_cdgf.LblAlgn, &_eegb); _bbcf != nil {
					return _bbcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006cb\u006c\u004f\u0066\u0066\u0073\u0065t"}:
				_cdgf.LblOffset = NewCT_LblOffset()
				if _agba := d.DecodeElement(_cdgf.LblOffset, &_eegb); _agba != nil {
					return _agba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "t\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}:
				_cdgf.TickLblSkip = NewCT_Skip()
				if _bbfe := d.DecodeElement(_cdgf.TickLblSkip, &_eegb); _bbfe != nil {
					return _bbfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063k\u004d\u0061\u0072\u006b\u0053\u006b\u0069\u0070"}:
				_cdgf.TickMarkSkip = NewCT_Skip()
				if _adb := d.DecodeElement(_cdgf.TickMarkSkip, &_eegb); _adb != nil {
					return _adb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}:
				_cdgf.NoMultiLvlLbl = NewCT_Boolean()
				if _abcf := d.DecodeElement(_cdgf.NoMultiLvlLbl, &_eegb); _abcf != nil {
					return _abcf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_cdgf.ExtLst = NewCT_ExtensionList()
				if _gbfa := d.DecodeElement(_cdgf.ExtLst, &_eegb); _gbfa != nil {
					return _gbfa
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078\u0020\u0025\u0076", _eegb.Name)
				if _dfd := d.Skip(); _dfd != nil {
					return _dfd
				}
			}
		case _e.EndElement:
			break _fdbd
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the EG_BarChartShared and its children
func (_bada *EG_BarChartShared) Validate() error {
	return _bada.ValidateWithPath("\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064")
}

func (_gagbe *CT_PieChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_becg:
	for {
		_geabb, _eade := d.Token()
		if _eade != nil {
			return _eade
		}
		switch _dcgg := _geabb.(type) {
		case _e.StartElement:
			switch _dcgg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_gagbe.VaryColors = NewCT_Boolean()
				if _dcebc := d.DecodeElement(_gagbe.VaryColors, &_dcgg); _dcebc != nil {
					return _dcebc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_dfab := NewCT_PieSer()
				if _abdeb := d.DecodeElement(_dfab, &_dcgg); _abdeb != nil {
					return _abdeb
				}
				_gagbe.Ser = append(_gagbe.Ser, _dfab)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_gagbe.DLbls = NewCT_DLbls()
				if _ggaee := d.DecodeElement(_gagbe.DLbls, &_dcgg); _ggaee != nil {
					return _ggaee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066\u0069\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}:
				_gagbe.FirstSliceAng = NewCT_FirstSliceAng()
				if _afeeb := d.DecodeElement(_gagbe.FirstSliceAng, &_dcgg); _afeeb != nil {
					return _afeeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gagbe.ExtLst = NewCT_ExtensionList()
				if _dceeg := d.DecodeElement(_gagbe.ExtLst, &_dcgg); _dceeg != nil {
					return _dceeg
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _dcgg.Name)
				if _cdfab := d.Skip(); _cdfab != nil {
					return _cdfab
				}
			}
		case _e.EndElement:
			break _becg
		case _e.CharData:
		}
	}
	return nil
}

func (_bagce ST_LayoutMode) ValidateWithPath(path string) error {
	switch _bagce {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bagce))
	}
	return nil
}

func (_feaf ST_BarDir) ValidateWithPath(path string) error {
	switch _feaf {
	case 0, 1, 2:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_feaf))
	}
	return nil
}

const (
	ST_TickLblPosUnset  ST_TickLblPos = 0
	ST_TickLblPosHigh   ST_TickLblPos = 1
	ST_TickLblPosLow    ST_TickLblPos = 2
	ST_TickLblPosNextTo ST_TickLblPos = 3
	ST_TickLblPosNone   ST_TickLblPos = 4
)

// ValidateWithPath validates the CT_Bar3DChart and its children, prefixing error messages with path
func (_dff *CT_Bar3DChart) ValidateWithPath(path string) error {
	if _dbc := _dff.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _dbc != nil {
		return _dbc
	}
	if _dff.Grouping != nil {
		if _eafb := _dff.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _eafb != nil {
			return _eafb
		}
	}
	if _dff.VaryColors != nil {
		if _bgb := _dff.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bgb != nil {
			return _bgb
		}
	}
	for _fcea, _ffaa := range _dff.Ser {
		if _gdc := _ffaa.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fcea)); _gdc != nil {
			return _gdc
		}
	}
	if _dff.DLbls != nil {
		if _ebd := _dff.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _ebd != nil {
			return _ebd
		}
	}
	if _dff.GapWidth != nil {
		if _ffc := _dff.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _ffc != nil {
			return _ffc
		}
	}
	if _dff.GapDepth != nil {
		if _facb := _dff.GapDepth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0044\u0065\u0070\u0074h"); _facb != nil {
			return _facb
		}
	}
	if _dff.Shape != nil {
		if _babg := _dff.Shape.ValidateWithPath(path + "\u002f\u0053\u0068\u0061\u0070\u0065"); _babg != nil {
			return _babg
		}
	}
	for _gefd, _effb := range _dff.AxId {
		if _afa := _effb.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gefd)); _afa != nil {
			return _afa
		}
	}
	if _dff.ExtLst != nil {
		if _dagd := _dff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dagd != nil {
			return _dagd
		}
	}
	return nil
}

func NewCT_SerTx() *CT_SerTx {
	_eeefb := &CT_SerTx{}
	_eeefb.Choice = NewCT_SerTxChoice()
	return _eeefb
}

// ValidateWithPath validates the CT_ScatterChart and its children, prefixing error messages with path
func (_fabac *CT_ScatterChart) ValidateWithPath(path string) error {
	if _edggb := _fabac.ScatterStyle.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065"); _edggb != nil {
		return _edggb
	}
	if _fabac.VaryColors != nil {
		if _ebgff := _fabac.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _ebgff != nil {
			return _ebgff
		}
	}
	for _dgdbdg, _cece := range _fabac.Ser {
		if _cafg := _cece.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dgdbdg)); _cafg != nil {
			return _cafg
		}
	}
	if _fabac.DLbls != nil {
		if _febfa := _fabac.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _febfa != nil {
			return _febfa
		}
	}
	for _ccfag, _addaa := range _fabac.AxId {
		if _aaec := _addaa.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _ccfag)); _aaec != nil {
			return _aaec
		}
	}
	if _fabac.ExtLst != nil {
		if _egcea := _fabac.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egcea != nil {
			return _egcea
		}
	}
	return nil
}

// ValidateWithPath validates the CT_StockChart and its children, prefixing error messages with path
func (_begf *CT_StockChart) ValidateWithPath(path string) error {
	for _dgadf, _afdfd := range _begf.Ser {
		if _dagdc := _afdfd.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dgadf)); _dagdc != nil {
			return _dagdc
		}
	}
	if _begf.DLbls != nil {
		if _dbgdb := _begf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _dbgdb != nil {
			return _dbgdb
		}
	}
	if _begf.DropLines != nil {
		if _faagg := _begf.DropLines.ValidateWithPath(path + "\u002f\u0044\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"); _faagg != nil {
			return _faagg
		}
	}
	if _begf.HiLowLines != nil {
		if _dcbc := _begf.HiLowLines.ValidateWithPath(path + "/\u0048\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"); _dcbc != nil {
			return _dcbc
		}
	}
	if _begf.UpDownBars != nil {
		if _bcdda := _begf.UpDownBars.ValidateWithPath(path + "/\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"); _bcdda != nil {
			return _bcdda
		}
	}
	for _cdae, _bcfg := range _begf.AxId {
		if _fcdb := _bcfg.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _cdae)); _fcdb != nil {
			return _fcdb
		}
	}
	if _begf.ExtLst != nil {
		if _agef := _begf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _agef != nil {
			return _agef
		}
	}
	return nil
}

type EG_AxSharedChoice struct {
	Crosses   *CT_Crosses
	CrossesAt *CT_Double
}

// Validate validates the CT_DLbls and its children
func (_efe *CT_DLbls) Validate() error {
	return _efe.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073")
}

func (_deefb *CT_View3D) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dgffgg:
	for {
		_aecdb, _fgff := d.Token()
		if _fgff != nil {
			return _fgff
		}
		switch _dcdfa := _aecdb.(type) {
		case _e.StartElement:
			switch _dcdfa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0058"}:
				_deefb.RotX = NewCT_RotX()
				if _gfeeb := d.DecodeElement(_deefb.RotX, &_dcdfa); _gfeeb != nil {
					return _gfeeb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_deefb.HPercent = NewCT_HPercent()
				if _bfbab := d.DecodeElement(_deefb.HPercent, &_dcdfa); _bfbab != nil {
					return _bfbab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u006f\u0074\u0059"}:
				_deefb.RotY = NewCT_RotY()
				if _bcbbb := d.DecodeElement(_deefb.RotY, &_dcdfa); _bcbbb != nil {
					return _bcbbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u0070t\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_deefb.DepthPercent = NewCT_DepthPercent()
				if _bebcb := d.DecodeElement(_deefb.DepthPercent, &_dcdfa); _bebcb != nil {
					return _bebcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0041\u006e\u0067\u0041\u0078"}:
				_deefb.RAngAx = NewCT_Boolean()
				if _ecgfc := d.DecodeElement(_deefb.RAngAx, &_dcdfa); _ecgfc != nil {
					return _ecgfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "p\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065"}:
				_deefb.Perspective = NewCT_Perspective()
				if _fgfd := d.DecodeElement(_deefb.Perspective, &_dcdfa); _fgfd != nil {
					return _fgfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_deefb.ExtLst = NewCT_ExtensionList()
				if _aafa := d.DecodeElement(_deefb.ExtLst, &_dcdfa); _aafa != nil {
					return _aafa
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0056\u0069\u0065w\u0033\u0044 \u0025\u0076", _dcdfa.Name)
				if _gfecbf := d.Skip(); _gfecbf != nil {
					return _gfecbf
				}
			}
		case _e.EndElement:
			break _dgffgg
		case _e.CharData:
		}
	}
	return nil
}

// ST_DepthPercent is a union type
type ST_DepthPercent struct {
	ST_DepthPercentWithSymbol *string
	ST_DepthPercentUShort     *uint16
}

func (_abaa *CT_StockChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_gaca := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
	for _, _dgef := range _abaa.Ser {
		e.EncodeElement(_dgef, _gaca)
	}
	if _abaa.DLbls != nil {
		_febb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_abaa.DLbls, _febb)
	}
	if _abaa.DropLines != nil {
		_agbd := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0064\u0072\u006f\u0070\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_abaa.DropLines, _agbd)
	}
	if _abaa.HiLowLines != nil {
		_gacf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068i\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_abaa.HiLowLines, _gacf)
	}
	if _abaa.UpDownBars != nil {
		_eced := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075p\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_abaa.UpDownBars, _eced)
	}
	_bgcdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _abbb := range _abaa.AxId {
		e.EncodeElement(_abbb, _bgcdb)
	}
	if _abaa.ExtLst != nil {
		_efacf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_abaa.ExtLst, _efacf)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_baedg *CT_LogBase) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _baedg.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_ExtensionList struct{ Ext []*CT_Extension }

type ST_PageSetupOrientation byte

func ParseUnionST_SecondPieSize(s string) (ST_SecondPieSize, error) {
	if ST_SecondPieSizePercentPatternRe.MatchString(s) {
		return ST_SecondPieSize{ST_SecondPieSizePercent: &s}, nil
	}
	_cadeg, _aagcd := _bg.ParseUint(s, 10, 16)
	if _aagcd != nil {
		return ST_SecondPieSize{}, _aagcd
	}
	_afcec := uint16(_cadeg)
	return ST_SecondPieSize{ST_SecondPieSizeUShort: &_afcec}, nil
}

// ValidateWithPath validates the CT_CrossBetween and its children, prefixing error messages with path
func (_gab *CT_CrossBetween) ValidateWithPath(path string) error {
	if _gab.ValAttr == ST_CrossBetweenUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _efd := _gab.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _efd != nil {
		return _efd
	}
	return nil
}

type CT_BarDir struct{ ValAttr ST_BarDir }

// Validate validates the CT_TickMark and its children
func (_febbe *CT_TickMark) Validate() error {
	return _febbe.ValidateWithPath("C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b")
}

// ValidateWithPath validates the CT_Thickness and its children, prefixing error messages with path
func (_ddabd *CT_Thickness) ValidateWithPath(path string) error {
	if _cggfg := _ddabd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _cggfg != nil {
		return _cggfg
	}
	return nil
}

func NewCT_SurfaceSer() *CT_SurfaceSer {
	_fadgec := &CT_SurfaceSer{}
	_fadgec.Idx = NewCT_UnsignedInt()
	_fadgec.Order = NewCT_UnsignedInt()
	return _fadgec
}

type CT_PlotAreaChoice struct {
	AreaChart      *CT_AreaChart
	Area3DChart    *CT_Area3DChart
	LineChart      *CT_LineChart
	Line3DChart    *CT_Line3DChart
	StockChart     *CT_StockChart
	RadarChart     *CT_RadarChart
	ScatterChart   *CT_ScatterChart
	PieChart       *CT_PieChart
	Pie3DChart     *CT_Pie3DChart
	DoughnutChart  *CT_DoughnutChart
	BarChart       *CT_BarChart
	Bar3DChart     *CT_Bar3DChart
	OfPieChart     *CT_OfPieChart
	SurfaceChart   *CT_SurfaceChart
	Surface3DChart *CT_Surface3DChart
	BubbleChart    *CT_BubbleChart
}

type CT_ScatterChart struct {
	ScatterStyle *CT_ScatterStyle
	VaryColors   *CT_Boolean
	Ser          []*CT_ScatterSer
	DLbls        *CT_DLbls
	AxId         []*CT_UnsignedInt
	ExtLst       *CT_ExtensionList
}

// ValidateWithPath validates the CT_BarChart and its children, prefixing error messages with path
func (_fecf *CT_BarChart) ValidateWithPath(path string) error {
	if _dgbd := _fecf.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _dgbd != nil {
		return _dgbd
	}
	if _fecf.Grouping != nil {
		if _dabf := _fecf.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _dabf != nil {
			return _dabf
		}
	}
	if _fecf.VaryColors != nil {
		if _edg := _fecf.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _edg != nil {
			return _edg
		}
	}
	for _eeg, _bcae := range _fecf.Ser {
		if _aadg := _bcae.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _eeg)); _aadg != nil {
			return _aadg
		}
	}
	if _fecf.DLbls != nil {
		if _fgg := _fecf.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fgg != nil {
			return _fgg
		}
	}
	if _fecf.GapWidth != nil {
		if _ffd := _fecf.GapWidth.ValidateWithPath(path + "\u002fG\u0061\u0070\u0057\u0069\u0064\u0074h"); _ffd != nil {
			return _ffd
		}
	}
	if _fecf.Overlap != nil {
		if _aff := _fecf.Overlap.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0070"); _aff != nil {
			return _aff
		}
	}
	for _fefa, _ecca := range _fecf.SerLines {
		if _fgdfe := _ecca.ValidateWithPath(_a.Sprintf("\u0025s\u002fS\u0065\u0072\u004c\u0069\u006e\u0065\u0073\u005b\u0025\u0064\u005d", path, _fefa)); _fgdfe != nil {
			return _fgdfe
		}
	}
	for _eccg, _eae := range _fecf.AxId {
		if _edf := _eae.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _eccg)); _edf != nil {
			return _edf
		}
	}
	if _fecf.ExtLst != nil {
		if _dgd := _fecf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _dgd != nil {
			return _dgd
		}
	}
	return nil
}

func NewCT_CrossBetween() *CT_CrossBetween {
	_eefac := &CT_CrossBetween{}
	_eefac.ValAttr = ST_CrossBetween(1)
	return _eefac
}

type CT_PivotSource struct {
	Name   string
	FmtId  *CT_UnsignedInt
	ExtLst []*CT_ExtensionList
}

func (_dcfba *CT_PieSer) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcfba.Idx = NewCT_UnsignedInt()
	_dcfba.Order = NewCT_UnsignedInt()
_cfdaf:
	for {
		_ffafg, _efgg := d.Token()
		if _efgg != nil {
			return _efgg
		}
		switch _adfb := _ffafg.(type) {
		case _e.StartElement:
			switch _adfb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _abfe := d.DecodeElement(_dcfba.Idx, &_adfb); _abfe != nil {
					return _abfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _abfba := d.DecodeElement(_dcfba.Order, &_adfb); _abfba != nil {
					return _abfba
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_dcfba.Tx = NewCT_SerTx()
				if _eeac := d.DecodeElement(_dcfba.Tx, &_adfb); _eeac != nil {
					return _eeac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dcfba.SpPr = _bb.NewCT_ShapeProperties()
				if _ffbcd := d.DecodeElement(_dcfba.SpPr, &_adfb); _ffbcd != nil {
					return _ffbcd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065x\u0070\u006c\u006f\u0073\u0069\u006fn"}:
				_dcfba.Explosion = NewCT_UnsignedInt()
				if _dbadf := d.DecodeElement(_dcfba.Explosion, &_adfb); _dbadf != nil {
					return _dbadf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0050\u0074"}:
				_cdfgd := NewCT_DPt()
				if _geac := d.DecodeElement(_cdfgd, &_adfb); _geac != nil {
					return _geac
				}
				_dcfba.DPt = append(_dcfba.DPt, _cdfgd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dcfba.DLbls = NewCT_DLbls()
				if _ebbf := d.DecodeElement(_dcfba.DLbls, &_adfb); _ebbf != nil {
					return _ebbf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0061\u0074"}:
				_dcfba.Cat = NewCT_AxDataSource()
				if _cdcgc := d.DecodeElement(_dcfba.Cat, &_adfb); _cdcgc != nil {
					return _cdcgc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_dcfba.Val = NewCT_NumDataSource()
				if _cecb := d.DecodeElement(_dcfba.Val, &_adfb); _cecb != nil {
					return _cecb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dcfba.ExtLst = NewCT_ExtensionList()
				if _bgca := d.DecodeElement(_dcfba.ExtLst, &_adfb); _bgca != nil {
					return _bgca
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u0050\u0069\u0065S\u0065\u0072 \u0025\u0076", _adfb.Name)
				if _dgdcf := d.Skip(); _dgdcf != nil {
					return _dgdcf
				}
			}
		case _e.EndElement:
			break _cfdaf
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_DoughnutChart() *CT_DoughnutChart { _fgac := &CT_DoughnutChart{}; return _fgac }

func NewCT_Double() *CT_Double { _eafa := &CT_Double{}; return _eafa }

// ValidateWithPath validates the CT_Tx and its children, prefixing error messages with path
func (_gabbg *CT_Tx) ValidateWithPath(path string) error {
	if _ccag := _gabbg.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ccag != nil {
		return _ccag
	}
	return nil
}

func (_dcff *CT_Crosses) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcff.ValAttr = ST_Crosses(1)
	for _, _deacf := range start.Attr {
		if _deacf.Name.Local == "\u0076\u0061\u006c" {
			_dcff.ValAttr.UnmarshalXMLAttr(_deacf)
			continue
		}
	}
	for {
		_ccec, _fgeg := d.Token()
		if _fgeg != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073\u003a\u0020%\u0073", _fgeg)
		}
		if _beab, _befc := _ccec.(_e.EndElement); _befc && _beab.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ceab *ST_AxPos) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_ceab = 0
	case "\u0062":
		*_ceab = 1
	case "\u006c":
		*_ceab = 2
	case "\u0072":
		*_ceab = 3
	case "\u0074":
		*_ceab = 4
	}
	return nil
}

type CT_DTable struct {
	ShowHorzBorder *CT_Boolean
	ShowVertBorder *CT_Boolean
	ShowOutline    *CT_Boolean
	ShowKeys       *CT_Boolean
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	ExtLst         *CT_ExtensionList
}

func (_cggeag *CT_Lvl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cggeag.Pt != nil {
		_aged := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _aedbf := range _cggeag.Pt {
			e.EncodeElement(_aedbf, _aged)
		}
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fcfe ST_OfPieType) String() string {
	switch _fcfe {
	case 0:
		return ""
	case 1:
		return "\u0070\u0069\u0065"
	case 2:
		return "\u0062\u0061\u0072"
	}
	return ""
}

func (_ceffe *EG_AxSharedChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_gdgced:
	for {
		_fbdgf, _bbgg := d.Token()
		if _bbgg != nil {
			return _bbgg
		}
		switch _fgacf := _fbdgf.(type) {
		case _e.StartElement:
			switch _fgacf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_ceffe.Crosses = NewCT_Crosses()
				if _ecbdd := d.DecodeElement(_ceffe.Crosses, &_fgacf); _ecbdd != nil {
					return _ecbdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_ceffe.CrossesAt = NewCT_Double()
				if _dgfcb := d.DecodeElement(_ceffe.CrossesAt, &_fgacf); _dgfcb != nil {
					return _dgfcb
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076", _fgacf.Name)
				if _eagac := d.Skip(); _eagac != nil {
					return _eagac
				}
			}
		case _e.EndElement:
			break _gdgced
		case _e.CharData:
		}
	}
	return nil
}

func (_gfdb *CT_BubbleScale) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gfdb.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_gfdb.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_bebcgb *ST_BuiltInUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcabg, _bcgdf := d.Token()
	if _bcgdf != nil {
		return _bcgdf
	}
	if _bffeb, _aeeeb := _dcabg.(_e.EndElement); _aeeeb && _bffeb.Name == start.Name {
		*_bebcgb = 1
		return nil
	}
	if _gadab, _ffcaf := _dcabg.(_e.CharData); !_ffcaf {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _dcabg)
	} else {
		switch string(_gadab) {
		case "":
			*_bebcgb = 0
		case "\u0068\u0075\u006e\u0064\u0072\u0065\u0064\u0073":
			*_bebcgb = 1
		case "\u0074h\u006f\u0075\u0073\u0061\u006e\u0064s":
			*_bebcgb = 2
		case "\u0074\u0065\u006eT\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_bebcgb = 3
		case "\u0068\u0075n\u0064\u0072\u0065d\u0054\u0068\u006f\u0075\u0073\u0061\u006e\u0064\u0073":
			*_bebcgb = 4
		case "\u006d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bebcgb = 5
		case "t\u0065\u006e\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bebcgb = 6
		case "\u0068u\u006ed\u0072\u0065\u0064\u004d\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bebcgb = 7
		case "\u0062\u0069\u006c\u006c\u0069\u006f\u006e\u0073":
			*_bebcgb = 8
		case "\u0074r\u0069\u006c\u006c\u0069\u006f\u006es":
			*_bebcgb = 9
		}
	}
	_dcabg, _bcgdf = d.Token()
	if _bcgdf != nil {
		return _bcgdf
	}
	if _fagedb, _dadga := _dcabg.(_e.EndElement); _dadga && _fagedb.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _dcabg)
}

func (_acacc ST_LayoutTarget) String() string {
	switch _acacc {
	case 0:
		return ""
	case 1:
		return "\u0069\u006e\u006ee\u0072"
	case 2:
		return "\u006f\u0075\u0074e\u0072"
	}
	return ""
}

// ValidateWithPath validates the CT_MultiLvlStrRef and its children, prefixing error messages with path
func (_fcbc *CT_MultiLvlStrRef) ValidateWithPath(path string) error {
	if _fcbc.MultiLvlStrCache != nil {
		if _dgag := _fcbc.MultiLvlStrCache.ValidateWithPath(path + "\u002f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072C\u0061\u0063\u0068\u0065"); _dgag != nil {
			return _dgag
		}
	}
	if _fcbc.ExtLst != nil {
		if _egfgg := _fcbc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egfgg != nil {
			return _egfgg
		}
	}
	return nil
}

func (_cacea ST_Orientation) Validate() error { return _cacea.ValidateWithPath("") }

func NewCT_MultiLvlStrData() *CT_MultiLvlStrData { _cdcg := &CT_MultiLvlStrData{}; return _cdcg }

// ST_GapAmount is a union type
type ST_GapAmount struct {
	ST_GapAmountPercent *string
	ST_GapAmountUShort  *uint16
}

type EG_DLblShared struct {
	NumFmt         *CT_NumFmt
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	DLblPos        *CT_DLblPos
	ShowLegendKey  *CT_Boolean
	ShowVal        *CT_Boolean
	ShowCatName    *CT_Boolean
	ShowSerName    *CT_Boolean
	ShowPercent    *CT_Boolean
	ShowBubbleSize *CT_Boolean
	Separator      *string
}

func (_afdg *CT_LblAlgn) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_caac, _bebbe := _afdg.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
	if _bebbe != nil {
		return _bebbe
	}
	start.Attr = append(start.Attr, _caac)
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Legend and its children
func (_dadg *CT_Legend) Validate() error {
	return _dadg.ValidateWithPath("\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed")
}

// ValidateWithPath validates the CT_HPercent and its children, prefixing error messages with path
func (_daaaa *CT_HPercent) ValidateWithPath(path string) error {
	if _daaaa.ValAttr != nil {
		if _afge := _daaaa.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _afge != nil {
			return _afge
		}
	}
	return nil
}

// ValidateWithPath validates the CT_ChartLines and its children, prefixing error messages with path
func (_fadg *CT_ChartLines) ValidateWithPath(path string) error {
	if _fadg.SpPr != nil {
		if _dbcb := _fadg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dbcb != nil {
			return _dbcb
		}
	}
	return nil
}

func (_aeaea ST_AxPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_aeaea.String(), start)
}

func (_fgba ST_SplitType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_ggbdf := _e.Attr{}
	_ggbdf.Name = name
	switch _fgba {
	case ST_SplitTypeUnset:
		_ggbdf.Value = ""
	case ST_SplitTypeAuto:
		_ggbdf.Value = "\u0061\u0075\u0074\u006f"
	case ST_SplitTypeCust:
		_ggbdf.Value = "\u0063\u0075\u0073\u0074"
	case ST_SplitTypePercent:
		_ggbdf.Value = "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case ST_SplitTypePos:
		_ggbdf.Value = "\u0070\u006f\u0073"
	case ST_SplitTypeVal:
		_ggbdf.Value = "\u0076\u0061\u006c"
	}
	return _ggbdf, nil
}

func NewCT_LineSer() *CT_LineSer {
	_begbc := &CT_LineSer{}
	_begbc.Idx = NewCT_UnsignedInt()
	_begbc.Order = NewCT_UnsignedInt()
	return _begbc
}

func NewCT_LayoutTarget() *CT_LayoutTarget { _ggdf := &CT_LayoutTarget{}; return _ggdf }

const (
	ST_CrossesUnset    ST_Crosses = 0
	ST_CrossesAutoZero ST_Crosses = 1
	ST_CrossesMax      ST_Crosses = 2
	ST_CrossesMin      ST_Crosses = 3
)

func NewCT_NumRef() *CT_NumRef { _gfcbf := &CT_NumRef{}; return _gfcbf }

const (
	ST_TrendlineTypeUnset     ST_TrendlineType = 0
	ST_TrendlineTypeExp       ST_TrendlineType = 1
	ST_TrendlineTypeLinear    ST_TrendlineType = 2
	ST_TrendlineTypeLog       ST_TrendlineType = 3
	ST_TrendlineTypeMovingAvg ST_TrendlineType = 4
	ST_TrendlineTypePoly      ST_TrendlineType = 5
	ST_TrendlineTypePower     ST_TrendlineType = 6
)

func (_gdagd *CT_LayoutTarget) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gdagd.ValAttr != ST_LayoutTargetUnset {
		_cgfac, _gbfdgg := _gdagd.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _gbfdgg != nil {
			return _gbfdgg
		}
		start.Attr = append(start.Attr, _cgfac)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_facbg ST_BuiltInUnit) Validate() error { return _facbg.ValidateWithPath("") }

// ValidateWithPath validates the CT_Title and its children, prefixing error messages with path
func (_gffbbg *CT_Title) ValidateWithPath(path string) error {
	if _gffbbg.Tx != nil {
		if _bede := _gffbbg.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bede != nil {
			return _bede
		}
	}
	if _gffbbg.Layout != nil {
		if _aeced := _gffbbg.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _aeced != nil {
			return _aeced
		}
	}
	if _gffbbg.Overlay != nil {
		if _degeg := _gffbbg.Overlay.ValidateWithPath(path + "\u002f\u004f\u0076\u0065\u0072\u006c\u0061\u0079"); _degeg != nil {
			return _degeg
		}
	}
	if _gffbbg.SpPr != nil {
		if _gaddf := _gffbbg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gaddf != nil {
			return _gaddf
		}
	}
	if _gffbbg.TxPr != nil {
		if _decf := _gffbbg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _decf != nil {
			return _decf
		}
	}
	if _gffbbg.ExtLst != nil {
		if _abaed := _gffbbg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _abaed != nil {
			return _abaed
		}
	}
	return nil
}

func (_abafbb ST_SplitType) Validate() error { return _abafbb.ValidateWithPath("") }

const (
	ST_BuiltInUnitUnset            ST_BuiltInUnit = 0
	ST_BuiltInUnitHundreds         ST_BuiltInUnit = 1
	ST_BuiltInUnitThousands        ST_BuiltInUnit = 2
	ST_BuiltInUnitTenThousands     ST_BuiltInUnit = 3
	ST_BuiltInUnitHundredThousands ST_BuiltInUnit = 4
	ST_BuiltInUnitMillions         ST_BuiltInUnit = 5
	ST_BuiltInUnitTenMillions      ST_BuiltInUnit = 6
	ST_BuiltInUnitHundredMillions  ST_BuiltInUnit = 7
	ST_BuiltInUnitBillions         ST_BuiltInUnit = 8
	ST_BuiltInUnitTrillions        ST_BuiltInUnit = 9
)

func (_ecdg *CT_CrossBetween) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ecdg.ValAttr = ST_CrossBetween(1)
	for _, _gfgd := range start.Attr {
		if _gfgd.Name.Local == "\u0076\u0061\u006c" {
			_ecdg.ValAttr.UnmarshalXMLAttr(_gfgd)
			continue
		}
	}
	for {
		_aecff, _aea := d.Token()
		if _aea != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0042e\u0074\u0077\u0065e\u006e:\u0020\u0025\u0073", _aea)
		}
		if _dbba, _cebc := _aecff.(_e.EndElement); _cebc && _dbba.Name == start.Name {
			break
		}
	}
	return nil
}

func (_ecbgc *EG_LegendEntryData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ecbgc.TxPr != nil {
		_bbgage := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_ecbgc.TxPr, _bbgage)
	}
	return nil
}

// ValidateWithPath validates the CT_LegendEntry and its children, prefixing error messages with path
func (_dgdg *CT_LegendEntry) ValidateWithPath(path string) error {
	if _bbda := _dgdg.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _bbda != nil {
		return _bbda
	}
	if _dgdg.Choice != nil {
		if _ecgb := _dgdg.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _ecgb != nil {
			return _ecgb
		}
	}
	if _dgdg.ExtLst != nil {
		if _gdegf := _dgdg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gdegf != nil {
			return _gdegf
		}
	}
	return nil
}

type CT_Double struct{ ValAttr float64 }

func (_gfgdc *ST_DepthPercent) ValidateWithPath(path string) error {
	_ccgcb := []string{}
	if _gfgdc.ST_DepthPercentWithSymbol != nil {
		_ccgcb = append(_ccgcb, "\u0053T\u005f\u0044\u0065\u0070t\u0068\u0050\u0065\u0072\u0063e\u006et\u0057i\u0074\u0068\u0053\u0079\u006d\u0062\u006fl")
	}
	if _gfgdc.ST_DepthPercentUShort != nil {
		_ccgcb = append(_ccgcb, "S\u0054\u005f\u0044\u0065pt\u0068P\u0065\u0072\u0063\u0065\u006et\u0055\u0053\u0068\u006f\u0072\u0074")
	}
	if len(_ccgcb) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _ccgcb)
	}
	return nil
}

func (_efgdb ST_ScatterStyle) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_efgdb.String(), start)
}

func NewEG_DLblShared() *EG_DLblShared { _aceb := &EG_DLblShared{}; return _aceb }

// Validate validates the CT_Style and its children
func (_cafd *CT_Style) Validate() error {
	return _cafd.ValidateWithPath("\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065")
}

func (_fbgd *CT_Extension) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dgfg := range start.Attr {
		if _dgfg.Name.Local == "\u0075\u0072\u0069" {
			_bffg, _bcgg := _dgfg.Value, error(nil)
			if _bcgg != nil {
				return _bcgg
			}
			_fbgd.UriAttr = &_bffg
			continue
		}
	}
_ggb:
	for {
		_dfbdc, _efbd := d.Token()
		if _efbd != nil {
			return _efbd
		}
		switch _fegb := _dfbdc.(type) {
		case _e.StartElement:
			switch _fegb.Name {
			default:
				if _eead, _bccbe := _g.CreateElement(_fegb); _bccbe != nil {
					return _bccbe
				} else {
					if _dgec := d.DecodeElement(_eead, &_fegb); _dgec != nil {
						return _dgec
					}
					_fbgd.Any = _eead
				}
			}
		case _e.EndElement:
			break _ggb
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_Legend() *CT_Legend { _ccded := &CT_Legend{}; return _ccded }

func (_bcafb ST_DLblPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_gdeacg := _e.Attr{}
	_gdeacg.Name = name
	switch _bcafb {
	case ST_DLblPosUnset:
		_gdeacg.Value = ""
	case ST_DLblPosBestFit:
		_gdeacg.Value = "\u0062e\u0073\u0074\u0046\u0069\u0074"
	case ST_DLblPosB:
		_gdeacg.Value = "\u0062"
	case ST_DLblPosCtr:
		_gdeacg.Value = "\u0063\u0074\u0072"
	case ST_DLblPosInBase:
		_gdeacg.Value = "\u0069\u006e\u0042\u0061\u0073\u0065"
	case ST_DLblPosInEnd:
		_gdeacg.Value = "\u0069\u006e\u0045n\u0064"
	case ST_DLblPosL:
		_gdeacg.Value = "\u006c"
	case ST_DLblPosOutEnd:
		_gdeacg.Value = "\u006f\u0075\u0074\u0045\u006e\u0064"
	case ST_DLblPosR:
		_gdeacg.Value = "\u0072"
	case ST_DLblPosT:
		_gdeacg.Value = "\u0074"
	}
	return _gdeacg, nil
}

func NewCT_AxDataSourceChoice() *CT_AxDataSourceChoice {
	_bbbf := &CT_AxDataSourceChoice{}
	return _bbbf
}

func (_eagaa ST_LblAlgn) ValidateWithPath(path string) error {
	switch _eagaa {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_eagaa))
	}
	return nil
}

// Validate validates the CT_RotY and its children
func (_caag *CT_RotY) Validate() error {
	return _caag.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0059")
}

// ValidateWithPath validates the EG_BarChartShared and its children, prefixing error messages with path
func (_fbdd *EG_BarChartShared) ValidateWithPath(path string) error {
	if _cabdf := _fbdd.BarDir.ValidateWithPath(path + "\u002fB\u0061\u0072\u0044\u0069\u0072"); _cabdf != nil {
		return _cabdf
	}
	if _fbdd.Grouping != nil {
		if _ggfcc := _fbdd.Grouping.ValidateWithPath(path + "\u002fG\u0072\u006f\u0075\u0070\u0069\u006eg"); _ggfcc != nil {
			return _ggfcc
		}
	}
	if _fbdd.VaryColors != nil {
		if _gcfe := _fbdd.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _gcfe != nil {
			return _gcfe
		}
	}
	for _dcgeg, _beefae := range _fbdd.Ser {
		if _abggc := _beefae.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _dcgeg)); _abggc != nil {
			return _abggc
		}
	}
	if _fbdd.DLbls != nil {
		if _cffcd := _fbdd.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _cffcd != nil {
			return _cffcd
		}
	}
	return nil
}

func (_acef *CT_RadarChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acef.RadarStyle = NewCT_RadarStyle()
_bggab:
	for {
		_dgbea, _gcbeg := d.Token()
		if _gcbeg != nil {
			return _gcbeg
		}
		switch _fcaa := _dgbea.(type) {
		case _e.StartElement:
			switch _fcaa.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0072\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}:
				if _ccgac := d.DecodeElement(_acef.RadarStyle, &_fcaa); _ccgac != nil {
					return _ccgac
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_acef.VaryColors = NewCT_Boolean()
				if _ggbc := d.DecodeElement(_acef.VaryColors, &_fcaa); _ggbc != nil {
					return _ggbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_fbbd := NewCT_RadarSer()
				if _efffb := d.DecodeElement(_fbbd, &_fcaa); _efffb != nil {
					return _efffb
				}
				_acef.Ser = append(_acef.Ser, _fbbd)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_acef.DLbls = NewCT_DLbls()
				if _dadad := d.DecodeElement(_acef.DLbls, &_fcaa); _dadad != nil {
					return _dadad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_fgaab := NewCT_UnsignedInt()
				if _dcaad := d.DecodeElement(_fgaab, &_fcaa); _dcaad != nil {
					return _dcaad
				}
				_acef.AxId = append(_acef.AxId, _fgaab)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_acef.ExtLst = NewCT_ExtensionList()
				if _cagdb := d.DecodeElement(_acef.ExtLst, &_fcaa); _cagdb != nil {
					return _cagdb
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0052a\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074 \u0025\u0076", _fcaa.Name)
				if _fcagc := d.Skip(); _fcagc != nil {
					return _fcagc
				}
			}
		case _e.EndElement:
			break _bggab
		case _e.CharData:
		}
	}
	return nil
}

const ST_HoleSizePercentPattern = "\u0030\u002a\u0028\u005b\u0031\u002d\u0039\u005d\u007c\u0028\u005b1\u002d\u0038\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c9\u0030\u0029\u0025"

type CT_PieSer struct {
	Idx       *CT_UnsignedInt
	Order     *CT_UnsignedInt
	Tx        *CT_SerTx
	SpPr      *_bb.CT_ShapeProperties
	Explosion *CT_UnsignedInt
	DPt       []*CT_DPt
	DLbls     *CT_DLbls
	Cat       *CT_AxDataSource
	Val       *CT_NumDataSource
	ExtLst    *CT_ExtensionList
}

func (_faefe *CT_SizeRepresents) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _faefe.ValAttr != ST_SizeRepresentsUnset {
		_ggfeeb, _ffeeb := _faefe.ValAttr.MarshalXMLAttr(_e.Name{Local: "\u0076\u0061\u006c"})
		if _ffeeb != nil {
			return _ffeeb
		}
		start.Attr = append(start.Attr, _ggfeeb)
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eefg *CT_NumRef) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_ffbbe:
	for {
		_cfefg, _bcaf := d.Token()
		if _bcaf != nil {
			return _bcaf
		}
		switch _dbbfg := _cfefg.(type) {
		case _e.StartElement:
			switch _dbbfg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0066"}:
				if _ggcdb := d.DecodeElement(&_eefg.F, &_dbbfg); _ggcdb != nil {
					return _ggcdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0043\u0061\u0063\u0068\u0065"}:
				_eefg.NumCache = NewCT_NumData()
				if _ddbe := d.DecodeElement(_eefg.NumCache, &_dbbfg); _ddbe != nil {
					return _ddbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_eefg.ExtLst = NewCT_ExtensionList()
				if _bage := d.DecodeElement(_eefg.ExtLst, &_dbbfg); _bage != nil {
					return _bage
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067\u0020u\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006cem\u0065\u006e\u0074 \u006f\u006e \u0043\u0054\u005f\u004e\u0075\u006dR\u0065\u0066 \u0025\u0076", _dbbfg.Name)
				if _beffd := d.Skip(); _beffd != nil {
					return _beffd
				}
			}
		case _e.EndElement:
			break _ffbbe
		case _e.CharData:
		}
	}
	return nil
}

func (_egagc ST_SecondPieSize) String() string {
	if _egagc.ST_SecondPieSizePercent != nil {
		return _a.Sprintf("\u0025\u0076", *_egagc.ST_SecondPieSizePercent)
	}
	if _egagc.ST_SecondPieSizeUShort != nil {
		return _a.Sprintf("\u0025\u0076", *_egagc.ST_SecondPieSizeUShort)
	}
	return ""
}

func (_abaea ST_RadarStyle) ValidateWithPath(path string) error {
	switch _abaea {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_abaea))
	}
	return nil
}

func NewEG_LegendEntryData() *EG_LegendEntryData { _dcgff := &EG_LegendEntryData{}; return _dcgff }

type CT_PivotFmt struct {
	Idx    *CT_UnsignedInt
	SpPr   *_bb.CT_ShapeProperties
	TxPr   *_bb.CT_TextBody
	Marker *CT_Marker
	DLbl   *CT_DLbl
	ExtLst *CT_ExtensionList
}

// Validate validates the CT_DepthPercent and its children
func (_efde *CT_DepthPercent) Validate() error {
	return _efde.ValidateWithPath("\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
}

// ValidateWithPath validates the CT_ChartSpace and its children, prefixing error messages with path
func (_geg *CT_ChartSpace) ValidateWithPath(path string) error {
	if _geg.Date1904 != nil {
		if _dgda := _geg.Date1904.ValidateWithPath(path + "\u002fD\u0061\u0074\u0065\u0031\u0039\u00304"); _dgda != nil {
			return _dgda
		}
	}
	if _geg.Lang != nil {
		if _affg := _geg.Lang.ValidateWithPath(path + "\u002f\u004c\u0061n\u0067"); _affg != nil {
			return _affg
		}
	}
	if _geg.RoundedCorners != nil {
		if _gbbc := _geg.RoundedCorners.ValidateWithPath(path + "\u002fR\u006fu\u006e\u0064\u0065\u0064\u0043\u006f\u0072\u006e\u0065\u0072\u0073"); _gbbc != nil {
			return _gbbc
		}
	}
	if _geg.Style != nil {
		if _bddcd := _geg.Style.ValidateWithPath(path + "\u002f\u0053\u0074\u0079\u006c\u0065"); _bddcd != nil {
			return _bddcd
		}
	}
	if _geg.ClrMapOvr != nil {
		if _bdcd := _geg.ClrMapOvr.ValidateWithPath(path + "\u002f\u0043\u006c\u0072\u004d\u0061\u0070\u004f\u0076\u0072"); _bdcd != nil {
			return _bdcd
		}
	}
	if _geg.PivotSource != nil {
		if _gbfd := _geg.PivotSource.ValidateWithPath(path + "\u002f\u0050\u0069v\u006f\u0074\u0053\u006f\u0075\u0072\u0063\u0065"); _gbfd != nil {
			return _gbfd
		}
	}
	if _geg.Protection != nil {
		if _fag := _geg.Protection.ValidateWithPath(path + "/\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e"); _fag != nil {
			return _fag
		}
	}
	if _gafe := _geg.Chart.ValidateWithPath(path + "\u002f\u0043\u0068\u0061\u0072\u0074"); _gafe != nil {
		return _gafe
	}
	if _geg.SpPr != nil {
		if _ecg := _geg.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ecg != nil {
			return _ecg
		}
	}
	if _geg.TxPr != nil {
		if _fegd := _geg.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _fegd != nil {
			return _fegd
		}
	}
	if _geg.ExternalData != nil {
		if _ead := _geg.ExternalData.ValidateWithPath(path + "\u002f\u0045\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061"); _ead != nil {
			return _ead
		}
	}
	if _geg.PrintSettings != nil {
		if _dgee := _geg.PrintSettings.ValidateWithPath(path + "\u002f\u0050\u0072\u0069\u006e\u0074\u0053\u0065\u0074t\u0069\u006e\u0067\u0073"); _dgee != nil {
			return _dgee
		}
	}
	if _geg.UserShapes != nil {
		if _aed := _geg.UserShapes.ValidateWithPath(path + "/\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"); _aed != nil {
			return _aed
		}
	}
	if _geg.ExtLst != nil {
		if _facbf := _geg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _facbf != nil {
			return _facbf
		}
	}
	return nil
}

type ST_ErrDir byte

func (_cddfb ST_TickLblPos) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cddfb.String(), start)
}

func ParseUnionST_HPercent(s string) (ST_HPercent, error) {
	if ST_HPercentWithSymbolPatternRe.MatchString(s) {
		return ST_HPercent{ST_HPercentWithSymbol: &s}, nil
	}
	_aafaa, _bbdbc := _bg.ParseUint(s, 10, 16)
	if _bbdbc != nil {
		return ST_HPercent{}, _bbdbc
	}
	_febad := uint16(_aafaa)
	return ST_HPercent{ST_HPercentUShort: &_febad}, nil
}

func (_fecdc *ST_ErrBarType) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_geecc, _feefgg := d.Token()
	if _feefgg != nil {
		return _feefgg
	}
	if _agcag, _cfegc := _geecc.(_e.EndElement); _cfegc && _agcag.Name == start.Name {
		*_fecdc = 1
		return nil
	}
	if _gaddc, _bcgfa := _geecc.(_e.CharData); !_bcgfa {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _geecc)
	} else {
		switch string(_gaddc) {
		case "":
			*_fecdc = 0
		case "\u0062\u006f\u0074\u0068":
			*_fecdc = 1
		case "\u006d\u0069\u006eu\u0073":
			*_fecdc = 2
		case "\u0070\u006c\u0075\u0073":
			*_fecdc = 3
		}
	}
	_geecc, _feefgg = d.Token()
	if _feefgg != nil {
		return _feefgg
	}
	if _cbbgf, _feeec := _geecc.(_e.EndElement); _feeec && _cbbgf.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _geecc)
}

func (_geeb ST_OfPieType) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_daggbc := _e.Attr{}
	_daggbc.Name = name
	switch _geeb {
	case ST_OfPieTypeUnset:
		_daggbc.Value = ""
	case ST_OfPieTypePie:
		_daggbc.Value = "\u0070\u0069\u0065"
	case ST_OfPieTypeBar:
		_daggbc.Value = "\u0062\u0061\u0072"
	}
	return _daggbc, nil
}

func (_abebc *UserShapes) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_abebc.CT_Drawing = *_eb.NewCT_Drawing()
	for {
		_aggba, _bade := d.Token()
		if _bade != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0055\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073\u003a\u0020%\u0073", _bade)
		}
		if _gfbe, _defdd := _aggba.(_e.EndElement); _defdd && _gfbe.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_LayoutTarget byte

func (_cabf *CT_BarChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_faad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_cabf.BarDir, _faad)
	if _cabf.Grouping != nil {
		_aab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_cabf.Grouping, _aab)
	}
	if _cabf.VaryColors != nil {
		_abfcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cabf.VaryColors, _abfcd)
	}
	if _cabf.Ser != nil {
		_gbed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _cdc := range _cabf.Ser {
			e.EncodeElement(_cdc, _gbed)
		}
	}
	if _cabf.DLbls != nil {
		_adc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cabf.DLbls, _adc)
	}
	if _cabf.GapWidth != nil {
		_bdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_cabf.GapWidth, _bdd)
	}
	if _cabf.Overlap != nil {
		_bebg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0076\u0065\u0072\u006c\u0061p"}}
		e.EncodeElement(_cabf.Overlap, _bebg)
	}
	if _cabf.SerLines != nil {
		_ega := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0065\u0072\u004c\u0069\u006e\u0065\u0073"}}
		for _, _eed := range _cabf.SerLines {
			e.EncodeElement(_eed, _ega)
		}
	}
	_ebg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _gbg := range _cabf.AxId {
		e.EncodeElement(_gbg, _ebg)
	}
	if _cabf.ExtLst != nil {
		_cagc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cabf.ExtLst, _cagc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_CustSplit struct{ SecondPiePt []*CT_UnsignedInt }

type ST_CrossBetween byte

type ST_ErrValType byte

type ST_DLblPos byte

func (_dfede *CT_StrVal) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0069\u0064\u0078"}, Value: _a.Sprintf("\u0025\u0076", _dfede.IdxAttr)})
	e.EncodeToken(start)
	_ceceb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
	_g.AddPreserveSpaceAttr(&_ceceb, _dfede.V)
	e.EncodeElement(_dfede.V, _ceceb)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the EG_AxShared and its children, prefixing error messages with path
func (_aacfaa *EG_AxShared) ValidateWithPath(path string) error {
	if _ggcff := _aacfaa.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _ggcff != nil {
		return _ggcff
	}
	if _fdfaf := _aacfaa.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _fdfaf != nil {
		return _fdfaf
	}
	if _aacfaa.Delete != nil {
		if _fafb := _aacfaa.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _fafb != nil {
			return _fafb
		}
	}
	if _dcaba := _aacfaa.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _dcaba != nil {
		return _dcaba
	}
	if _aacfaa.MajorGridlines != nil {
		if _fcfbd := _aacfaa.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fcfbd != nil {
			return _fcfbd
		}
	}
	if _aacfaa.MinorGridlines != nil {
		if _fgag := _aacfaa.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _fgag != nil {
			return _fgag
		}
	}
	if _aacfaa.Title != nil {
		if _dagcc := _aacfaa.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _dagcc != nil {
			return _dagcc
		}
	}
	if _aacfaa.NumFmt != nil {
		if _beeccc := _aacfaa.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _beeccc != nil {
			return _beeccc
		}
	}
	if _aacfaa.MajorTickMark != nil {
		if _bgfc := _aacfaa.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bgfc != nil {
			return _bgfc
		}
	}
	if _aacfaa.MinorTickMark != nil {
		if _bffb := _aacfaa.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _bffb != nil {
			return _bffb
		}
	}
	if _aacfaa.TickLblPos != nil {
		if _abged := _aacfaa.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _abged != nil {
			return _abged
		}
	}
	if _aacfaa.SpPr != nil {
		if _cfbbb := _aacfaa.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cfbbb != nil {
			return _cfbbb
		}
	}
	if _aacfaa.TxPr != nil {
		if _ddbd := _aacfaa.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _ddbd != nil {
			return _ddbd
		}
	}
	if _fbabc := _aacfaa.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _fbabc != nil {
		return _fbabc
	}
	if _aacfaa.Choice != nil {
		if _dgbac := _aacfaa.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _dgbac != nil {
			return _dgbac
		}
	}
	return nil
}

func (_eeeda *CT_ManualLayout) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _eeeda.LayoutTarget != nil {
		_bdgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074\u0054a\u0072\u0067\u0065\u0074"}}
		e.EncodeElement(_eeeda.LayoutTarget, _bdgc)
	}
	if _eeeda.XMode != nil {
		_gagb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0078\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeeda.XMode, _gagb)
	}
	if _eeeda.YMode != nil {
		_cgbe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0079\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeeda.YMode, _cgbe)
	}
	if _eeeda.WMode != nil {
		_acaab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0077\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeeda.WMode, _acaab)
	}
	if _eeeda.HMode != nil {
		_gbba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0068\u004d\u006f\u0064\u0065"}}
		e.EncodeElement(_eeeda.HMode, _gbba)
	}
	if _eeeda.X != nil {
		_edgf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0078"}}
		e.EncodeElement(_eeeda.X, _edgf)
	}
	if _eeeda.Y != nil {
		_bfbdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0079"}}
		e.EncodeElement(_eeeda.Y, _bfbdd)
	}
	if _eeeda.W != nil {
		_cabd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0077"}}
		e.EncodeElement(_eeeda.W, _cabd)
	}
	if _eeeda.H != nil {
		_aeff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068"}}
		e.EncodeElement(_eeeda.H, _aeff)
	}
	if _eeeda.ExtLst != nil {
		_bdfcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eeeda.ExtLst, _bdfcb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_SurfaceChart and its children, prefixing error messages with path
func (_cabccf *CT_SurfaceChart) ValidateWithPath(path string) error {
	if _cabccf.Wireframe != nil {
		if _adefa := _cabccf.Wireframe.ValidateWithPath(path + "\u002f\u0057\u0069\u0072\u0065\u0066\u0072\u0061\u006d\u0065"); _adefa != nil {
			return _adefa
		}
	}
	for _fcgbf, _fbgb := range _cabccf.Ser {
		if _cedeg := _fbgb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _fcgbf)); _cedeg != nil {
			return _cedeg
		}
	}
	if _cabccf.BandFmts != nil {
		if _eabgc := _cabccf.BandFmts.ValidateWithPath(path + "\u002fB\u0061\u006e\u0064\u0046\u006d\u0074s"); _eabgc != nil {
			return _eabgc
		}
	}
	for _gbdfdf, _gfdge := range _cabccf.AxId {
		if _adegf := _gfdge.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _gbdfdf)); _adegf != nil {
			return _adegf
		}
	}
	if _cabccf.ExtLst != nil {
		if _cfgad := _cabccf.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _cfgad != nil {
			return _cfgad
		}
	}
	return nil
}

func (_eefec *CT_RotX) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _ccdfc := range start.Attr {
		if _ccdfc.Name.Local == "\u0076\u0061\u006c" {
			_cacc, _gceba := _bg.ParseInt(_ccdfc.Value, 10, 8)
			if _gceba != nil {
				return _gceba
			}
			_aeffgg := int8(_cacc)
			_eefec.ValAttr = &_aeffgg
			continue
		}
	}
	for {
		_acffc, _gbbaf := d.Token()
		if _gbbaf != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u0052\u006f\u0074\u0058\u003a\u0020\u0025\u0073", _gbbaf)
		}
		if _dacfb, _ceec := _acffc.(_e.EndElement); _ceec && _dacfb.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cdafb *UserShapes) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078\u006d\u006cn\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0061"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0063"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0072"}, Value: "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0073"}, Value: "\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"}, Value: "\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"})
	start.Name.Local = "\u0063\u003a\u0075s\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073"
	return _cdafb.CT_Drawing.MarshalXML(e, start)
}

// Validate validates the CT_LblAlgn and its children
func (_abbed *CT_LblAlgn) Validate() error {
	return _abbed.ValidateWithPath("\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e")
}

func (_ffed *CT_GapAmount) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _dbdd := range start.Attr {
		if _dbdd.Name.Local == "\u0076\u0061\u006c" {
			_acc, _accc := ParseUnionST_GapAmount(_dbdd.Value)
			if _accc != nil {
				return _accc
			}
			_ffed.ValAttr = &_acc
			continue
		}
	}
	for {
		_fgce, _bfga := d.Token()
		if _bfga != nil {
			return _a.Errorf("\u0070a\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0047\u0061p\u0041\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0073", _bfga)
		}
		if _gdeac, _gdcgd := _fgce.(_e.EndElement); _gdcgd && _gdeac.Name == start.Name {
			break
		}
	}
	return nil
}

type ST_AxPos byte

// Validate validates the CT_Surface3DChart and its children
func (_baea *CT_Surface3DChart) Validate() error {
	return _baea.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074")
}

func (_ffedd ST_Overlap) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _ffedd.ST_OverlapPercent != nil {
		e.EncodeToken(_e.CharData(*_ffedd.ST_OverlapPercent))
	}
	if _ffedd.ST_OverlapByte != nil {
		e.EncodeToken(_e.CharData(_a.Sprintf("\u0025\u0064", *_ffedd.ST_OverlapByte)))
	}
	return e.EncodeToken(_e.EndElement{Name: start.Name})
}

func (_gdfae *CT_SerTxChoice) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dfde:
	for {
		_gfgcb, _gecde := d.Token()
		if _gecde != nil {
			return _gecde
		}
		switch _feed := _gfgcb.(type) {
		case _e.StartElement:
			switch _feed.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0074\u0072\u0052\u0065\u0066"}:
				_gdfae.StrRef = NewCT_StrRef()
				if _deaea := d.DecodeElement(_gdfae.StrRef, &_feed); _deaea != nil {
					return _deaea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076"}:
				_gdfae.V = new(string)
				if _ceda := d.DecodeElement(_gdfae.V, &_feed); _ceda != nil {
					return _ceda
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078\u0043\u0068o\u0069c\u0065\u0020\u0025\u0076", _feed.Name)
				if _abbg := d.Skip(); _abbg != nil {
					return _abbg
				}
			}
		case _e.EndElement:
			break _dfde
		case _e.CharData:
		}
	}
	return nil
}

type CT_AxPos struct{ ValAttr ST_AxPos }

func NewCT_ErrDir() *CT_ErrDir { _gfdg := &CT_ErrDir{}; _gfdg.ValAttr = ST_ErrDir(1); return _gfdg }

func NewCT_Scaling() *CT_Scaling { _ggdgc := &CT_Scaling{}; return _ggdgc }

func NewCT_PageSetup() *CT_PageSetup { _gfagb := &CT_PageSetup{}; return _gfagb }

func (_cfdbg ST_LblOffset) String() string {
	if _cfdbg.ST_LblOffsetPercent != nil {
		return _a.Sprintf("\u0025\u0076", *_cfdbg.ST_LblOffsetPercent)
	}
	if _cfdbg.ST_LblOffsetUShort != nil {
		return _a.Sprintf("\u0025\u0076", *_cfdbg.ST_LblOffsetUShort)
	}
	return ""
}

// ValidateWithPath validates the CT_ValAx and its children, prefixing error messages with path
func (_bggbe *CT_ValAx) ValidateWithPath(path string) error {
	if _feffe := _bggbe.AxId.ValidateWithPath(path + "\u002f\u0041\u0078I\u0064"); _feffe != nil {
		return _feffe
	}
	if _eeecg := _bggbe.Scaling.ValidateWithPath(path + "\u002f\u0053\u0063\u0061\u006c\u0069\u006e\u0067"); _eeecg != nil {
		return _eeecg
	}
	if _bggbe.Delete != nil {
		if _cgfcc := _bggbe.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _cgfcc != nil {
			return _cgfcc
		}
	}
	if _cdgb := _bggbe.AxPos.ValidateWithPath(path + "\u002f\u0041\u0078\u0050\u006f\u0073"); _cdgb != nil {
		return _cdgb
	}
	if _bggbe.MajorGridlines != nil {
		if _dbeef := _bggbe.MajorGridlines.ValidateWithPath(path + "\u002fM\u0061j\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _dbeef != nil {
			return _dbeef
		}
	}
	if _bggbe.MinorGridlines != nil {
		if _ccgg := _bggbe.MinorGridlines.ValidateWithPath(path + "\u002fM\u0069n\u006f\u0072\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"); _ccgg != nil {
			return _ccgg
		}
	}
	if _bggbe.Title != nil {
		if _eafggf := _bggbe.Title.ValidateWithPath(path + "\u002f\u0054\u0069\u0074\u006c\u0065"); _eafggf != nil {
			return _eafggf
		}
	}
	if _bggbe.NumFmt != nil {
		if _cafc := _bggbe.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _cafc != nil {
			return _cafc
		}
	}
	if _bggbe.MajorTickMark != nil {
		if _ffbfa := _bggbe.MajorTickMark.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _ffbfa != nil {
			return _ffbfa
		}
	}
	if _bggbe.MinorTickMark != nil {
		if _baeea := _bggbe.MinorTickMark.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0054\u0069\u0063k\u004d\u0061\u0072\u006b"); _baeea != nil {
			return _baeea
		}
	}
	if _bggbe.TickLblPos != nil {
		if _ccgfg := _bggbe.TickLblPos.ValidateWithPath(path + "/\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"); _ccgfg != nil {
			return _ccgfg
		}
	}
	if _bggbe.SpPr != nil {
		if _dagc := _bggbe.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _dagc != nil {
			return _dagc
		}
	}
	if _bggbe.TxPr != nil {
		if _bfag := _bggbe.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bfag != nil {
			return _bfag
		}
	}
	if _cbbc := _bggbe.CrossAx.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0041\u0078"); _cbbc != nil {
		return _cbbc
	}
	if _bggbe.Choice != nil {
		if _gbfbc := _bggbe.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gbfbc != nil {
			return _gbfbc
		}
	}
	if _bggbe.CrossBetween != nil {
		if _egdea := _bggbe.CrossBetween.ValidateWithPath(path + "\u002f\u0043\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"); _egdea != nil {
			return _egdea
		}
	}
	if _bggbe.MajorUnit != nil {
		if _fcabf := _bggbe.MajorUnit.ValidateWithPath(path + "\u002f\u004d\u0061\u006a\u006f\u0072\u0055\u006e\u0069\u0074"); _fcabf != nil {
			return _fcabf
		}
	}
	if _bggbe.MinorUnit != nil {
		if _bgcf := _bggbe.MinorUnit.ValidateWithPath(path + "\u002f\u004d\u0069\u006e\u006f\u0072\u0055\u006e\u0069\u0074"); _bgcf != nil {
			return _bgcf
		}
	}
	if _bggbe.DispUnits != nil {
		if _edcg := _bggbe.DispUnits.ValidateWithPath(path + "\u002f\u0044\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073"); _edcg != nil {
			return _edcg
		}
	}
	if _bggbe.ExtLst != nil {
		if _fcecb := _bggbe.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _fcecb != nil {
			return _fcecb
		}
	}
	return nil
}

// Validate validates the CT_LegendPos and its children
func (_ebaea *CT_LegendPos) Validate() error {
	return _ebaea.ValidateWithPath("\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073")
}

// Validate validates the CT_NumData and its children
func (_ggee *CT_NumData) Validate() error {
	return _ggee.ValidateWithPath("\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061")
}

// Validate validates the CT_SecondPieSize and its children
func (_adada *CT_SecondPieSize) Validate() error {
	return _adada.ValidateWithPath("\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065")
}

// Validate validates the CT_ExternalData and its children
func (_daca *CT_ExternalData) Validate() error {
	return _daca.ValidateWithPath("\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061")
}

// ValidateWithPath validates the CT_DLblsChoice and its children, prefixing error messages with path
func (_degc *CT_DLblsChoice) ValidateWithPath(path string) error {
	if _degc.Delete != nil {
		if _cabc := _degc.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _cabc != nil {
			return _cabc
		}
	}
	if _degc.NumFmt != nil {
		if _aegf := _degc.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _aegf != nil {
			return _aegf
		}
	}
	if _degc.SpPr != nil {
		if _babf := _degc.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _babf != nil {
			return _babf
		}
	}
	if _degc.TxPr != nil {
		if _cgcf := _degc.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _cgcf != nil {
			return _cgcf
		}
	}
	if _degc.DLblPos != nil {
		if _gbgcf := _degc.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _gbgcf != nil {
			return _gbgcf
		}
	}
	if _degc.ShowLegendKey != nil {
		if _gade := _degc.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _gade != nil {
			return _gade
		}
	}
	if _degc.ShowVal != nil {
		if _fabd := _degc.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _fabd != nil {
			return _fabd
		}
	}
	if _degc.ShowCatName != nil {
		if _dfbc := _degc.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _dfbc != nil {
			return _dfbc
		}
	}
	if _degc.ShowSerName != nil {
		if _bdfg := _degc.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _bdfg != nil {
			return _bdfg
		}
	}
	if _degc.ShowPercent != nil {
		if _gefc := _degc.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _gefc != nil {
			return _gefc
		}
	}
	if _degc.ShowBubbleSize != nil {
		if _agdc := _degc.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _agdc != nil {
			return _agdc
		}
	}
	if _degc.ShowLeaderLines != nil {
		if _edab := _degc.ShowLeaderLines.ValidateWithPath(path + "\u002f\u0053h\u006f\u0077\u004ce\u0061\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _edab != nil {
			return _edab
		}
	}
	if _degc.LeaderLines != nil {
		if _dded := _degc.LeaderLines.ValidateWithPath(path + "\u002f\u004c\u0065a\u0064\u0065\u0072\u004c\u0069\u006e\u0065\u0073"); _dded != nil {
			return _dded
		}
	}
	return nil
}

func NewCT_GapAmount() *CT_GapAmount { _facbb := &CT_GapAmount{}; return _facbb }

func (_gabee ST_DLblPos) ValidateWithPath(path string) error {
	switch _gabee {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gabee))
	}
	return nil
}

func (_fgcfd *CT_TxChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fgcfd.StrRef != nil {
		_bagbf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0052\u0065\u0066"}}
		e.EncodeElement(_fgcfd.StrRef, _bagbf)
	}
	if _fgcfd.Rich != nil {
		_cgfae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072\u0069\u0063\u0068"}}
		e.EncodeElement(_fgcfd.Rich, _cgfae)
	}
	return nil
}

// Validate validates the CT_ScatterChart and its children
func (_ebdga *CT_ScatterChart) Validate() error {
	return _ebdga.ValidateWithPath("\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_BubbleChart and its children, prefixing error messages with path
func (_dcb *CT_BubbleChart) ValidateWithPath(path string) error {
	if _dcb.VaryColors != nil {
		if _bgaa := _dcb.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _bgaa != nil {
			return _bgaa
		}
	}
	for _gcbc, _ffbb := range _dcb.Ser {
		if _abfg := _ffbb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _gcbc)); _abfg != nil {
			return _abfg
		}
	}
	if _dcb.DLbls != nil {
		if _fbde := _dcb.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fbde != nil {
			return _fbde
		}
	}
	if _dcb.Bubble3D != nil {
		if _gddc := _dcb.Bubble3D.ValidateWithPath(path + "\u002fB\u0075\u0062\u0062\u006c\u0065\u0033D"); _gddc != nil {
			return _gddc
		}
	}
	if _dcb.BubbleScale != nil {
		if _egdgc := _dcb.BubbleScale.ValidateWithPath(path + "\u002f\u0042\u0075b\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"); _egdgc != nil {
			return _egdgc
		}
	}
	if _dcb.ShowNegBubbles != nil {
		if _fbc := _dcb.ShowNegBubbles.ValidateWithPath(path + "\u002fS\u0068o\u0077\u004e\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"); _fbc != nil {
			return _fbc
		}
	}
	if _dcb.SizeRepresents != nil {
		if _caeb := _dcb.SizeRepresents.ValidateWithPath(path + "\u002fS\u0069z\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"); _caeb != nil {
			return _caeb
		}
	}
	for _edff, _bdac := range _dcb.AxId {
		if _aebg := _bdac.ValidateWithPath(_a.Sprintf("%\u0073\u002f\u0041\u0078\u0049\u0064\u005b\u0025\u0064\u005d", path, _edff)); _aebg != nil {
			return _aebg
		}
	}
	if _dcb.ExtLst != nil {
		if _acfa := _dcb.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _acfa != nil {
			return _acfa
		}
	}
	return nil
}

// ValidateWithPath validates the CT_Pie3DChart and its children, prefixing error messages with path
func (_gbecc *CT_Pie3DChart) ValidateWithPath(path string) error {
	if _gbecc.VaryColors != nil {
		if _eeagf := _gbecc.VaryColors.ValidateWithPath(path + "/\u0056\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"); _eeagf != nil {
			return _eeagf
		}
	}
	for _cgcfg, _fdad := range _gbecc.Ser {
		if _fagcg := _fdad.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0053\u0065\u0072\u005b\u0025\u0064\u005d", path, _cgcfg)); _fagcg != nil {
			return _fagcg
		}
	}
	if _gbecc.DLbls != nil {
		if _agaga := _gbecc.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _agaga != nil {
			return _agaga
		}
	}
	if _gbecc.ExtLst != nil {
		if _gcabg := _gbecc.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _gcabg != nil {
			return _gcabg
		}
	}
	return nil
}

type CT_BubbleScale struct{ ValAttr *ST_BubbleScale }

func ParseUnionST_Thickness(s string) (ST_Thickness, error) {
	if ST_ThicknessPercentPatternRe.MatchString(s) {
		return ST_Thickness{ST_ThicknessPercent: &s}, nil
	}
	_fgdbd, _cfdafa := _bg.ParseUint(s, 10, 32)
	if _cfdafa != nil {
		return ST_Thickness{}, _cfdafa
	}
	_dacabf := uint32(_fgdbd)
	return ST_Thickness{Uint32: &_dacabf}, nil
}

func (_adgga *CT_RadarChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_dfdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0072a\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065"}}
	e.EncodeElement(_adgga.RadarStyle, _dfdf)
	if _adgga.VaryColors != nil {
		_degbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_adgga.VaryColors, _degbb)
	}
	if _adgga.Ser != nil {
		_aacfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _abba := range _adgga.Ser {
			e.EncodeElement(_abba, _aacfa)
		}
	}
	if _adgga.DLbls != nil {
		_aagc := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_adgga.DLbls, _aagc)
	}
	_gggbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _bbefd := range _adgga.AxId {
		e.EncodeElement(_bbefd, _gggbg)
	}
	if _adgga.ExtLst != nil {
		_cegc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_adgga.ExtLst, _cegc)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dbfg ST_PageSetupOrientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_dbfg.String(), start)
}

func NewCT_StockChart() *CT_StockChart { _deee := &CT_StockChart{}; return _deee }

func (_caba *CT_Period) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _caba.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_caba.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cbda *ST_PictureFormat) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_cbda = 0
	case "\u0073t\u0072\u0065\u0074\u0063\u0068":
		*_cbda = 1
	case "\u0073\u0074\u0061c\u006b":
		*_cbda = 2
	case "\u0073\u0074\u0061\u0063\u006b\u0053\u0063\u0061\u006c\u0065":
		*_cbda = 3
	}
	return nil
}

const (
	ST_ScatterStyleUnset        ST_ScatterStyle = 0
	ST_ScatterStyleNone         ST_ScatterStyle = 1
	ST_ScatterStyleLine         ST_ScatterStyle = 2
	ST_ScatterStyleLineMarker   ST_ScatterStyle = 3
	ST_ScatterStyleMarker       ST_ScatterStyle = 4
	ST_ScatterStyleSmooth       ST_ScatterStyle = 5
	ST_ScatterStyleSmoothMarker ST_ScatterStyle = 6
)

func NewCT_FirstSliceAng() *CT_FirstSliceAng { _gccef := &CT_FirstSliceAng{}; return _gccef }

func (_bbdda ST_Grouping) Validate() error { return _bbdda.ValidateWithPath("") }

var ST_OverlapPercentPatternRe = _b.MustCompile(ST_OverlapPercentPattern)

func (_ecbd *CT_TextLanguageID) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _ecbd.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_ErrBarType struct{ ValAttr ST_ErrBarType }

type CT_BandFmts struct{ BandFmt []*CT_BandFmt }

func (_fbbda *ST_TimeUnit) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eggga, _dfbdg := d.Token()
	if _dfbdg != nil {
		return _dfbdg
	}
	if _ecgfd, _ceefeb := _eggga.(_e.EndElement); _ceefeb && _ecgfd.Name == start.Name {
		*_fbbda = 1
		return nil
	}
	if _dcefb, _ceadg := _eggga.(_e.CharData); !_ceadg {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eggga)
	} else {
		switch string(_dcefb) {
		case "":
			*_fbbda = 0
		case "\u0064\u0061\u0079\u0073":
			*_fbbda = 1
		case "\u006d\u006f\u006e\u0074\u0068\u0073":
			*_fbbda = 2
		case "\u0079\u0065\u0061r\u0073":
			*_fbbda = 3
		}
	}
	_eggga, _dfbdg = d.Token()
	if _dfbdg != nil {
		return _dfbdg
	}
	if _acgee, _cfccf := _eggga.(_e.EndElement); _cfccf && _acgee.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eggga)
}

func NewCT_Orientation() *CT_Orientation { _cfgc := &CT_Orientation{}; return _cfgc }

// Validate validates the CT_RadarStyle and its children
func (_dfgf *CT_RadarStyle) Validate() error {
	return _dfgf.ValidateWithPath("\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065")
}

const (
	ST_SplitTypeUnset   ST_SplitType = 0
	ST_SplitTypeAuto    ST_SplitType = 1
	ST_SplitTypeCust    ST_SplitType = 2
	ST_SplitTypePercent ST_SplitType = 3
	ST_SplitTypePos     ST_SplitType = 4
	ST_SplitTypeVal     ST_SplitType = 5
)

type CT_BarChart struct {
	BarDir     *CT_BarDir
	Grouping   *CT_BarGrouping
	VaryColors *CT_Boolean
	Ser        []*CT_BarSer
	DLbls      *CT_DLbls
	GapWidth   *CT_GapAmount
	Overlap    *CT_Overlap
	SerLines   []*CT_ChartLines
	AxId       []*CT_UnsignedInt
	ExtLst     *CT_ExtensionList
}

func (_gcedda *Chart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_gcedda.CT_RelId = *NewCT_RelId()
	for _, _ddge := range start.Attr {
		if _ddge.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073" && _ddge.Name.Local == "\u0069\u0064" || _ddge.Name.Space == "\u0068\u0074\u0074\u0070\u003a\u002f\u002fp\u0075\u0072\u006c.\u006f\u0063\u006cc\u002e\u006fr\u0067\u002f\u006f\u006f\u0078\u006dl\u002fof\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073" && _ddge.Name.Local == "\u0069\u0064" {
			_ecbb, _dgfc := _ddge.Value, error(nil)
			if _dgfc != nil {
				return _dgfc
			}
			_gcedda.IdAttr = _ecbb
			continue
		}
	}
	for {
		_cfgec, _efdea := d.Token()
		if _efdea != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0068\u0061\u0072t\u003a\u0020\u0025\u0073", _efdea)
		}
		if _ccdcc, _aggec := _cfgec.(_e.EndElement); _aggec && _ccdcc.Name == start.Name {
			break
		}
	}
	return nil
}

func (_bdfd ST_Grouping) ValidateWithPath(path string) error {
	switch _bdfd {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_bdfd))
	}
	return nil
}

func (_baeca ST_DispBlanksAs) ValidateWithPath(path string) error {
	switch _baeca {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_baeca))
	}
	return nil
}

func (_gbeccb ST_Crosses) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_gbeccb.String(), start)
}

// ValidateWithPath validates the CT_PieSer and its children, prefixing error messages with path
func (_fff *CT_PieSer) ValidateWithPath(path string) error {
	if _agfddc := _fff.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _agfddc != nil {
		return _agfddc
	}
	if _eeefc := _fff.Order.ValidateWithPath(path + "\u002f\u004f\u0072\u0064\u0065\u0072"); _eeefc != nil {
		return _eeefc
	}
	if _fff.Tx != nil {
		if _gcgda := _fff.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _gcgda != nil {
			return _gcgda
		}
	}
	if _fff.SpPr != nil {
		if _ceadc := _fff.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ceadc != nil {
			return _ceadc
		}
	}
	if _fff.Explosion != nil {
		if _egeee := _fff.Explosion.ValidateWithPath(path + "\u002f\u0045\u0078\u0070\u006c\u006f\u0073\u0069\u006f\u006e"); _egeee != nil {
			return _egeee
		}
	}
	for _ecaf, _adeb := range _fff.DPt {
		if _ddfgb := _adeb.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0044\u0050\u0074\u005b\u0025\u0064\u005d", path, _ecaf)); _ddfgb != nil {
			return _ddfgb
		}
	}
	if _fff.DLbls != nil {
		if _fggc := _fff.DLbls.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0073"); _fggc != nil {
			return _fggc
		}
	}
	if _fff.Cat != nil {
		if _bagfeb := _fff.Cat.ValidateWithPath(path + "\u002f\u0043\u0061\u0074"); _bagfeb != nil {
			return _bagfeb
		}
	}
	if _fff.Val != nil {
		if _aebda := _fff.Val.ValidateWithPath(path + "\u002f\u0056\u0061\u006c"); _aebda != nil {
			return _aebda
		}
	}
	if _fff.ExtLst != nil {
		if _adfdc := _fff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _adfdc != nil {
			return _adfdc
		}
	}
	return nil
}

func (_gbdg *CT_CatAx) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bbcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_gbdg.AxId, _bbcd)
	_ceef := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_gbdg.Scaling, _ceef)
	if _gbdg.Delete != nil {
		_adfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_gbdg.Delete, _adfa)
	}
	_aba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_gbdg.AxPos, _aba)
	if _gbdg.MajorGridlines != nil {
		_ffgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gbdg.MajorGridlines, _ffgd)
	}
	if _gbdg.MinorGridlines != nil {
		_acff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_gbdg.MinorGridlines, _acff)
	}
	if _gbdg.Title != nil {
		_ggcf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_gbdg.Title, _ggcf)
	}
	if _gbdg.NumFmt != nil {
		_def := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_gbdg.NumFmt, _def)
	}
	if _gbdg.MajorTickMark != nil {
		_ccbed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gbdg.MajorTickMark, _ccbed)
	}
	if _gbdg.MinorTickMark != nil {
		_cbb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_gbdg.MinorTickMark, _cbb)
	}
	if _gbdg.TickLblPos != nil {
		_ege := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_gbdg.TickLblPos, _ege)
	}
	if _gbdg.SpPr != nil {
		_bdgfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_gbdg.SpPr, _bdgfb)
	}
	if _gbdg.TxPr != nil {
		_fabe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gbdg.TxPr, _fabe)
	}
	_dfff := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_gbdg.CrossAx, _dfff)
	if _gbdg.Choice != nil {
		_gbdg.Choice.MarshalXML(e, _e.StartElement{})
	}
	if _gbdg.Auto != nil {
		_cda := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0075\u0074\u006f"}}
		e.EncodeElement(_gbdg.Auto, _cda)
	}
	if _gbdg.LblAlgn != nil {
		_ggdg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006c\u0062\u006c\u0041\u006c\u0067n"}}
		e.EncodeElement(_gbdg.LblAlgn, _ggdg)
	}
	if _gbdg.LblOffset != nil {
		_dgdeg := _e.StartElement{Name: _e.Name{Local: "c\u003a\u006c\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074"}}
		e.EncodeElement(_gbdg.LblOffset, _dgdeg)
	}
	if _gbdg.TickLblSkip != nil {
		_eee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_gbdg.TickLblSkip, _eee)
	}
	if _gbdg.TickMarkSkip != nil {
		_fgfa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0069\u0063\u006b\u004d\u0061\u0072k\u0053\u006b\u0069\u0070"}}
		e.EncodeElement(_gbdg.TickMarkSkip, _fgfa)
	}
	if _gbdg.NoMultiLvlLbl != nil {
		_gba := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006eo\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u004c\u0062\u006c"}}
		e.EncodeElement(_gbdg.NoMultiLvlLbl, _gba)
	}
	if _gbdg.ExtLst != nil {
		_gaad := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_gbdg.ExtLst, _gaad)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_fcfd *CT_GapAmount) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _fcfd.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_fcfd.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func NewCT_Marker() *CT_Marker { _bfed := &CT_Marker{}; return _bfed }

func (_abeab *ST_Crosses) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_abeab = 0
	case "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f":
		*_abeab = 1
	case "\u006d\u0061\u0078":
		*_abeab = 2
	case "\u006d\u0069\u006e":
		*_abeab = 3
	}
	return nil
}

func NewCT_ScatterStyle() *CT_ScatterStyle { _bdacf := &CT_ScatterStyle{}; return _bdacf }

type ST_TickLblPos byte

// ValidateWithPath validates the CT_SerTx and its children, prefixing error messages with path
func (_fcgc *CT_SerTx) ValidateWithPath(path string) error {
	if _gagbb := _fcgc.Choice.ValidateWithPath(path + "\u002fC\u0068\u006f\u0069\u0063\u0065"); _gagbb != nil {
		return _gagbb
	}
	return nil
}

const (
	ST_DLblPosUnset   ST_DLblPos = 0
	ST_DLblPosBestFit ST_DLblPos = 1
	ST_DLblPosB       ST_DLblPos = 2
	ST_DLblPosCtr     ST_DLblPos = 3
	ST_DLblPosInBase  ST_DLblPos = 4
	ST_DLblPosInEnd   ST_DLblPos = 5
	ST_DLblPosL       ST_DLblPos = 6
	ST_DLblPosOutEnd  ST_DLblPos = 7
	ST_DLblPosR       ST_DLblPos = 8
	ST_DLblPosT       ST_DLblPos = 9
)

func (_fbfb *CT_BubbleChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_adge:
	for {
		_acg, _edd := d.Token()
		if _edd != nil {
			return _edd
		}
		switch _gbde := _acg.(type) {
		case _e.StartElement:
			switch _gbde.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_fbfb.VaryColors = NewCT_Boolean()
				if _gdgd := d.DecodeElement(_fbfb.VaryColors, &_gbde); _gdgd != nil {
					return _gdgd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ffdf := NewCT_BubbleSer()
				if _gcea := d.DecodeElement(_ffdf, &_gbde); _gcea != nil {
					return _gcea
				}
				_fbfb.Ser = append(_fbfb.Ser, _ffdf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_fbfb.DLbls = NewCT_DLbls()
				if _dgeg := d.DecodeElement(_fbfb.DLbls, &_gbde); _dgeg != nil {
					return _dgeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}:
				_fbfb.Bubble3D = NewCT_Boolean()
				if _acf := d.DecodeElement(_fbfb.Bubble3D, &_gbde); _acf != nil {
					return _acf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "b\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}:
				_fbfb.BubbleScale = NewCT_BubbleScale()
				if _ccbe := d.DecodeElement(_fbfb.BubbleScale, &_gbde); _ccbe != nil {
					return _ccbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004e\u0065\u0067\u0042\u0075b\u0062\u006c\u0065\u0073"}:
				_fbfb.ShowNegBubbles = NewCT_Boolean()
				if _bdg := d.DecodeElement(_fbfb.ShowNegBubbles, &_gbde); _bdg != nil {
					return _bdg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073"}:
				_fbfb.SizeRepresents = NewCT_SizeRepresents()
				if _aga := d.DecodeElement(_fbfb.SizeRepresents, &_gbde); _aga != nil {
					return _aga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_ebda := NewCT_UnsignedInt()
				if _fgdg := d.DecodeElement(_ebda, &_gbde); _fgdg != nil {
					return _fgdg
				}
				_fbfb.AxId = append(_fbfb.AxId, _ebda)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_fbfb.ExtLst = NewCT_ExtensionList()
				if _bae := d.DecodeElement(_fbfb.ExtLst, &_gbde); _bae != nil {
					return _bae
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069n\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006et\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065\u0043h\u0061r\u0074\u0020\u0025\u0076", _gbde.Name)
				if _bbba := d.Skip(); _bbba != nil {
					return _bbba
				}
			}
		case _e.EndElement:
			break _adge
		case _e.CharData:
		}
	}
	return nil
}

func NewCT_HeaderFooter() *CT_HeaderFooter { _aaeg := &CT_HeaderFooter{}; return _aaeg }

func NewCT_LblOffset() *CT_LblOffset { _eeaa := &CT_LblOffset{}; return _eeaa }

func (_gcdb *CT_LegendEntryChoice) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gcdb.Delete != nil {
		_cdab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_gcdb.Delete, _cdab)
	}
	if _gcdb.TxPr != nil {
		_dacab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_gcdb.TxPr, _dacab)
	}
	return nil
}

func NewCT_Overlap() *CT_Overlap { _feeef := &CT_Overlap{}; return _feeef }

func (_dggcb ST_MarkerStyle) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_aefgb := _e.Attr{}
	_aefgb.Name = name
	switch _dggcb {
	case ST_MarkerStyleUnset:
		_aefgb.Value = ""
	case ST_MarkerStyleCircle:
		_aefgb.Value = "\u0063\u0069\u0072\u0063\u006c\u0065"
	case ST_MarkerStyleDash:
		_aefgb.Value = "\u0064\u0061\u0073\u0068"
	case ST_MarkerStyleDiamond:
		_aefgb.Value = "\u0064i\u0061\u006d\u006f\u006e\u0064"
	case ST_MarkerStyleDot:
		_aefgb.Value = "\u0064\u006f\u0074"
	case ST_MarkerStyleNone:
		_aefgb.Value = "\u006e\u006f\u006e\u0065"
	case ST_MarkerStylePicture:
		_aefgb.Value = "\u0070i\u0063\u0074\u0075\u0072\u0065"
	case ST_MarkerStylePlus:
		_aefgb.Value = "\u0070\u006c\u0075\u0073"
	case ST_MarkerStyleSquare:
		_aefgb.Value = "\u0073\u0071\u0075\u0061\u0072\u0065"
	case ST_MarkerStyleStar:
		_aefgb.Value = "\u0073\u0074\u0061\u0072"
	case ST_MarkerStyleTriangle:
		_aefgb.Value = "\u0074\u0072\u0069\u0061\u006e\u0067\u006c\u0065"
	case ST_MarkerStyleX:
		_aefgb.Value = "\u0078"
	case ST_MarkerStyleAuto:
		_aefgb.Value = "\u0061\u0075\u0074\u006f"
	}
	return _aefgb, nil
}

func (_gddg *ST_GapAmount) Validate() error { return _gddg.ValidateWithPath("") }

// Validate validates the CT_NumDataSource and its children
func (_fecc *CT_NumDataSource) Validate() error {
	return _fecc.ValidateWithPath("\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065")
}

// Validate validates the CT_DLblsChoice and its children
func (_eagb *CT_DLblsChoice) Validate() error {
	return _eagb.ValidateWithPath("\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073\u0043h\u006f\u0069\u0063\u0065")
}

func (_befffa *CT_Perspective) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fcab := range start.Attr {
		if _fcab.Name.Local == "\u0076\u0061\u006c" {
			_dfcfg, _ddce := _bg.ParseUint(_fcab.Value, 10, 8)
			if _ddce != nil {
				return _ddce
			}
			_faeb := uint8(_dfcfg)
			_befffa.ValAttr = &_faeb
			continue
		}
	}
	for {
		_efaf, _edacc := d.Token()
		if _edacc != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fP\u0065\u0072\u0073\u0070\u0065\u0063\u0074\u0069\u0076\u0065:\u0020\u0025\u0073", _edacc)
		}
		if _daaag, _dgdaa := _efaf.(_e.EndElement); _dgdaa && _daaag.Name == start.Name {
			break
		}
	}
	return nil
}

type CT_HPercent struct{ ValAttr *ST_HPercent }

// ValidateWithPath validates the Group_DLbl and its children, prefixing error messages with path
func (_dgffd *Group_DLbl) ValidateWithPath(path string) error {
	if _dgffd.Layout != nil {
		if _eeedgc := _dgffd.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _eeedgc != nil {
			return _eeedgc
		}
	}
	if _dgffd.Tx != nil {
		if _fgbfe := _dgffd.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _fgbfe != nil {
			return _fgbfe
		}
	}
	if _dgffd.NumFmt != nil {
		if _acbdg := _dgffd.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _acbdg != nil {
			return _acbdg
		}
	}
	if _dgffd.SpPr != nil {
		if _gbae := _dgffd.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _gbae != nil {
			return _gbae
		}
	}
	if _dgffd.TxPr != nil {
		if _abed := _dgffd.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _abed != nil {
			return _abed
		}
	}
	if _dgffd.DLblPos != nil {
		if _bdcgc := _dgffd.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _bdcgc != nil {
			return _bdcgc
		}
	}
	if _dgffd.ShowLegendKey != nil {
		if _eeccb := _dgffd.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _eeccb != nil {
			return _eeccb
		}
	}
	if _dgffd.ShowVal != nil {
		if _babbb := _dgffd.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _babbb != nil {
			return _babbb
		}
	}
	if _dgffd.ShowCatName != nil {
		if _cbedd := _dgffd.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _cbedd != nil {
			return _cbedd
		}
	}
	if _dgffd.ShowSerName != nil {
		if _agggf := _dgffd.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _agggf != nil {
			return _agggf
		}
	}
	if _dgffd.ShowPercent != nil {
		if _ddada := _dgffd.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _ddada != nil {
			return _ddada
		}
	}
	if _dgffd.ShowBubbleSize != nil {
		if _edbff := _dgffd.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _edbff != nil {
			return _edbff
		}
	}
	return nil
}

func (_gaacb *ST_LayoutMode) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_gaacb = 0
	case "\u0065\u0064\u0067\u0065":
		*_gaacb = 1
	case "\u0066\u0061\u0063\u0074\u006f\u0072":
		*_gaacb = 2
	}
	return nil
}

// ST_LblOffset is a union type
type ST_LblOffset struct {
	ST_LblOffsetPercent *string
	ST_LblOffsetUShort  *uint16
}

func (_acbce *CT_ValAx) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_acbce.AxId = NewCT_UnsignedInt()
	_acbce.Scaling = NewCT_Scaling()
	_acbce.AxPos = NewCT_AxPos()
	_acbce.CrossAx = NewCT_UnsignedInt()
_bgdge:
	for {
		_fafcf, _cfcdg := d.Token()
		if _cfcdg != nil {
			return _cfcdg
		}
		switch _gfbf := _fafcf.(type) {
		case _e.StartElement:
			switch _gfbf.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				if _dffdd := d.DecodeElement(_acbce.AxId, &_gfbf); _dffdd != nil {
					return _dffdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073c\u0061\u006c\u0069\u006e\u0067"}:
				if _cfceg := d.DecodeElement(_acbce.Scaling, &_gfbf); _cfceg != nil {
					return _cfceg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u0065\u006c\u0065\u0074\u0065"}:
				_acbce.Delete = NewCT_Boolean()
				if _gbdcga := d.DecodeElement(_acbce.Delete, &_gfbf); _gbdcga != nil {
					return _gbdcga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0050o\u0073"}:
				if _beaa := d.DecodeElement(_acbce.AxPos, &_gfbf); _beaa != nil {
					return _beaa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_acbce.MajorGridlines = NewCT_ChartLines()
				if _fcaad := d.DecodeElement(_acbce.MajorGridlines, &_gfbf); _fcaad != nil {
					return _fcaad
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0047\u0072\u0069\u0064l\u0069\u006e\u0065\u0073"}:
				_acbce.MinorGridlines = NewCT_ChartLines()
				if _bbafd := d.DecodeElement(_acbce.MinorGridlines, &_gfbf); _bbafd != nil {
					return _bbafd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0074l\u0065"}:
				_acbce.Title = NewCT_Title()
				if _adbc := d.DecodeElement(_acbce.Title, &_gfbf); _adbc != nil {
					return _adbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_acbce.NumFmt = NewCT_NumFmt()
				if _ffbab := d.DecodeElement(_acbce.NumFmt, &_gfbf); _ffbab != nil {
					return _ffbab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_acbce.MajorTickMark = NewCT_TickMark()
				if _gbbgdb := d.DecodeElement(_acbce.MajorTickMark, &_gfbf); _gbbgdb != nil {
					return _gbbgdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}:
				_acbce.MinorTickMark = NewCT_TickMark()
				if _aegee := d.DecodeElement(_acbce.MinorTickMark, &_gfbf); _aegee != nil {
					return _aegee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}:
				_acbce.TickLblPos = NewCT_TickLblPos()
				if _cfde := d.DecodeElement(_acbce.TickLblPos, &_gfbf); _cfde != nil {
					return _cfde
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_acbce.SpPr = _bb.NewCT_ShapeProperties()
				if _beagd := d.DecodeElement(_acbce.SpPr, &_gfbf); _beagd != nil {
					return _beagd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_acbce.TxPr = _bb.NewCT_TextBody()
				if _abbga := d.DecodeElement(_acbce.TxPr, &_gfbf); _abbga != nil {
					return _abbga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0041\u0078"}:
				if _gfaf := d.DecodeElement(_acbce.CrossAx, &_gfbf); _gfaf != nil {
					return _gfaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073"}:
				_acbce.Choice = NewEG_AxSharedChoice()
				if _bbdf := d.DecodeElement(&_acbce.Choice.Crosses, &_gfbf); _bbdf != nil {
					return _bbdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063r\u006f\u0073\u0073\u0065\u0073\u0041t"}:
				_acbce.Choice = NewEG_AxSharedChoice()
				if _ecdgb := d.DecodeElement(&_acbce.Choice.CrossesAt, &_gfbf); _ecdgb != nil {
					return _ecdgb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0063\u0072\u006fs\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e"}:
				_acbce.CrossBetween = NewCT_CrossBetween()
				if _agdff := d.DecodeElement(_acbce.CrossBetween, &_gfbf); _agdff != nil {
					return _agdff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006da\u006a\u006f\u0072\u0055\u006e\u0069t"}:
				_acbce.MajorUnit = NewCT_AxisUnit()
				if _cdbd := d.DecodeElement(_acbce.MajorUnit, &_gfbf); _cdbd != nil {
					return _cdbd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006di\u006e\u006f\u0072\u0055\u006e\u0069t"}:
				_acbce.MinorUnit = NewCT_AxisUnit()
				if _gecbe := d.DecodeElement(_acbce.MinorUnit, &_gfbf); _gecbe != nil {
					return _gecbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064i\u0073\u0070\u0055\u006e\u0069\u0074s"}:
				_acbce.DispUnits = NewCT_DispUnits()
				if _cdddc := d.DecodeElement(_acbce.DispUnits, &_gfbf); _cdddc != nil {
					return _cdddc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_acbce.ExtLst = NewCT_ExtensionList()
				if _geaff := d.DecodeElement(_acbce.ExtLst, &_gfbf); _geaff != nil {
					return _geaff
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006eg\u0020\u0075\u006es\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078\u0020\u0025\u0076", _gfbf.Name)
				if _fdbcc := d.Skip(); _fdbcc != nil {
					return _fdbcc
				}
			}
		case _e.EndElement:
			break _bgdge
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_AxDataSourceChoice and its children, prefixing error messages with path
func (_dbb *CT_AxDataSourceChoice) ValidateWithPath(path string) error {
	if _dbb.MultiLvlStrRef != nil {
		if _bggg := _dbb.MultiLvlStrRef.ValidateWithPath(path + "\u002fM\u0075l\u0074\u0069\u004c\u0076\u006c\u0053\u0074\u0072\u0052\u0065\u0066"); _bggg != nil {
			return _bggg
		}
	}
	if _dbb.NumRef != nil {
		if _fg := _dbb.NumRef.ValidateWithPath(path + "\u002fN\u0075\u006d\u0052\u0065\u0066"); _fg != nil {
			return _fg
		}
	}
	if _dbb.NumLit != nil {
		if _agcf := _dbb.NumLit.ValidateWithPath(path + "\u002fN\u0075\u006d\u004c\u0069\u0074"); _agcf != nil {
			return _agcf
		}
	}
	if _dbb.StrRef != nil {
		if _aecb := _dbb.StrRef.ValidateWithPath(path + "\u002fS\u0074\u0072\u0052\u0065\u0066"); _aecb != nil {
			return _aecb
		}
	}
	if _dbb.StrLit != nil {
		if _bgggg := _dbb.StrLit.ValidateWithPath(path + "\u002fS\u0074\u0072\u004c\u0069\u0074"); _bgggg != nil {
			return _bgggg
		}
	}
	return nil
}

// ValidateWithPath validates the CT_DLblChoice and its children, prefixing error messages with path
func (_edac *CT_DLblChoice) ValidateWithPath(path string) error {
	if _edac.Delete != nil {
		if _cfab := _edac.Delete.ValidateWithPath(path + "\u002fD\u0065\u006c\u0065\u0074\u0065"); _cfab != nil {
			return _cfab
		}
	}
	if _edac.Layout != nil {
		if _bcaae := _edac.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _bcaae != nil {
			return _bcaae
		}
	}
	if _edac.Tx != nil {
		if _bfaa := _edac.Tx.ValidateWithPath(path + "\u002f\u0054\u0078"); _bfaa != nil {
			return _bfaa
		}
	}
	if _edac.NumFmt != nil {
		if _gcad := _edac.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _gcad != nil {
			return _gcad
		}
	}
	if _edac.SpPr != nil {
		if _cadg := _edac.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _cadg != nil {
			return _cadg
		}
	}
	if _edac.TxPr != nil {
		if _bdda := _edac.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bdda != nil {
			return _bdda
		}
	}
	if _edac.DLblPos != nil {
		if _agcfdd := _edac.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _agcfdd != nil {
			return _agcfdd
		}
	}
	if _edac.ShowLegendKey != nil {
		if _fdac := _edac.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _fdac != nil {
			return _fdac
		}
	}
	if _edac.ShowVal != nil {
		if _bbad := _edac.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _bbad != nil {
			return _bbad
		}
	}
	if _edac.ShowCatName != nil {
		if _egef := _edac.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _egef != nil {
			return _egef
		}
	}
	if _edac.ShowSerName != nil {
		if _dfa := _edac.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _dfa != nil {
			return _dfa
		}
	}
	if _edac.ShowPercent != nil {
		if _fdfa := _edac.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _fdfa != nil {
			return _fdfa
		}
	}
	if _edac.ShowBubbleSize != nil {
		if _ceefd := _edac.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _ceefd != nil {
			return _ceefd
		}
	}
	return nil
}

func (_agcaf *CT_StrData) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _agcaf.PtCount != nil {
		_geccg := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0070\u0074\u0043\u006f\u0075\u006et"}}
		e.EncodeElement(_agcaf.PtCount, _geccg)
	}
	if _agcaf.Pt != nil {
		_abggd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u0074"}}
		for _, _eaag := range _agcaf.Pt {
			e.EncodeElement(_eaag, _abggd)
		}
	}
	if _agcaf.ExtLst != nil {
		_decb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_agcaf.ExtLst, _decb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_BandFmt and its children, prefixing error messages with path
func (_bda *CT_BandFmt) ValidateWithPath(path string) error {
	if _fbf := _bda.Idx.ValidateWithPath(path + "\u002f\u0049\u0064\u0078"); _fbf != nil {
		return _fbf
	}
	if _bda.SpPr != nil {
		if _afc := _bda.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _afc != nil {
			return _afc
		}
	}
	return nil
}

func (_aaage ST_Crosses) String() string {
	switch _aaage {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f\u005a\u0065\u0072\u006f"
	case 2:
		return "\u006d\u0061\u0078"
	case 3:
		return "\u006d\u0069\u006e"
	}
	return ""
}

func (_bag *CT_AreaSer) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_bbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_bag.Idx, _bbc)
	_cb := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006f\u0072\u0064\u0065\u0072"}}
	e.EncodeElement(_bag.Order, _cb)
	if _bag.Tx != nil {
		_cag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_bag.Tx, _cag)
	}
	if _bag.SpPr != nil {
		_ee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_bag.SpPr, _ee)
	}
	if _bag.PictureOptions != nil {
		_gag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003ap\u0069\u0063\u0074u\u0072\u0065\u004f\u0070\u0074\u0069\u006f\u006e\u0073"}}
		e.EncodeElement(_bag.PictureOptions, _gag)
	}
	if _bag.DPt != nil {
		_fab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064P\u0074"}}
		for _, _ceb := range _bag.DPt {
			e.EncodeElement(_ceb, _fab)
		}
	}
	if _bag.DLbls != nil {
		_baa := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_bag.DLbls, _baa)
	}
	if _bag.Trendline != nil {
		_af := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0074\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065"}}
		for _, _fca := range _bag.Trendline {
			e.EncodeElement(_fca, _af)
		}
	}
	if _bag.ErrBars != nil {
		_dab := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0065\u0072\u0072\u0042\u0061\u0072s"}}
		for _, _aac := range _bag.ErrBars {
			e.EncodeElement(_aac, _dab)
		}
	}
	if _bag.Cat != nil {
		_eg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063a\u0074"}}
		e.EncodeElement(_bag.Cat, _eg)
	}
	if _bag.Val != nil {
		_fea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_bag.Val, _fea)
	}
	if _bag.ExtLst != nil {
		_eff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_bag.ExtLst, _eff)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the EG_SerShared and its children
func (_aabec *EG_SerShared) Validate() error {
	return _aabec.ValidateWithPath("\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064")
}

type ST_TickMark byte

type CT_PageSetup struct {
	PaperSizeAttr          *uint32
	PaperHeightAttr        *string
	PaperWidthAttr         *string
	FirstPageNumberAttr    *uint32
	OrientationAttr        ST_PageSetupOrientation
	BlackAndWhiteAttr      *bool
	DraftAttr              *bool
	UseFirstPageNumberAttr *bool
	HorizontalDpiAttr      *int32
	VerticalDpiAttr        *int32
	CopiesAttr             *uint32
}

func NewCT_PlotArea() *CT_PlotArea { _cgeec := &CT_PlotArea{}; return _cgeec }

// ValidateWithPath validates the UserShapes and its children, prefixing error messages with path
func (_abcbc *UserShapes) ValidateWithPath(path string) error {
	if _ddged := _abcbc.CT_Drawing.ValidateWithPath(path); _ddged != nil {
		return _ddged
	}
	return nil
}

type ST_RadarStyle byte

// ValidateWithPath validates the CT_PlotArea and its children, prefixing error messages with path
func (_egeff *CT_PlotArea) ValidateWithPath(path string) error {
	if _egeff.Layout != nil {
		if _aadee := _egeff.Layout.ValidateWithPath(path + "\u002fL\u0061\u0079\u006f\u0075\u0074"); _aadee != nil {
			return _aadee
		}
	}
	for _bfgg, _dada := range _egeff.Choice {
		if _cfgcf := _dada.ValidateWithPath(_a.Sprintf("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d", path, _bfgg)); _cfgcf != nil {
			return _cfgcf
		}
	}
	if _egeff.CChoice != nil {
		if _bffceb := _egeff.CChoice.ValidateWithPath(path + "\u002f\u0043\u0043\u0068\u006f\u0069\u0063\u0065"); _bffceb != nil {
			return _bffceb
		}
	}
	if _egeff.DTable != nil {
		if _gafc := _egeff.DTable.ValidateWithPath(path + "\u002fD\u0054\u0061\u0062\u006c\u0065"); _gafc != nil {
			return _gafc
		}
	}
	if _egeff.SpPr != nil {
		if _ecgef := _egeff.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _ecgef != nil {
			return _ecgef
		}
	}
	if _egeff.ExtLst != nil {
		if _ceeb := _egeff.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ceeb != nil {
			return _ceeb
		}
	}
	return nil
}

// Validate validates the CT_DoughnutChart and its children
func (_geef *CT_DoughnutChart) Validate() error {
	return _geef.ValidateWithPath("\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074")
}

func NewCT_RadarSer() *CT_RadarSer {
	_ccgaf := &CT_RadarSer{}
	_ccgaf.Idx = NewCT_UnsignedInt()
	_ccgaf.Order = NewCT_UnsignedInt()
	return _ccgaf
}

type ST_TrendlineType byte

// Validate validates the CT_TxChoice and its children
func (_fcbde *CT_TxChoice) Validate() error {
	return _fcbde.ValidateWithPath("C\u0054\u005f\u0054\u0078\u0043\u0068\u006f\u0069\u0063\u0065")
}

func (_dcdcb *EG_BarChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dcdcb.BarDir = NewCT_BarDir()
_cadab:
	for {
		_gdbb, _bbeec := d.Token()
		if _bbeec != nil {
			return _bbeec
		}
		switch _fcabb := _gdbb.(type) {
		case _e.StartElement:
			switch _fcabb.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0062\u0061\u0072\u0044\u0069\u0072"}:
				if _ggab := d.DecodeElement(_dcdcb.BarDir, &_fcabb); _ggab != nil {
					return _ggab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_dcdcb.Grouping = NewCT_BarGrouping()
				if _bbfea := d.DecodeElement(_dcdcb.Grouping, &_fcabb); _bbfea != nil {
					return _bbfea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_dcdcb.VaryColors = NewCT_Boolean()
				if _gagee := d.DecodeElement(_dcdcb.VaryColors, &_fcabb); _gagee != nil {
					return _gagee
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_aedgf := NewCT_BarSer()
				if _dbecd := d.DecodeElement(_aedgf, &_fcabb); _dbecd != nil {
					return _dbecd
				}
				_dcdcb.Ser = append(_dcdcb.Ser, _aedgf)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_dcdcb.DLbls = NewCT_DLbls()
				if _aebgf := d.DecodeElement(_dcdcb.DLbls, &_fcabb); _aebgf != nil {
					return _aebgf
				}
			default:
				_ab.Log.Debug("\u0073\u006bi\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _fcabb.Name)
				if _fdcdg := d.Skip(); _fdcdg != nil {
					return _fdcdg
				}
			}
		case _e.EndElement:
			break _cadab
		case _e.CharData:
		}
	}
	return nil
}

func (_ddcc *CT_PageMargins) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u006c"}, Value: _a.Sprintf("\u0025\u0076", _ddcc.LAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0072"}, Value: _a.Sprintf("\u0025\u0076", _ddcc.RAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0074"}, Value: _a.Sprintf("\u0025\u0076", _ddcc.TAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0062"}, Value: _a.Sprintf("\u0025\u0076", _ddcc.BAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0068\u0065\u0061\u0064\u0065\u0072"}, Value: _a.Sprintf("\u0025\u0076", _ddcc.HeaderAttr)})
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u006f\u0074\u0065\u0072"}, Value: _a.Sprintf("\u0025\u0076", _ddcc.FooterAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// ValidateWithPath validates the CT_NumData and its children, prefixing error messages with path
func (_cdcge *CT_NumData) ValidateWithPath(path string) error {
	if _cdcge.PtCount != nil {
		if _gcbg := _cdcge.PtCount.ValidateWithPath(path + "\u002f\u0050\u0074\u0043\u006f\u0075\u006e\u0074"); _gcbg != nil {
			return _gcbg
		}
	}
	for _ebbd, _fbca := range _cdcge.Pt {
		if _dbgd := _fbca.ValidateWithPath(_a.Sprintf("\u0025s\u002f\u0050\u0074\u005b\u0025\u0064]", path, _ebbd)); _dbgd != nil {
			return _dbgd
		}
	}
	if _cdcge.ExtLst != nil {
		if _egda := _cdcge.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _egda != nil {
			return _egda
		}
	}
	return nil
}

func (_bbdge *CT_ScatterStyle) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _fbfbb := range start.Attr {
		if _fbfbb.Name.Local == "\u0076\u0061\u006c" {
			_bbdge.ValAttr.UnmarshalXMLAttr(_fbfbb)
			continue
		}
	}
	for {
		_cebg, _geafb := d.Token()
		if _geafb != nil {
			return _a.Errorf("p\u0061\u0072\u0073\u0069\u006e\u0067 \u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065r\u0053\u0074\u0079l\u0065:\u0020\u0025\u0073", _geafb)
		}
		if _fabbfe, _faee := _cebg.(_e.EndElement); _faee && _fabbfe.Name == start.Name {
			break
		}
	}
	return nil
}

// Validate validates the CT_PrintSettings and its children
func (_eafgg *CT_PrintSettings) Validate() error {
	return _eafgg.ValidateWithPath("\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073")
}

func (_cgead ST_LayoutMode) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_cgead.String(), start)
}

func NewCT_DLbls() *CT_DLbls { _bcda := &CT_DLbls{}; return _bcda }

type CT_NumDataSourceChoice struct {
	NumRef *CT_NumRef
	NumLit *CT_NumData
}

func (_fgcff *CT_PictureStackUnit) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", _fgcff.ValAttr)})
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_afcdf *EG_AreaChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bdfb:
	for {
		_bcagf, _afgbb := d.Token()
		if _afgbb != nil {
			return _afgbb
		}
		switch _abbcg := _bcagf.(type) {
		case _e.StartElement:
			switch _abbcg.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				_afcdf.Grouping = NewCT_Grouping()
				if _dbff := d.DecodeElement(_afcdf.Grouping, &_abbcg); _dbff != nil {
					return _dbff
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_afcdf.VaryColors = NewCT_Boolean()
				if _bcce := d.DecodeElement(_afcdf.VaryColors, &_abbcg); _bcce != nil {
					return _bcce
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_abbfc := NewCT_AreaSer()
				if _gfffb := d.DecodeElement(_abbfc, &_abbcg); _gfffb != nil {
					return _gfffb
				}
				_afcdf.Ser = append(_afcdf.Ser, _abbfc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_afcdf.DLbls = NewCT_DLbls()
				if _ggec := d.DecodeElement(_afcdf.DLbls, &_abbcg); _ggec != nil {
					return _ggec
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_afcdf.DropLines = NewCT_ChartLines()
				if _gfffee := d.DecodeElement(_afcdf.DropLines, &_abbcg); _gfffee != nil {
					return _gfffee
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u0041\u0072\u0065\u0061\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _abbcg.Name)
				if _gccdg := d.Skip(); _gccdg != nil {
					return _gccdg
				}
			}
		case _e.EndElement:
			break _bdfb
		case _e.CharData:
		}
	}
	return nil
}

// ValidateWithPath validates the CT_LogBase and its children, prefixing error messages with path
func (_cgee *CT_LogBase) ValidateWithPath(path string) error {
	if _cgee.ValAttr < 2 {
		return _a.Errorf("%\u0073\u002f\u006d\u002e\u0056\u0061l\u0041\u0074\u0074\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u003e=\u0020\u0032\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025v\u0029", path, _cgee.ValAttr)
	}
	if _cgee.ValAttr > 1000 {
		return _a.Errorf("\u0025\u0073\u002f\u006d\u002e\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003c\u003d\u00201\u0030\u0030\u0030\u0020\u0028h\u0061\u0076e\u0020\u0025\u0076\u0029", path, _cgee.ValAttr)
	}
	return nil
}

func (_edbeg *ST_HoleSize) Validate() error { return _edbeg.ValidateWithPath("") }

// Validate validates the CT_Surface and its children
func (_fbcfg *CT_Surface) Validate() error {
	return _fbcfg.ValidateWithPath("\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065")
}

func (_dagbg ST_DispBlanksAs) String() string {
	switch _dagbg {
	case 0:
		return ""
	case 1:
		return "\u0073\u0070\u0061\u006e"
	case 2:
		return "\u0067\u0061\u0070"
	case 3:
		return "\u007a\u0065\u0072\u006f"
	}
	return ""
}

func (_eafd ST_HPercent) String() string {
	if _eafd.ST_HPercentWithSymbol != nil {
		return _a.Sprintf("\u0025\u0076", *_eafd.ST_HPercentWithSymbol)
	}
	if _eafd.ST_HPercentUShort != nil {
		return _a.Sprintf("\u0025\u0076", *_eafd.ST_HPercentUShort)
	}
	return ""
}

func (_bgcdc ST_ErrValType) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_bgcdc.String(), start)
}

func (_afdbe ST_LegendPos) Validate() error { return _afdbe.ValidateWithPath("") }

type CT_BubbleSer struct {
	Idx              *CT_UnsignedInt
	Order            *CT_UnsignedInt
	Tx               *CT_SerTx
	SpPr             *_bb.CT_ShapeProperties
	InvertIfNegative *CT_Boolean
	DPt              []*CT_DPt
	DLbls            *CT_DLbls
	Trendline        []*CT_Trendline
	ErrBars          []*CT_ErrBars
	XVal             *CT_AxDataSource
	YVal             *CT_NumDataSource
	BubbleSize       *CT_NumDataSource
	Bubble3D         *CT_Boolean
	ExtLst           *CT_ExtensionList
}

func NewCT_Shape() *CT_Shape { _gefad := &CT_Shape{}; return _gefad }

type ST_ErrBarType byte

type ST_ScatterStyle byte

func (_fafe ST_TickLblPos) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_defcg := _e.Attr{}
	_defcg.Name = name
	switch _fafe {
	case ST_TickLblPosUnset:
		_defcg.Value = ""
	case ST_TickLblPosHigh:
		_defcg.Value = "\u0068\u0069\u0067\u0068"
	case ST_TickLblPosLow:
		_defcg.Value = "\u006c\u006f\u0077"
	case ST_TickLblPosNextTo:
		_defcg.Value = "\u006e\u0065\u0078\u0074\u0054\u006f"
	case ST_TickLblPosNone:
		_defcg.Value = "\u006e\u006f\u006e\u0065"
	}
	return _defcg, nil
}

func (_aabb *CT_Protection) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aabb.ChartObject != nil {
		_fbea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0063\u0068\u0061\u0072\u0074\u004f\u0062\u006a\u0065\u0063\u0074"}}
		e.EncodeElement(_aabb.ChartObject, _fbea)
	}
	if _aabb.Data != nil {
		_dagdg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0061\u0074\u0061"}}
		e.EncodeElement(_aabb.Data, _dagdg)
	}
	if _aabb.Formatting != nil {
		_ccdeg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066o\u0072\u006d\u0061\u0074\u0074\u0069\u006e\u0067"}}
		e.EncodeElement(_aabb.Formatting, _ccdeg)
	}
	if _aabb.Selection != nil {
		_cgeeb := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e"}}
		e.EncodeElement(_aabb.Selection, _cgeeb)
	}
	if _aabb.UserInterface != nil {
		_abae := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0075s\u0065\u0072\u0049\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065"}}
		e.EncodeElement(_aabb.UserInterface, _abae)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dbagc ST_PictureFormat) ValidateWithPath(path string) error {
	switch _dbagc {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_dbagc))
	}
	return nil
}

func NewCT_LegendEntry() *CT_LegendEntry {
	_ddaba := &CT_LegendEntry{}
	_ddaba.Idx = NewCT_UnsignedInt()
	return _ddaba
}

func (_ddda *CT_Overlap) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _ddda.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_ddda.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_ChartSpace struct {
	Date1904       *CT_Boolean
	Lang           *CT_TextLanguageID
	RoundedCorners *CT_Boolean
	Style          *CT_Style
	ClrMapOvr      *_bb.CT_ColorMapping
	PivotSource    *CT_PivotSource
	Protection     *CT_Protection
	Chart          *CT_Chart
	SpPr           *_bb.CT_ShapeProperties
	TxPr           *_bb.CT_TextBody
	ExternalData   *CT_ExternalData
	PrintSettings  *CT_PrintSettings
	UserShapes     *CT_RelId
	ExtLst         *CT_ExtensionList
}

const (
	ST_SizeRepresentsUnset ST_SizeRepresents = 0
	ST_SizeRepresentsArea  ST_SizeRepresents = 1
	ST_SizeRepresentsW     ST_SizeRepresents = 2
)

type CT_AxDataSource struct{ Choice *CT_AxDataSourceChoice }

// ValidateWithPath validates the EG_LegendEntryData and its children, prefixing error messages with path
func (_eddca *EG_LegendEntryData) ValidateWithPath(path string) error {
	if _eddca.TxPr != nil {
		if _bfeb := _eddca.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _bfeb != nil {
			return _bfeb
		}
	}
	return nil
}

func (_ebagff ST_SplitType) String() string {
	switch _ebagff {
	case 0:
		return ""
	case 1:
		return "\u0061\u0075\u0074\u006f"
	case 2:
		return "\u0063\u0075\u0073\u0074"
	case 3:
		return "\u0070e\u0072\u0063\u0065\u006e\u0074"
	case 4:
		return "\u0070\u006f\u0073"
	case 5:
		return "\u0076\u0061\u006c"
	}
	return ""
}

func (_cdabf ST_Orientation) MarshalXMLAttr(name _e.Name) (_e.Attr, error) {
	_eedba := _e.Attr{}
	_eedba.Name = name
	switch _cdabf {
	case ST_OrientationUnset:
		_eedba.Value = ""
	case ST_OrientationMaxMin:
		_eedba.Value = "\u006d\u0061\u0078\u004d\u0069\u006e"
	case ST_OrientationMinMax:
		_eedba.Value = "\u006d\u0069\u006e\u004d\u0061\u0078"
	}
	return _eedba, nil
}

func (_ecacef ST_LayoutMode) String() string {
	switch _ecacef {
	case 0:
		return ""
	case 1:
		return "\u0065\u0064\u0067\u0065"
	case 2:
		return "\u0066\u0061\u0063\u0074\u006f\u0072"
	}
	return ""
}

// Validate validates the CT_ManualLayout and its children
func (_bdgee *CT_ManualLayout) Validate() error {
	return _bdgee.ValidateWithPath("\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074")
}

func (_gggcb ST_TimeUnit) ValidateWithPath(path string) error {
	switch _gggcb {
	case 0, 1, 2, 3:
	default:
		return _a.Errorf("\u0025s\u003a\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072a\u006eg\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0025d", path, int(_gggcb))
	}
	return nil
}

const (
	ST_ErrBarTypeUnset ST_ErrBarType = 0
	ST_ErrBarTypeBoth  ST_ErrBarType = 1
	ST_ErrBarTypeMinus ST_ErrBarType = 2
	ST_ErrBarTypePlus  ST_ErrBarType = 3
)

// ValidateWithPath validates the CT_PictureStackUnit and its children, prefixing error messages with path
func (_bcfad *CT_PictureStackUnit) ValidateWithPath(path string) error {
	if _bcfad.ValAttr <= 0 {
		return _a.Errorf("\u0025\u0073\u002fm.\u0056\u0061\u006c\u0041\u0074\u0074\u0072\u0020\u006du\u0073t\u0020b\u0065 \u003e\u0020\u0030\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _bcfad.ValAttr)
	}
	return nil
}

// ValidateWithPath validates the CT_Scaling and its children, prefixing error messages with path
func (_dcbg *CT_Scaling) ValidateWithPath(path string) error {
	if _dcbg.LogBase != nil {
		if _gcda := _dcbg.LogBase.ValidateWithPath(path + "\u002f\u004c\u006f\u0067\u0042\u0061\u0073\u0065"); _gcda != nil {
			return _gcda
		}
	}
	if _dcbg.Orientation != nil {
		if _eedee := _dcbg.Orientation.ValidateWithPath(path + "\u002f\u004f\u0072i\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e"); _eedee != nil {
			return _eedee
		}
	}
	if _dcbg.Max != nil {
		if _cfdf := _dcbg.Max.ValidateWithPath(path + "\u002f\u004d\u0061\u0078"); _cfdf != nil {
			return _cfdf
		}
	}
	if _dcbg.Min != nil {
		if _dedfc := _dcbg.Min.ValidateWithPath(path + "\u002f\u004d\u0069\u006e"); _dedfc != nil {
			return _dedfc
		}
	}
	if _dcbg.ExtLst != nil {
		if _ffbff := _dcbg.ExtLst.ValidateWithPath(path + "\u002fE\u0078\u0074\u004c\u0073\u0074"); _ffbff != nil {
			return _ffbff
		}
	}
	return nil
}

func (_gafea *CT_ManualLayout) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_dddce:
	for {
		_fdbdb, _febce := d.Token()
		if _febce != nil {
			return _febce
		}
		switch _bbea := _fdbdb.(type) {
		case _e.StartElement:
			switch _bbea.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079o\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074"}:
				_gafea.LayoutTarget = NewCT_LayoutTarget()
				if _gcgdb := d.DecodeElement(_gafea.LayoutTarget, &_bbea); _gcgdb != nil {
					return _gcgdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078\u004d\u006fd\u0065"}:
				_gafea.XMode = NewCT_LayoutMode()
				if _dcef := d.DecodeElement(_gafea.XMode, &_bbea); _dcef != nil {
					return _dcef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079\u004d\u006fd\u0065"}:
				_gafea.YMode = NewCT_LayoutMode()
				if _fcfbb := d.DecodeElement(_gafea.YMode, &_bbea); _fcfbb != nil {
					return _fcfbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077\u004d\u006fd\u0065"}:
				_gafea.WMode = NewCT_LayoutMode()
				if _fdef := d.DecodeElement(_gafea.WMode, &_bbea); _fdef != nil {
					return _fdef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u004d\u006fd\u0065"}:
				_gafea.HMode = NewCT_LayoutMode()
				if _eafe := d.DecodeElement(_gafea.HMode, &_bbea); _eafe != nil {
					return _eafe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0078"}:
				_gafea.X = NewCT_Double()
				if _eefffa := d.DecodeElement(_gafea.X, &_bbea); _eefffa != nil {
					return _eefffa
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0079"}:
				_gafea.Y = NewCT_Double()
				if _ageed := d.DecodeElement(_gafea.Y, &_bbea); _ageed != nil {
					return _ageed
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0077"}:
				_gafea.W = NewCT_Double()
				if _egdf := d.DecodeElement(_gafea.W, &_bbea); _egdf != nil {
					return _egdf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068"}:
				_gafea.H = NewCT_Double()
				if _dfggb := d.DecodeElement(_gafea.H, &_bbea); _dfggb != nil {
					return _dfggb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_gafea.ExtLst = NewCT_ExtensionList()
				if _fbef := d.DecodeElement(_gafea.ExtLst, &_bbea); _fbef != nil {
					return _fbef
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074e\u0064\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005f\u004d\u0061\u006eu\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074\u0020\u0025\u0076", _bbea.Name)
				if _ffgdb := d.Skip(); _ffgdb != nil {
					return _ffgdb
				}
			}
		case _e.EndElement:
			break _dddce
		case _e.CharData:
		}
	}
	return nil
}

type CT_PieChart struct {
	VaryColors    *CT_Boolean
	Ser           []*CT_PieSer
	DLbls         *CT_DLbls
	FirstSliceAng *CT_FirstSliceAng
	ExtLst        *CT_ExtensionList
}

func (_fggbe *ST_SecondPieSize) ValidateWithPath(path string) error {
	_fffeg := []string{}
	if _fggbe.ST_SecondPieSizePercent != nil {
		_fffeg = append(_fffeg, "\u0053\u0054\u005fSe\u0063\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0050\u0065\u0072\u0063\u0065\u006e\u0074")
	}
	if _fggbe.ST_SecondPieSizeUShort != nil {
		_fffeg = append(_fffeg, "\u0053\u0054\u005f\u0053ec\u006f\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065\u0055\u0053\u0068\u006fr\u0074")
	}
	if len(_fffeg) > 1 {
		return _a.Errorf("%\u0073\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u006d\u0065\u006d\u0062\u0065r\u0073\u0020\u0073e\u0074:\u0020\u0025\u0076", path, _fffeg)
	}
	return nil
}

// Validate validates the EG_DLblShared and its children
func (_defe *EG_DLblShared) Validate() error {
	return _defe.ValidateWithPath("\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064")
}

func NewCT_DTable() *CT_DTable { _adef := &CT_DTable{}; return _adef }

func (_bdffc ST_LayoutMode) Validate() error { return _bdffc.ValidateWithPath("") }

type EG_LegendEntryData struct{ TxPr *_bb.CT_TextBody }

func (_cefba *Group_DLbl) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _cefba.Layout != nil {
		_aeaga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006c\u0061\u0079\u006f\u0075\u0074"}}
		e.EncodeElement(_cefba.Layout, _aeaga)
	}
	if _cefba.Tx != nil {
		_ebcab := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078"}}
		e.EncodeElement(_cefba.Tx, _ebcab)
	}
	if _cefba.NumFmt != nil {
		_dccgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_cefba.NumFmt, _dccgd)
	}
	if _cefba.SpPr != nil {
		_eabdf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_cefba.SpPr, _eabdf)
	}
	if _cefba.TxPr != nil {
		_aefcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_cefba.TxPr, _aefcg)
	}
	if _cefba.DLblPos != nil {
		_cecbf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0050\u006fs"}}
		e.EncodeElement(_cefba.DLblPos, _cecbf)
	}
	if _cefba.ShowLegendKey != nil {
		_ceddd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073h\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}}
		e.EncodeElement(_cefba.ShowLegendKey, _ceddd)
	}
	if _cefba.ShowVal != nil {
		_acggf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0068\u006f\u0077\u0056\u0061l"}}
		e.EncodeElement(_cefba.ShowVal, _acggf)
	}
	if _cefba.ShowCatName != nil {
		_bcgag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_cefba.ShowCatName, _bcgag)
	}
	if _cefba.ShowSerName != nil {
		_cacfb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}}
		e.EncodeElement(_cefba.ShowSerName, _cacfb)
	}
	if _cefba.ShowPercent != nil {
		_eaacb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}}
		e.EncodeElement(_cefba.ShowPercent, _eaacb)
	}
	if _cefba.ShowBubbleSize != nil {
		_aegd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077B\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_cefba.ShowBubbleSize, _aegd)
	}
	if _cefba.Separator != nil {
		_ffbgf := _e.StartElement{Name: _e.Name{Local: "c\u003a\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072"}}
		_g.AddPreserveSpaceAttr(&_ffbgf, *_cefba.Separator)
		e.EncodeElement(_cefba.Separator, _ffbgf)
	}
	return nil
}

func (_adbb ST_OfPieType) Validate() error { return _adbb.ValidateWithPath("") }

func (_gbcf ST_DispBlanksAs) Validate() error { return _gbcf.ValidateWithPath("") }

// Validate validates the CT_RotX and its children
func (_gdbgc *CT_RotX) Validate() error {
	return _gdbgc.ValidateWithPath("\u0043T\u005f\u0052\u006f\u0074\u0058")
}

func (_ffea *CT_Overlap) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bega := range start.Attr {
		if _bega.Name.Local == "\u0076\u0061\u006c" {
			_gegf, _caedf := ParseUnionST_Overlap(_bega.Value)
			if _caedf != nil {
				return _caedf
			}
			_ffea.ValAttr = &_gegf
			continue
		}
	}
	for {
		_gcbcg, _cbfdb := d.Token()
		if _cbfdb != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073in\u0067\u0020\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070\u003a\u0020%\u0073", _cbfdb)
		}
		if _aade, _dgfe := _gcbcg.(_e.EndElement); _dgfe && _aade.Name == start.Name {
			break
		}
	}
	return nil
}

func NewCT_PivotSource() *CT_PivotSource {
	_ecdf := &CT_PivotSource{}
	_ecdf.FmtId = NewCT_UnsignedInt()
	return _ecdf
}

// ValidateWithPath validates the EG_DLblShared and its children, prefixing error messages with path
func (_fcbaf *EG_DLblShared) ValidateWithPath(path string) error {
	if _fcbaf.NumFmt != nil {
		if _bagdc := _fcbaf.NumFmt.ValidateWithPath(path + "\u002fN\u0075\u006d\u0046\u006d\u0074"); _bagdc != nil {
			return _bagdc
		}
	}
	if _fcbaf.SpPr != nil {
		if _feacc := _fcbaf.SpPr.ValidateWithPath(path + "\u002f\u0053\u0070P\u0072"); _feacc != nil {
			return _feacc
		}
	}
	if _fcbaf.TxPr != nil {
		if _edcdg := _fcbaf.TxPr.ValidateWithPath(path + "\u002f\u0054\u0078P\u0072"); _edcdg != nil {
			return _edcdg
		}
	}
	if _fcbaf.DLblPos != nil {
		if _bfddb := _fcbaf.DLblPos.ValidateWithPath(path + "\u002f\u0044\u004c\u0062\u006c\u0050\u006f\u0073"); _bfddb != nil {
			return _bfddb
		}
	}
	if _fcbaf.ShowLegendKey != nil {
		if _ggbee := _fcbaf.ShowLegendKey.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u004c\u0065\u0067\u0065n\u0064\u004b\u0065\u0079"); _ggbee != nil {
			return _ggbee
		}
	}
	if _fcbaf.ShowVal != nil {
		if _cddf := _fcbaf.ShowVal.ValidateWithPath(path + "\u002f\u0053\u0068\u006f\u0077\u0056\u0061\u006c"); _cddf != nil {
			return _cddf
		}
	}
	if _fcbaf.ShowCatName != nil {
		if _bedaa := _fcbaf.ShowCatName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"); _bedaa != nil {
			return _bedaa
		}
	}
	if _fcbaf.ShowSerName != nil {
		if _aedfb := _fcbaf.ShowSerName.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"); _aedfb != nil {
			return _aedfb
		}
	}
	if _fcbaf.ShowPercent != nil {
		if _gaged := _fcbaf.ShowPercent.ValidateWithPath(path + "\u002f\u0053\u0068o\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"); _gaged != nil {
			return _gaged
		}
	}
	if _fcbaf.ShowBubbleSize != nil {
		if _fdgeea := _fcbaf.ShowBubbleSize.ValidateWithPath(path + "\u002fS\u0068o\u0077\u0042\u0075\u0062\u0062\u006c\u0065\u0053\u0069\u007a\u0065"); _fdgeea != nil {
			return _fdgeea
		}
	}
	return nil
}

type CT_MarkerSize struct{ ValAttr *uint8 }

func (_cdgff ST_TickMark) String() string {
	switch _cdgff {
	case 0:
		return ""
	case 1:
		return "\u0063\u0072\u006fs\u0073"
	case 2:
		return "\u0069\u006e"
	case 3:
		return "\u006e\u006f\u006e\u0065"
	case 4:
		return "\u006f\u0075\u0074"
	}
	return ""
}

// Validate validates the CT_Trendline and its children
func (_aecba *CT_Trendline) Validate() error {
	return _aecba.ValidateWithPath("\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065")
}

func (_bbaa *EG_LineChartShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_bbaa.Grouping = NewCT_Grouping()
_gggbgf:
	for {
		_faffb, _afbfca := d.Token()
		if _afbfca != nil {
			return _afbfca
		}
		switch _eeabe := _faffb.(type) {
		case _e.StartElement:
			switch _eeabe.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _fffgg := d.DecodeElement(_bbaa.Grouping, &_eeabe); _fffgg != nil {
					return _fffgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_bbaa.VaryColors = NewCT_Boolean()
				if _bbffga := d.DecodeElement(_bbaa.VaryColors, &_eeabe); _bbffga != nil {
					return _bbffga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_ecgff := NewCT_LineSer()
				if _aega := d.DecodeElement(_ecgff, &_eeabe); _aega != nil {
					return _aega
				}
				_bbaa.Ser = append(_bbaa.Ser, _ecgff)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_bbaa.DLbls = NewCT_DLbls()
				if _ggaf := d.DecodeElement(_bbaa.DLbls, &_eeabe); _ggaf != nil {
					return _ggaf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_bbaa.DropLines = NewCT_ChartLines()
				if _afdgb := d.DecodeElement(_bbaa.DropLines, &_eeabe); _afdgb != nil {
					return _afdgb
				}
			default:
				_ab.Log.Debug("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0065l\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047\u005f\u004c\u0069\u006e\u0065\u0043\u0068a\u0072\u0074\u0053\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _eeabe.Name)
				if _cbbgd := d.Skip(); _cbbgd != nil {
					return _cbbgd
				}
			}
		case _e.EndElement:
			break _gggbgf
		case _e.CharData:
		}
	}
	return nil
}

// Validate validates the CT_LayoutMode and its children
func (_abef *CT_LayoutMode) Validate() error {
	return _abef.ValidateWithPath("\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065")
}

// ValidateWithPath validates the CT_PageSetup and its children, prefixing error messages with path
func (_gece *CT_PageSetup) ValidateWithPath(path string) error {
	if _gece.PaperHeightAttr != nil {
		if !_ge.ST_PositiveUniversalMeasurePatternRe.MatchString(*_gece.PaperHeightAttr) {
			return _a.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ge.ST_PositiveUniversalMeasurePatternRe, *_gece.PaperHeightAttr)
		}
	}
	if _gece.PaperHeightAttr != nil {
		if !_ge.ST_UniversalMeasurePatternRe.MatchString(*_gece.PaperHeightAttr) {
			return _a.Errorf("\u0025\u0073/\u006d\u002e\u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074\u0041\u0074\u0074\u0072\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027\u0020\u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ge.ST_UniversalMeasurePatternRe, *_gece.PaperHeightAttr)
		}
	}
	if _gece.PaperWidthAttr != nil {
		if !_ge.ST_PositiveUniversalMeasurePatternRe.MatchString(*_gece.PaperWidthAttr) {
			return _a.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ge.ST_PositiveUniversalMeasurePatternRe, *_gece.PaperWidthAttr)
		}
	}
	if _gece.PaperWidthAttr != nil {
		if !_ge.ST_UniversalMeasurePatternRe.MatchString(*_gece.PaperWidthAttr) {
			return _a.Errorf("\u0025s\u002f\u006d.\u0050\u0061\u0070e\u0072\u0057\u0069\u0064\u0074\u0068\u0041t\u0074\u0072\u0020\u006d\u0075\u0073t\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0027\u0025\u0073\u0027 \u0028\u0068\u0061\u0076\u0065\u0020\u0025\u0076\u0029", path, _ge.ST_UniversalMeasurePatternRe, *_gece.PaperWidthAttr)
		}
	}
	if _ceba := _gece.OrientationAttr.ValidateWithPath(path + "\u002f\u004fr\u0069\u0065\u006et\u0061\u0074\u0069\u006f\u006e\u0041\u0074\u0074\u0072"); _ceba != nil {
		return _ceba
	}
	return nil
}

const (
	ST_OrientationUnset  ST_Orientation = 0
	ST_OrientationMaxMin ST_Orientation = 1
	ST_OrientationMinMax ST_Orientation = 2
)

type ST_TimeUnit byte

type CT_Boolean struct{ ValAttr *bool }

func NewCT_ErrBarType() *CT_ErrBarType { _baga := &CT_ErrBarType{}; return _baga }

func (_eabge ST_Orientation) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	return e.EncodeElement(_eabge.String(), start)
}

func (_aegfc *CT_ErrBars) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _aegfc.ErrDir != nil {
		_cdcfc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0072\u0072\u0044\u0069\u0072"}}
		e.EncodeElement(_aegfc.ErrDir, _cdcfc)
	}
	_efgaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065r\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_aegfc.ErrBarType, _efgaf)
	_cfbb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065r\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}}
	e.EncodeElement(_aegfc.ErrValType, _cfbb)
	if _aegfc.NoEndCap != nil {
		_fdff := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}}
		e.EncodeElement(_aegfc.NoEndCap, _fdff)
	}
	if _aegfc.Plus != nil {
		_fgga := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0070\u006c\u0075\u0073"}}
		e.EncodeElement(_aegfc.Plus, _fgga)
	}
	if _aegfc.Minus != nil {
		_ebad := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006d\u0069\u006e\u0075\u0073"}}
		e.EncodeElement(_aegfc.Minus, _ebad)
	}
	if _aegfc.Val != nil {
		_bbeed := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u006c"}}
		e.EncodeElement(_aegfc.Val, _bbeed)
	}
	if _aegfc.SpPr != nil {
		_bgacc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_aegfc.SpPr, _bgacc)
	}
	if _aegfc.ExtLst != nil {
		_ffee := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_aegfc.ExtLst, _ffee)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_eebgg ST_ScatterStyle) Validate() error { return _eebgg.ValidateWithPath("") }

// Validate validates the CT_BarDir and its children
func (_ddg *CT_BarDir) Validate() error {
	return _ddg.ValidateWithPath("\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r")
}

func NewCT_DepthPercent() *CT_DepthPercent { _egca := &CT_DepthPercent{}; return _egca }

// Validate validates the CT_SizeRepresents and its children
func (_fadge *CT_SizeRepresents) Validate() error {
	return _fadge.ValidateWithPath("\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073")
}

func NewCT_ScatterChart() *CT_ScatterChart {
	_fagef := &CT_ScatterChart{}
	_fagef.ScatterStyle = NewCT_ScatterStyle()
	return _fagef
}

func (_dbca *CT_ErrBars) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_dbca.ErrBarType = NewCT_ErrBarType()
	_dbca.ErrValType = NewCT_ErrValType()
_bgad:
	for {
		_gead, _ggae := d.Token()
		if _ggae != nil {
			return _ggae
		}
		switch _baad := _gead.(type) {
		case _e.StartElement:
			switch _baad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0044\u0069\u0072"}:
				_dbca.ErrDir = NewCT_ErrDir()
				if _fade := d.DecodeElement(_dbca.ErrDir, &_baad); _fade != nil {
					return _fade
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065"}:
				if _bedfd := d.DecodeElement(_dbca.ErrBarType, &_baad); _bedfd != nil {
					return _bedfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065"}:
				if _dabd := d.DecodeElement(_dbca.ErrValType, &_baad); _dabd != nil {
					return _dabd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u006f\u0045\u006e\u0064\u0043\u0061\u0070"}:
				_dbca.NoEndCap = NewCT_Boolean()
				if _ccge := d.DecodeElement(_dbca.NoEndCap, &_baad); _ccge != nil {
					return _ccge
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0070\u006c\u0075\u0073"}:
				_dbca.Plus = NewCT_NumDataSource()
				if _abeg := d.DecodeElement(_dbca.Plus, &_baad); _abeg != nil {
					return _abeg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0069\u006eu\u0073"}:
				_dbca.Minus = NewCT_NumDataSource()
				if _cbfd := d.DecodeElement(_dbca.Minus, &_baad); _cbfd != nil {
					return _cbfd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u006c"}:
				_dbca.Val = NewCT_Double()
				if _aaabc := d.DecodeElement(_dbca.Val, &_baad); _aaabc != nil {
					return _aaabc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_dbca.SpPr = _bb.NewCT_ShapeProperties()
				if _ggga := d.DecodeElement(_dbca.SpPr, &_baad); _ggga != nil {
					return _ggga
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_dbca.ExtLst = NewCT_ExtensionList()
				if _dcae := d.DecodeElement(_dbca.ExtLst, &_baad); _dcae != nil {
					return _dcae
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054\u005fE\u0072\u0072\u0042\u0061\u0072\u0073\u0020\u0025\u0076", _baad.Name)
				if _gfcf := d.Skip(); _gfcf != nil {
					return _gfcf
				}
			}
		case _e.EndElement:
			break _bgad
		case _e.CharData:
		}
	}
	return nil
}

type ST_LegendPos byte

func (_cgeca *ST_DLblPos) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_eccaf, _cgbgd := d.Token()
	if _cgbgd != nil {
		return _cgbgd
	}
	if _deafc, _ebccg := _eccaf.(_e.EndElement); _ebccg && _deafc.Name == start.Name {
		*_cgeca = 1
		return nil
	}
	if _egegg, _bgbdf := _eccaf.(_e.CharData); !_bgbdf {
		return _a.Errorf("\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0063\u0068a\u0072\u0020\u0064\u0061\u0074\u0061\u002c\u0020\u0067\u006ft\u0020\u0025\u0054", _eccaf)
	} else {
		switch string(_egegg) {
		case "":
			*_cgeca = 0
		case "\u0062e\u0073\u0074\u0046\u0069\u0074":
			*_cgeca = 1
		case "\u0062":
			*_cgeca = 2
		case "\u0063\u0074\u0072":
			*_cgeca = 3
		case "\u0069\u006e\u0042\u0061\u0073\u0065":
			*_cgeca = 4
		case "\u0069\u006e\u0045n\u0064":
			*_cgeca = 5
		case "\u006c":
			*_cgeca = 6
		case "\u006f\u0075\u0074\u0045\u006e\u0064":
			*_cgeca = 7
		case "\u0072":
			*_cgeca = 8
		case "\u0074":
			*_cgeca = 9
		}
	}
	_eccaf, _cgbgd = d.Token()
	if _cgbgd != nil {
		return _cgbgd
	}
	if _faeef, _dgffa := _eccaf.(_e.EndElement); _dgffa && _faeef.Name == start.Name {
		return nil
	}
	return _a.Errorf("\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0065\u006e\u0064\u0020\u0065\u006ce\u006de\u006e\u0074\u002c\u0020\u0067\u006f\u0074 \u0025\u0076", _eccaf)
}

func (_gacgf *CT_Perspective) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _gacgf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_gacgf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_abdb ST_TimeUnit) String() string {
	switch _abdb {
	case 0:
		return ""
	case 1:
		return "\u0064\u0061\u0079\u0073"
	case 2:
		return "\u006d\u006f\u006e\u0074\u0068\u0073"
	case 3:
		return "\u0079\u0065\u0061r\u0073"
	}
	return ""
}

func (_dfbcc *CT_UpDownBars) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dfbcc.GapWidth != nil {
		_fdegc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0061\u0070\u0057\u0069\u0064\u0074\u0068"}}
		e.EncodeElement(_dfbcc.GapWidth, _fdegc)
	}
	if _dfbcc.UpBars != nil {
		_cafea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0075\u0070\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_dfbcc.UpBars, _cafea)
	}
	if _dfbcc.DownBars != nil {
		_edafc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}}
		e.EncodeElement(_dfbcc.DownBars, _edafc)
	}
	if _dfbcc.ExtLst != nil {
		_decag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dfbcc.ExtLst, _decag)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_LegendEntry struct {
	Idx    *CT_UnsignedInt
	Choice *CT_LegendEntryChoice
	ExtLst *CT_ExtensionList
}

func (_efbe *CT_LineChart) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_efbe.Grouping = NewCT_Grouping()
_deae:
	for {
		_gege, _fdcaa := d.Token()
		if _fdcaa != nil {
			return _fdcaa
		}
		switch _egbd := _gege.(type) {
		case _e.StartElement:
			switch _egbd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}:
				if _afbc := d.DecodeElement(_efbe.Grouping, &_egbd); _afbc != nil {
					return _afbc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0076\u0061\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}:
				_efbe.VaryColors = NewCT_Boolean()
				if _fgbcb := d.DecodeElement(_efbe.VaryColors, &_egbd); _fgbcb != nil {
					return _fgbcb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0065\u0072"}:
				_gggad := NewCT_LineSer()
				if _daafb := d.DecodeElement(_gggad, &_egbd); _daafb != nil {
					return _daafb
				}
				_efbe.Ser = append(_efbe.Ser, _gggad)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064\u004c\u0062l\u0073"}:
				_efbe.DLbls = NewCT_DLbls()
				if _agbb := d.DecodeElement(_efbe.DLbls, &_egbd); _agbb != nil {
					return _agbb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064r\u006f\u0070\u004c\u0069\u006e\u0065s"}:
				_efbe.DropLines = NewCT_ChartLines()
				if _cgcc := d.DecodeElement(_efbe.DropLines, &_egbd); _cgcc != nil {
					return _cgcc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0068\u0069\u004c\u006f\u0077\u004c\u0069\u006e\u0065\u0073"}:
				_efbe.HiLowLines = NewCT_ChartLines()
				if _eaef := d.DecodeElement(_efbe.HiLowLines, &_egbd); _eaef != nil {
					return _eaef
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0075\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073"}:
				_efbe.UpDownBars = NewCT_UpDownBars()
				if _aafb := d.DecodeElement(_efbe.UpDownBars, &_egbd); _aafb != nil {
					return _aafb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006d\u0061\u0072\u006b\u0065\u0072"}:
				_efbe.Marker = NewCT_Boolean()
				if _eaefd := d.DecodeElement(_efbe.Marker, &_egbd); _eaefd != nil {
					return _eaefd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u006d\u006f\u006f\u0074\u0068"}:
				_efbe.Smooth = NewCT_Boolean()
				if _dfgg := d.DecodeElement(_efbe.Smooth, &_egbd); _dfgg != nil {
					return _dfgg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0061\u0078\u0049\u0064"}:
				_cfbc := NewCT_UnsignedInt()
				if _afdb := d.DecodeElement(_cfbc, &_egbd); _afdb != nil {
					return _afdb
				}
				_efbe.AxId = append(_efbe.AxId, _cfbc)
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0065\u0078\u0074\u004c\u0073\u0074"}:
				_efbe.ExtLst = NewCT_ExtensionList()
				if _fcfcf := d.DecodeElement(_efbe.ExtLst, &_egbd); _fcfcf != nil {
					return _fcfcf
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0043\u0054_L\u0069\u006ee\u0043\u0068\u0061\u0072\u0074\u0020\u0025\u0076", _egbd.Name)
				if _bacdd := d.Skip(); _bacdd != nil {
					return _bacdd
				}
			}
		case _e.EndElement:
			break _deae
		case _e.CharData:
		}
	}
	return nil
}

type CT_MultiLvlStrData struct {
	PtCount *CT_UnsignedInt
	Lvl     []*CT_Lvl
	ExtLst  *CT_ExtensionList
}

func (_fbbdc *ST_TickMark) UnmarshalXMLAttr(attr _e.Attr) error {
	switch attr.Value {
	case "":
		*_fbbdc = 0
	case "\u0063\u0072\u006fs\u0073":
		*_fbbdc = 1
	case "\u0069\u006e":
		*_fbbdc = 2
	case "\u006e\u006f\u006e\u0065":
		*_fbbdc = 3
	case "\u006f\u0075\u0074":
		*_fbbdc = 4
	}
	return nil
}

func (_faff *CT_PivotFmt) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_agcbc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0069d\u0078"}}
	e.EncodeElement(_faff.Idx, _agcbc)
	if _faff.SpPr != nil {
		_fdcb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_faff.SpPr, _fdcb)
	}
	if _faff.TxPr != nil {
		_gefe := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_faff.TxPr, _gefe)
	}
	if _faff.Marker != nil {
		_cbac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006d\u0061\u0072\u006b\u0065\u0072"}}
		e.EncodeElement(_faff.Marker, _cbac)
	}
	if _faff.DLbl != nil {
		_aefdb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u004c\u0062\u006c"}}
		e.EncodeElement(_faff.DLbl, _aefdb)
	}
	if _faff.ExtLst != nil {
		_cgaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_faff.ExtLst, _cgaa)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_cfed *CT_BubbleChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _cfed.VaryColors != nil {
		_gfg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_cfed.VaryColors, _gfg)
	}
	if _cfed.Ser != nil {
		_egc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _gdge := range _cfed.Ser {
			e.EncodeElement(_gdge, _egc)
		}
	}
	if _cfed.DLbls != nil {
		_eabf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_cfed.DLbls, _eabf)
	}
	if _cfed.Bubble3D != nil {
		_dddc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0033\u0044"}}
		e.EncodeElement(_cfed.Bubble3D, _dddc)
	}
	if _cfed.BubbleScale != nil {
		_adcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065"}}
		e.EncodeElement(_cfed.BubbleScale, _adcg)
	}
	if _cfed.ShowNegBubbles != nil {
		_fae := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0068\u006f\u0077N\u0065\u0067\u0042\u0075\u0062\u0062\u006c\u0065\u0073"}}
		e.EncodeElement(_cfed.ShowNegBubbles, _fae)
	}
	if _cfed.SizeRepresents != nil {
		_dcg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003as\u0069\u007a\u0065R\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073"}}
		e.EncodeElement(_cfed.SizeRepresents, _dcg)
	}
	_gbgc := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	for _, _fbg := range _cfed.AxId {
		e.EncodeElement(_fbg, _gbgc)
	}
	if _cfed.ExtLst != nil {
		_ffafb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_cfed.ExtLst, _ffafb)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_ChartLines and its children
func (_gaec *CT_ChartLines) Validate() error {
	return _gaec.ValidateWithPath("\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073")
}

const (
	ST_LblAlgnUnset ST_LblAlgn = 0
	ST_LblAlgnCtr   ST_LblAlgn = 1
	ST_LblAlgnL     ST_LblAlgn = 2
	ST_LblAlgnR     ST_LblAlgn = 3
)

func (_dcfc *CT_NumVal) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0069\u0064\u0078"}, Value: _a.Sprintf("\u0025\u0076", _dcfc.IdxAttr)})
	if _dcfc.FormatCodeAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0066\u006f\u0072\u006d\u0061\u0074\u0043\u006f\u0064\u0065"}, Value: _a.Sprintf("\u0025\u0076", *_dcfc.FormatCodeAttr)})
	}
	e.EncodeToken(start)
	_daeaf := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076"}}
	_g.AddPreserveSpaceAttr(&_daeaf, _dcfc.V)
	e.EncodeElement(_dcfc.V, _daeaf)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

// Validate validates the CT_Bar3DChart and its children
func (_degd *CT_Bar3DChart) Validate() error {
	return _degd.ValidateWithPath("\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074")
}

// ValidateWithPath validates the CT_DispBlanksAs and its children, prefixing error messages with path
func (_fggf *CT_DispBlanksAs) ValidateWithPath(path string) error {
	if _edfc := _fggf.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _edfc != nil {
		return _edfc
	}
	return nil
}

func (_fbeaf ST_Crosses) Validate() error { return _fbeaf.ValidateWithPath("") }

func (_gdcgdc ST_ErrBarType) String() string {
	switch _gdcgdc {
	case 0:
		return ""
	case 1:
		return "\u0062\u006f\u0074\u0068"
	case 2:
		return "\u006d\u0069\u006eu\u0073"
	case 3:
		return "\u0070\u006c\u0075\u0073"
	}
	return ""
}

// Validate validates the CT_PageMargins and its children
func (_afadg *CT_PageMargins) Validate() error {
	return _afadg.ValidateWithPath("\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073")
}

// ValidateWithPath validates the CT_Extension and its children, prefixing error messages with path
func (_acafd *CT_Extension) ValidateWithPath(path string) error { return nil }

func (_fbfff *Group_DLbl) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
_bbfffd:
	for {
		_ggdga, _abagc := d.Token()
		if _abagc != nil {
			return _abagc
		}
		switch _gebcd := _ggdga.(type) {
		case _e.StartElement:
			switch _gebcd.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006c\u0061\u0079\u006f\u0075\u0074"}:
				_fbfff.Layout = NewCT_Layout()
				if _dfaedd := d.DecodeElement(_fbfff.Layout, &_gebcd); _dfaedd != nil {
					return _dfaedd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_fbfff.Tx = NewCT_Tx()
				if _dcfe := d.DecodeElement(_fbfff.Tx, &_gebcd); _dcfe != nil {
					return _dcfe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006e\u0075\u006d\u0046\u006d\u0074"}:
				_fbfff.NumFmt = NewCT_NumFmt()
				if _gdgf := d.DecodeElement(_fbfff.NumFmt, &_gebcd); _gdgf != nil {
					return _gdgf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_fbfff.SpPr = _bb.NewCT_ShapeProperties()
				if _ddbdb := d.DecodeElement(_fbfff.SpPr, &_gebcd); _ddbdb != nil {
					return _ddbdb
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078\u0050\u0072"}:
				_fbfff.TxPr = _bb.NewCT_TextBody()
				if _eeadf := d.DecodeElement(_fbfff.TxPr, &_gebcd); _eeadf != nil {
					return _eeadf
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0064L\u0062\u006c\u0050\u006f\u0073"}:
				_fbfff.DLblPos = NewCT_DLblPos()
				if _fcfag := d.DecodeElement(_fbfff.DLblPos, &_gebcd); _fcfag != nil {
					return _fcfag
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u004c\u0065\u0067\u0065\u006e\u0064\u004b\u0065\u0079"}:
				_fbfff.ShowLegendKey = NewCT_Boolean()
				if _cggdc := d.DecodeElement(_fbfff.ShowLegendKey, &_gebcd); _cggdc != nil {
					return _cggdc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073h\u006f\u0077\u0056\u0061\u006c"}:
				_fbfff.ShowVal = NewCT_Boolean()
				if _caegc := d.DecodeElement(_fbfff.ShowVal, &_gebcd); _caegc != nil {
					return _caegc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0043\u0061\u0074\u004e\u0061\u006d\u0065"}:
				_fbfff.ShowCatName = NewCT_Boolean()
				if _fgegg := d.DecodeElement(_fbfff.ShowCatName, &_gebcd); _fgegg != nil {
					return _fgegg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0053\u0065\u0072\u004e\u0061\u006d\u0065"}:
				_fbfff.ShowSerName = NewCT_Boolean()
				if _cccbe := d.DecodeElement(_fbfff.ShowSerName, &_gebcd); _cccbe != nil {
					return _cccbe
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "s\u0068\u006f\u0077\u0050\u0065\u0072\u0063\u0065\u006e\u0074"}:
				_fbfff.ShowPercent = NewCT_Boolean()
				if _dffea := d.DecodeElement(_fbfff.ShowPercent, &_gebcd); _dffea != nil {
					return _dffea
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0068\u006f\u0077\u0042\u0075\u0062\u0062\u006ce\u0053\u0069\u007a\u0065"}:
				_fbfff.ShowBubbleSize = NewCT_Boolean()
				if _degdd := d.DecodeElement(_fbfff.ShowBubbleSize, &_gebcd); _degdd != nil {
					return _degdd
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073e\u0070\u0061\u0072\u0061\u0074\u006fr"}:
				_fbfff.Separator = new(string)
				if _cdaed := d.DecodeElement(_fbfff.Separator, &_gebcd); _cdaed != nil {
					return _cdaed
				}
			default:
				_ab.Log.Debug("\u0073k\u0069\u0070p\u0069\u006e\u0067 \u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064\u0020\u0065\u006ce\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0047\u0072\u006fu\u0070\u005f\u0044\u004c\u0062\u006c\u0020\u0025\u0076", _gebcd.Name)
				if _cbcb := d.Skip(); _cbcb != nil {
					return _cbcb
				}
			}
		case _e.EndElement:
			break _bbfffd
		case _e.CharData:
		}
	}
	return nil
}

func (_defba *CT_HoleSize) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _bbbfbe := range start.Attr {
		if _bbbfbe.Name.Local == "\u0076\u0061\u006c" {
			_eecc, _baadc := ParseUnionST_HoleSize(_bbbfbe.Value)
			if _baadc != nil {
				return _baadc
			}
			_defba.ValAttr = &_eecc
			continue
		}
	}
	for {
		_bffce, _eaged := d.Token()
		if _eaged != nil {
			return _a.Errorf("\u0070\u0061\u0072si\u006e\u0067\u0020\u0043\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0073", _eaged)
		}
		if _abecda, _adgcag := _bffce.(_e.EndElement); _adgcag && _abecda.Name == start.Name {
			break
		}
	}
	return nil
}

func (_cgbee *CT_SizeRepresents) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _eege := range start.Attr {
		if _eege.Name.Local == "\u0076\u0061\u006c" {
			_cgbee.ValAttr.UnmarshalXMLAttr(_eege)
			continue
		}
	}
	for {
		_dacbc, _gggf := d.Token()
		if _gggf != nil {
			return _a.Errorf("\u0070\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0073: \u0025\u0073", _gggf)
		}
		if _eeee, _egega := _dacbc.(_e.EndElement); _egega && _eeee.Name == start.Name {
			break
		}
	}
	return nil
}

type Chart struct{ CT_RelId }

const (
	ST_AxPosUnset ST_AxPos = 0
	ST_AxPosB     ST_AxPos = 1
	ST_AxPosL     ST_AxPos = 2
	ST_AxPosR     ST_AxPos = 3
	ST_AxPosT     ST_AxPos = 4
)

func (_ecda *EG_SerShared) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	_ecda.Idx = NewCT_UnsignedInt()
	_ecda.Order = NewCT_UnsignedInt()
_faebgc:
	for {
		_bafc, _ccgc := d.Token()
		if _ccgc != nil {
			return _ccgc
		}
		switch _cfad := _bafc.(type) {
		case _e.StartElement:
			switch _cfad.Name {
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0069\u0064\u0078"}:
				if _ddebg := d.DecodeElement(_ecda.Idx, &_cfad); _ddebg != nil {
					return _ddebg
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u006f\u0072\u0064e\u0072"}:
				if _acfc := d.DecodeElement(_ecda.Order, &_cfad); _acfc != nil {
					return _acfc
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0074\u0078"}:
				_ecda.Tx = NewCT_SerTx()
				if _fdaab := d.DecodeElement(_ecda.Tx, &_cfad); _fdaab != nil {
					return _fdaab
				}
			case _e.Name{Space: "\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}, _e.Name{Space: "\u0068\u0074\u0074p\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0063\u006c\u0063\u002e\u006f\u0072\u0067\u002f\u006f\u006f\u0078\u006d\u006c\u002f\u0064\u0072\u0061\u0077\u0069\u006eg\u006d\u006c\u002f\u0063\u0068\u0061\u0072\u0074", Local: "\u0073\u0070\u0050\u0072"}:
				_ecda.SpPr = _bb.NewCT_ShapeProperties()
				if _cffaf := d.DecodeElement(_ecda.SpPr, &_cfad); _cffaf != nil {
					return _cffaf
				}
			default:
				_ab.Log.Debug("s\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075n\u0073\u0075\u0070\u0070\u006f\u0072\u0074ed\u0020\u0065\u006c\u0065m\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u0047_S\u0065\u0072S\u0068\u0061\u0072\u0065\u0064\u0020\u0025\u0076", _cfad.Name)
				if _gbfaa := d.Skip(); _gbfaa != nil {
					return _gbfaa
				}
			}
		case _e.EndElement:
			break _faebgc
		case _e.CharData:
		}
	}
	return nil
}

type CT_PictureFormat struct{ ValAttr ST_PictureFormat }

func NewCT_CustSplit() *CT_CustSplit { _eda := &CT_CustSplit{}; return _eda }

func (_effdg *EG_AxShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_bfdac := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0061\u0078\u0049\u0064"}}
	e.EncodeElement(_effdg.AxId, _bfdac)
	_adfcf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0073\u0063\u0061\u006c\u0069\u006eg"}}
	e.EncodeElement(_effdg.Scaling, _adfcf)
	if _effdg.Delete != nil {
		_adbg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0064\u0065\u006c\u0065\u0074\u0065"}}
		e.EncodeElement(_effdg.Delete, _adbg)
	}
	_cffeed := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0061\u0078\u0050\u006f\u0073"}}
	e.EncodeElement(_effdg.AxPos, _cffeed)
	if _effdg.MajorGridlines != nil {
		_cdcd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0061\u006a\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_effdg.MajorGridlines, _cdcd)
	}
	if _effdg.MinorGridlines != nil {
		_adeaa := _e.StartElement{Name: _e.Name{Local: "\u0063\u003am\u0069\u006e\u006fr\u0047\u0072\u0069\u0064\u006c\u0069\u006e\u0065\u0073"}}
		e.EncodeElement(_effdg.MinorGridlines, _adeaa)
	}
	if _effdg.Title != nil {
		_geag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0074\u0069\u0074\u006c\u0065"}}
		e.EncodeElement(_effdg.Title, _geag)
	}
	if _effdg.NumFmt != nil {
		_gfecd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u006e\u0075\u006d\u0046\u006d\u0074"}}
		e.EncodeElement(_effdg.NumFmt, _gfecd)
	}
	if _effdg.MajorTickMark != nil {
		_aefe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006da\u006a\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_effdg.MajorTickMark, _aefe)
	}
	if _effdg.MinorTickMark != nil {
		_bbgd := _e.StartElement{Name: _e.Name{Local: "\u0063:\u006di\u006e\u006f\u0072\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b"}}
		e.EncodeElement(_effdg.MinorTickMark, _bbgd)
	}
	if _effdg.TickLblPos != nil {
		_gggceg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074i\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073"}}
		e.EncodeElement(_effdg.TickLblPos, _gggceg)
	}
	if _effdg.SpPr != nil {
		_beccg := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0070\u0050\u0072"}}
		e.EncodeElement(_effdg.SpPr, _beccg)
	}
	if _effdg.TxPr != nil {
		_egbce := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0074\u0078\u0050\u0072"}}
		e.EncodeElement(_effdg.TxPr, _egbce)
	}
	_gbgda := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0063\u0072\u006f\u0073\u0073\u0041x"}}
	e.EncodeElement(_effdg.CrossAx, _gbgda)
	if _effdg.Choice != nil {
		_effdg.Choice.MarshalXML(e, _e.StartElement{})
	}
	return nil
}

type ST_SizeRepresents byte

func (_dabfg *CT_DoughnutChart) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	if _dabfg.VaryColors != nil {
		_fage := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dabfg.VaryColors, _fage)
	}
	if _dabfg.Ser != nil {
		_afeb := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _dddf := range _dabfg.Ser {
			e.EncodeElement(_dddf, _afeb)
		}
	}
	if _dabfg.DLbls != nil {
		_fcdag := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dabfg.DLbls, _fcdag)
	}
	if _dabfg.FirstSliceAng != nil {
		_daaf := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0066i\u0072\u0073\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067"}}
		e.EncodeElement(_dabfg.FirstSliceAng, _daaf)
	}
	if _dabfg.HoleSize != nil {
		_agea := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0068\u006f\u006c\u0065\u0053\u0069\u007a\u0065"}}
		e.EncodeElement(_dabfg.HoleSize, _agea)
	}
	if _dabfg.ExtLst != nil {
		_bfde := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_dabfg.ExtLst, _bfde)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dcbfd *ST_HPercent) Validate() error { return _dcbfd.ValidateWithPath("") }

func NewCT_AxPos() *CT_AxPos { _gdbf := &CT_AxPos{}; _gdbf.ValAttr = ST_AxPos(1); return _gdbf }

func (_eadff *CT_StrRef) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	e.EncodeToken(start)
	_ebdgd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0066"}}
	_g.AddPreserveSpaceAttr(&_ebdgd, _eadff.F)
	e.EncodeElement(_eadff.F, _ebdgd)
	if _eadff.StrCache != nil {
		_dgcfd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073\u0074\u0072\u0043\u0061\u0063\u0068\u0065"}}
		e.EncodeElement(_eadff.StrCache, _dgcfd)
	}
	if _eadff.ExtLst != nil {
		_acge := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0065\u0078\u0074\u004c\u0073\u0074"}}
		e.EncodeElement(_eadff.ExtLst, _acge)
	}
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

func (_dcfa *EG_BarChartShared) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	_dfagd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0062\u0061\u0072\u0044\u0069\u0072"}}
	e.EncodeElement(_dcfa.BarDir, _dfagd)
	if _dcfa.Grouping != nil {
		_cffag := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0067\u0072\u006f\u0075\u0070\u0069\u006e\u0067"}}
		e.EncodeElement(_dcfa.Grouping, _cffag)
	}
	if _dcfa.VaryColors != nil {
		_bbdd := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0076a\u0072\u0079\u0043\u006f\u006c\u006f\u0072\u0073"}}
		e.EncodeElement(_dcfa.VaryColors, _bbdd)
	}
	if _dcfa.Ser != nil {
		_aada := _e.StartElement{Name: _e.Name{Local: "\u0063\u003a\u0073e\u0072"}}
		for _, _aedcg := range _dcfa.Ser {
			e.EncodeElement(_aedcg, _aada)
		}
	}
	if _dcfa.DLbls != nil {
		_abgfe := _e.StartElement{Name: _e.Name{Local: "\u0063:\u0064\u004c\u0062\u006c\u0073"}}
		e.EncodeElement(_dcfa.DLbls, _abgfe)
	}
	return nil
}

func (_agdcbc *ST_Thickness) Validate() error { return _agdcbc.ValidateWithPath("") }

const ST_SecondPieSizePercentPattern = "\u0030\u002a\u0028\u0028\u005b\u0035\u002d9\u005d\u0029\u007c(\u005b\u0031\u002d\u0039]\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0028\u0031\u005b\u0030\u002d\u0039\u005d\u005b\u0030\u002d\u0039\u005d\u0029\u007c\u0032\u0030\u0030\u0029\u0025"

// ValidateWithPath validates the CT_UnsignedInt and its children, prefixing error messages with path
func (_bedea *CT_UnsignedInt) ValidateWithPath(path string) error { return nil }

func NewCT_SizeRepresents() *CT_SizeRepresents { _fafca := &CT_SizeRepresents{}; return _fafca }

const (
	ST_MarkerStyleUnset    ST_MarkerStyle = 0
	ST_MarkerStyleCircle   ST_MarkerStyle = 1
	ST_MarkerStyleDash     ST_MarkerStyle = 2
	ST_MarkerStyleDiamond  ST_MarkerStyle = 3
	ST_MarkerStyleDot      ST_MarkerStyle = 4
	ST_MarkerStyleNone     ST_MarkerStyle = 5
	ST_MarkerStylePicture  ST_MarkerStyle = 6
	ST_MarkerStylePlus     ST_MarkerStyle = 7
	ST_MarkerStyleSquare   ST_MarkerStyle = 8
	ST_MarkerStyleStar     ST_MarkerStyle = 9
	ST_MarkerStyleTriangle ST_MarkerStyle = 10
	ST_MarkerStyleX        ST_MarkerStyle = 11
	ST_MarkerStyleAuto     ST_MarkerStyle = 12
)

// ValidateWithPath validates the CT_PictureFormat and its children, prefixing error messages with path
func (_fccd *CT_PictureFormat) ValidateWithPath(path string) error {
	if _fccd.ValAttr == ST_PictureFormatUnset {
		return _a.Errorf("\u0025\u0073\u002fV\u0061\u006c\u0041\u0074t\u0072\u0020\u0069\u0073\u0020\u0061\u0020m\u0061\u006e\u0064\u0061\u0074\u006f\u0072\u0079\u0020\u0066\u0069\u0065\u006c\u0064", path)
	}
	if _gaaa := _fccd.ValAttr.ValidateWithPath(path + "\u002f\u0056\u0061\u006c\u0041\u0074\u0074\u0072"); _gaaa != nil {
		return _gaaa
	}
	return nil
}

func (_geaf *CT_HoleSize) MarshalXML(e *_e.Encoder, start _e.StartElement) error {
	if _geaf.ValAttr != nil {
		start.Attr = append(start.Attr, _e.Attr{Name: _e.Name{Local: "\u0076\u0061\u006c"}, Value: _a.Sprintf("\u0025\u0076", *_geaf.ValAttr)})
	}
	e.EncodeToken(start)
	e.EncodeToken(_e.EndElement{Name: start.Name})
	return nil
}

type CT_NumFmt struct {
	FormatCodeAttr   string
	SourceLinkedAttr *bool
}

func (_cgbb *CT_BubbleScale) UnmarshalXML(d *_e.Decoder, start _e.StartElement) error {
	for _, _gcga := range start.Attr {
		if _gcga.Name.Local == "\u0076\u0061\u006c" {
			_ebcg, _dda := ParseUnionST_BubbleScale(_gcga.Value)
			if _dda != nil {
				return _dda
			}
			_cgbb.ValAttr = &_ebcg
			continue
		}
	}
	for {
		_eeb, _ceeg := d.Token()
		if _ceeg != nil {
			return _a.Errorf("\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0063\u0061\u006c\u0065:\u0020\u0025\u0073", _ceeg)
		}
		if _aece, _gcgg := _eeb.(_e.EndElement); _gcgg && _aece.Name == start.Name {
			break
		}
	}
	return nil
}

func init() {
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u006f\u006f\u006c\u0065\u0061\u006e", NewCT_Boolean)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u006f\u0075\u0062\u006ce", NewCT_Double)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u006e\u0073\u0069\u0067\u006ee\u0064\u0049\u006e\u0074", NewCT_UnsignedInt)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0065\u006c\u0049\u0064", NewCT_RelId)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fE\u0078\u0074\u0065\u006e\u0073\u0069\u006f\u006e", NewCT_Extension)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0045\u0078\u0074e\u006e\u0073\u0069\u006f\u006e\u004c\u0069\u0073\u0074", NewCT_ExtensionList)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0056\u0061l", NewCT_NumVal)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004e\u0075\u006d\u0044\u0061\u0074\u0061", NewCT_NumData)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0052\u0065f", NewCT_NumRef)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u004e\u0075\u006dD\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_NumDataSource)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0056\u0061l", NewCT_StrVal)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0072\u0044\u0061\u0074\u0061", NewCT_StrData)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u0074\u0072\u0052\u0065f", NewCT_StrRef)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0078", NewCT_Tx)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0065\u0078\u0074\u004c\u0061\u006e\u0067\u0075a\u0067\u0065\u0049\u0044", NewCT_TextLanguageID)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0076\u006c", NewCT_Lvl)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0075\u006c\u0074\u0069\u004cv\u006c\u0053t\u0072\u0044\u0061\u0074\u0061", NewCT_MultiLvlStrData)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0075\u006c\u0074\u0069\u004c\u0076\u006c\u0053t\u0072\u0052\u0065\u0066", NewCT_MultiLvlStrRef)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fA\u0078\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065", NewCT_AxDataSource)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0054\u0078", NewCT_SerTx)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fL\u0061\u0079\u006f\u0075\u0074\u0054\u0061\u0072\u0067\u0065\u0074", NewCT_LayoutTarget)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0061\u0079\u006f\u0075\u0074\u004d\u006f\u0064\u0065", NewCT_LayoutMode)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fM\u0061\u006e\u0075\u0061\u006c\u004c\u0061\u0079\u006f\u0075\u0074", NewCT_ManualLayout)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0061\u0079\u006f\u0075t", NewCT_Layout)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0074\u006c\u0065", NewCT_Title)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0058", NewCT_RotX)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_HPercent)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0052\u006f\u0074\u0059", NewCT_RotY)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0065\u0070\u0074\u0068\u0050\u0065\u0072\u0063\u0065\u006e\u0074", NewCT_DepthPercent)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0065\u0072\u0073\u0070\u0065c\u0074\u0069\u0076\u0065", NewCT_Perspective)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0056\u0069\u0065\u0077\u0033D", NewCT_View3D)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065", NewCT_Surface)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0068\u0069\u0063\u006b\u006e\u0065\u0073\u0073", NewCT_Thickness)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0054\u0061\u0062\u006ce", NewCT_DTable)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fG\u0061\u0070\u0041\u006d\u006f\u0075\u006e\u0074", NewCT_GapAmount)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0076\u0065\u0072\u006c\u0061\u0070", NewCT_Overlap)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065S\u0063\u0061\u006c\u0065", NewCT_BubbleScale)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0069\u007a\u0065\u0052\u0065\u0070\u0072\u0065s\u0065\u006e\u0074\u0073", NewCT_SizeRepresents)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0046\u0069\u0072s\u0074\u0053\u006c\u0069\u0063\u0065\u0041\u006e\u0067", NewCT_FirstSliceAng)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0048\u006f\u006c\u0065\u0053\u0069\u007a\u0065", NewCT_HoleSize)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fS\u0070\u006c\u0069\u0074\u0054\u0079\u0070\u0065", NewCT_SplitType)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fC\u0075\u0073\u0074\u0053\u0070\u006c\u0069\u0074", NewCT_CustSplit)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0053\u0065\u0063o\u006e\u0064\u0050\u0069\u0065\u0053\u0069\u007a\u0065", NewCT_SecondPieSize)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004e\u0075\u006d\u0046\u006dt", NewCT_NumFmt)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0062\u006c\u0041\u006c\u0067\u006e", NewCT_LblAlgn)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_DLblPos)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u004c\u0062\u006c", NewCT_DLbl)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u004c\u0062\u006c\u0073", NewCT_DLbls)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072S\u0074\u0079\u006c\u0065", NewCT_MarkerStyle)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004d\u0061\u0072\u006b\u0065\u0072\u0053\u0069\u007a\u0065", NewCT_MarkerSize)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004d\u0061\u0072\u006b\u0065r", NewCT_Marker)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0044\u0050\u0074", NewCT_DPt)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0054\u0072\u0065n\u0064\u006c\u0069\u006e\u0065\u0054\u0079\u0070\u0065", NewCT_TrendlineType)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0064\u0065\u0072", NewCT_Order)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0065\u0072\u0069\u006fd", NewCT_Period)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065\u004c\u0062\u006c", NewCT_TrendlineLbl)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fT\u0072\u0065\u006e\u0064\u006c\u0069\u006e\u0065", NewCT_Trendline)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0045\u0072\u0072\u0044\u0069r", NewCT_ErrDir)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0054\u0079\u0070\u0065", NewCT_ErrBarType)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0056\u0061\u006c\u0054\u0079\u0070\u0065", NewCT_ErrValType)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0045\u0072\u0072\u0042\u0061\u0072\u0073", NewCT_ErrBars)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fU\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072", NewCT_UpDownBar)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0055\u0070\u0044\u006f\u0077\u006e\u0042\u0061\u0072\u0073", NewCT_UpDownBars)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0053\u0065\u0072", NewCT_LineSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0065\u0072", NewCT_ScatterSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0065\u0072", NewCT_RadarSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0053\u0065r", NewCT_BarSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0053\u0065\u0072", NewCT_AreaSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0050\u0069\u0065\u0053\u0065r", NewCT_PieSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fB\u0075\u0062\u0062\u006c\u0065\u0053\u0065\u0072", NewCT_BubbleSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0053\u0065\u0072", NewCT_SurfaceSer)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0047\u0072\u006f\u0075\u0070\u0069\u006e\u0067", NewCT_Grouping)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u004c\u0069\u006e\u0065\u0073", NewCT_ChartLines)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0069\u006e\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_LineChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0069\u006e\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Line3DChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u006f\u0063\u006b\u0043\u0068\u0061\u0072\u0074", NewCT_StockChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_ScatterStyle)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0063\u0061\u0074\u0074\u0065\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_ScatterChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0053\u0074\u0079\u006c\u0065", NewCT_RadarStyle)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0052\u0061\u0064\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_RadarChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0047\u0072\u006fu\u0070\u0069\u006e\u0067", NewCT_BarGrouping)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0042\u0061\u0072\u0044\u0069r", NewCT_BarDir)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0068\u0061\u0070\u0065", NewCT_Shape)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074", NewCT_BarChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u0072\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Bar3DChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fA\u0072\u0065\u0061\u0043\u0068\u0061\u0072\u0074", NewCT_AreaChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0072\u0065\u0061\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Area3DChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_PieChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0065\u0033\u0044\u0043\u0068\u0061\u0072\u0074", NewCT_Pie3DChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0044\u006f\u0075g\u0068\u006e\u0075\u0074\u0043\u0068\u0061\u0072\u0074", NewCT_DoughnutChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fO\u0066\u0050\u0069\u0065\u0054\u0079\u0070\u0065", NewCT_OfPieType)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0066\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_OfPieChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0062\u0062\u006c\u0065C\u0068\u0061\u0072\u0074", NewCT_BubbleChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074", NewCT_BandFmt)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0042\u0061\u006e\u0064\u0046\u006d\u0074\u0073", NewCT_BandFmts)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fS\u0075\u0072\u0066\u0061\u0063\u0065\u0043\u0068\u0061\u0072\u0074", NewCT_SurfaceChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0075\u0072\u0066\u0061\u0063\u0065\u0033\u0044C\u0068\u0061\u0072\u0074", NewCT_Surface3DChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0041\u0078\u0050\u006f\u0073", NewCT_AxPos)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0072\u006f\u0073\u0073\u0065\u0073", NewCT_Crosses)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fC\u0072\u006f\u0073\u0073\u0042\u0065\u0074\u0077\u0065\u0065\u006e", NewCT_CrossBetween)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u0063\u006b\u004d\u0061\u0072\u006b", NewCT_TickMark)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0054\u0069\u0063\u006b\u004c\u0062\u006c\u0050\u006f\u0073", NewCT_TickLblPos)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0053\u006b\u0069\u0070", NewCT_Skip)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0054\u0069\u006d\u0065\u0055\u006e\u0069\u0074", NewCT_TimeUnit)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0041\u0078\u0069\u0073\u0055\u006e\u0069\u0074", NewCT_AxisUnit)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0042\u0075\u0069\u006c\u0074\u0049n\u0055\u006e\u0069\u0074", NewCT_BuiltInUnit)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0069\u0063t\u0075\u0072\u0065\u0046\u006f\u0072\u006d\u0061\u0074", NewCT_PictureFormat)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050ic\u0074\u0075\u0072\u0065\u0053\u0074\u0061\u0063\u006b\u0055\u006e\u0069\u0074", NewCT_PictureStackUnit)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0063\u0074\u0075\u0072\u0065\u004f\u0070t\u0069\u006f\u006e\u0073", NewCT_PictureOptions)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073\u004c\u0062\u006c", NewCT_DispUnitsLbl)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fD\u0069\u0073\u0070\u0055\u006e\u0069\u0074\u0073", NewCT_DispUnits)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004f\u0072\u0069\u0065\u006e\u0074a\u0074\u0069\u006f\u006e", NewCT_Orientation)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u006f\u0067\u0042\u0061\u0073\u0065", NewCT_LogBase)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0063\u0061\u006c\u0069\u006e\u0067", NewCT_Scaling)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0062\u006c\u004f\u0066\u0066\u0073\u0065\u0074", NewCT_LblOffset)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0061\u0074\u0041\u0078", NewCT_CatAx)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u0044\u0061\u0074\u0065\u0041x", NewCT_DateAx)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0065\u0072\u0041\u0078", NewCT_SerAx)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0056\u0061\u006c\u0041\u0078", NewCT_ValAx)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u006c\u006f\u0074\u0041\u0072\u0065\u0061", NewCT_PlotArea)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "C\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0046\u006d\u0074", NewCT_PivotFmt)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0069\u0076\u006f\u0074\u0046\u006d\u0074\u0073", NewCT_PivotFmts)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fL\u0065\u0067\u0065\u006e\u0064\u0050\u006f\u0073", NewCT_LegendPos)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u004c\u0065\u0067\u0065\u006e\u0064E\u006e\u0074\u0072\u0079", NewCT_LegendEntry)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005f\u004c\u0065\u0067\u0065\u006ed", NewCT_Legend)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fD\u0069\u0073\u0070\u0042\u006c\u0061\u006e\u006b\u0073\u0041\u0073", NewCT_DispBlanksAs)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074", NewCT_Chart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0053\u0074\u0079\u006c\u0065", NewCT_Style)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0069\u0076\u006f\u0074\u0053o\u0075\u0072\u0063\u0065", NewCT_PivotSource)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0072\u006f\u0074\u0065\u0063\u0074\u0069\u006f\u006e", NewCT_Protection)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fH\u0065\u0061\u0064\u0065\u0072\u0046\u006f\u006f\u0074\u0065\u0072", NewCT_HeaderFooter)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0050\u0061\u0067\u0065\u004d\u0061r\u0067\u0069\u006e\u0073", NewCT_PageMargins)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043T\u005fE\u0078\u0074\u0065\u0072\u006e\u0061\u006c\u0044\u0061\u0074\u0061", NewCT_ExternalData)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005fP\u0061\u0067\u0065\u0053\u0065\u0074\u0075\u0070", NewCT_PageSetup)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054_\u0050\u0072\u0069n\u0074\u0053\u0065\u0074\u0074\u0069\u006e\u0067\u0073", NewCT_PrintSettings)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0043\u0054\u005f\u0043\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewCT_ChartSpace)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061\u0072\u0074\u0053\u0070\u0061\u0063\u0065", NewChartSpace)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0075\u0073\u0065\u0072\u0053\u0068\u0061\u0070\u0065\u0073", NewUserShapes)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0063\u0068\u0061r\u0074", NewChart)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0044\u004c\u0062\u006c\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_DLblShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0047\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c", NewGroup_DLbl)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "G\u0072\u006f\u0075\u0070\u005f\u0044\u004c\u0062\u006c\u0073", NewGroup_DLbls)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005fS\u0065\u0072\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SerShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0069\u006e\u0065\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_LineChartShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0042\u0061\u0072\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_BarChartShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fA\u0072\u0065\u0061\u0043\u0068a\u0072\u0074S\u0068\u0061\u0072\u0065\u0064", NewEG_AreaChartShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045\u0047\u005f\u0050\u0069\u0065\u0043\u0068\u0061\u0072\u0074\u0053h\u0061\u0072\u0065\u0064", NewEG_PieChartShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0053\u0075rf\u0061c\u0065\u0043\u0068\u0061\u0072t\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_SurfaceChartShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "E\u0047\u005f\u0041\u0078\u0053\u0068\u0061\u0072\u0065\u0064", NewEG_AxShared)
	_g.RegisterConstructor("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0063\u0068\u0061\u0072\u0074", "\u0045G\u005fL\u0065\u0067\u0065\u006e\u0064E\u006e\u0074r\u0079\u0044\u0061\u0074\u0061", NewEG_LegendEntryData)
}
